{"version":3,"file":"73496.a71f928dc9fd0d63.js","mappings":"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","names":["PermissionsService","constructor","restService","this","apiName","get","providerName","providerKey","request","method","url","params","update","input","body","static","ɵfac","t","i0","i1","ɵprov","token","factory","providedIn","_c0","_c1","PermissionManagementComponent_ng_container_1_ng_template_1_Template","rf","ctx","ctx_r1","entityDisplayName","data","PermissionManagementComponent_ng_container_1_ng_template_3_li_11_a_1_span_3_Template","count_r13","ngIf","assignedCount","PermissionManagementComponent_ng_container_1_ng_template_3_li_11_a_1_Template","_r18","group_r11","$implicit","ctx_r16","onChangeGroup","ctx_r19","setDisabled","permissions","ctx_r12","selectedGroup","name","displayName","_c2","a0","PermissionManagementComponent_ng_container_1_ng_template_3_li_11_Template","ctx_r8","getAssignedCount","PermissionManagementComponent_ng_container_1_ng_template_3_div_21_ng_container_5_span_1_Template","provider_r27","PermissionManagementComponent_ng_container_1_ng_template_3_div_21_ng_container_5_Template","permission_r22","grantedProviders","PermissionManagementComponent_ng_container_1_ng_template_3_div_21_Template","_r30","_r24","ctx_r29","onClickCheckbox","value","ctx_r10","style","getChecked","isGrantedByOtherProviderName","hideBadges","PermissionManagementComponent_ng_container_1_ng_template_3_Template","_r32","$event","ctx_r31","selectAllTab","ctx_r33","onClickSelectAll","ctx_r34","selectThisTab","ctx_r35","onClickSelectThisTab","ctx_r3","disabledSelectAllInAllTabs","groups","trackByFn","disableSelectAllTab","selectedGroupPermissions","PermissionManagementComponent_ng_container_1_ng_template_5_Template","_r37","ctx_r36","submit","PermissionManagementComponent_ng_container_1_Template","_c3","size","scrollable","PermissionManagementComponent","visible","_visible","openModal","subscribe","visibleChange","emit","concat","selectAllInAllTabsRef","changes","selectAllInThisTabsRef","pipe","take","initModal","setSelectedGroup","service","configState","EventEmitter","modalBusy","_","item","find","per","isGranted","group","margin","document","dir","map","permission","i","findMargin","length","every","p","findIndex","clickedPermission","setTimeout","parentName","updateSelectedGroupPermissions","setTabCheckboxState","setGrantCheckboxState","setParentClicked","clickedPermissions","parentPermission","childPermissionGrantedCount","forEach","selectableGroupPermissions","filter","selectedPermissions","element","querySelector","indeterminate","selectablePermissions","selectedAllPermissions","checkboxElement","index","slice","unchangedPermissions","getPermissions","changedPermissions","unchanged","switchMap","shouldFetchAppConfig","refreshAppState","of","finalize","Error","tap","permissionRes","provider","groupName","reduce","acc","val","currentUser","getOne","roles","some","role","id","i2","ɵcmp","type","selectors","viewQuery","_t","inputs","outputs","exportAs","decls","vars","consts","template","dependencies","i3","i4","i5","styles","PermissionManagementModule","ɵmod","ɵinj","imports","CoreModule","ThemeSharedModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@abp/ng.permission-management/fesm2022/abp-ng.permission-management-proxy.mjs","./node_modules/@abp/ng.permission-management/fesm2022/abp-ng.permission-management.mjs"],"sourcesContent":["import * as i1 from '@abp/ng.core';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nclass PermissionsService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'AbpPermissionManagement';\n        this.get = (providerName, providerKey) => this.restService.request({\n            method: 'GET',\n            url: '/api/permission-management/permissions',\n            params: { providerName, providerKey },\n        }, { apiName: this.apiName });\n        this.update = (providerName, providerKey, input) => this.restService.request({\n            method: 'PUT',\n            url: '/api/permission-management/permissions',\n            params: { providerName, providerKey },\n            body: input,\n        }, { apiName: this.apiName });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PermissionsService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PermissionsService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PermissionsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PermissionsService };\n","import * as i2 from '@abp/ng.core';\nimport { CoreModule } from '@abp/ng.core';\nimport * as i1 from '@abp/ng.permission-management/proxy';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, ViewChildren, NgModule } from '@angular/core';\nimport { concat, of } from 'rxjs';\nimport { take, switchMap, finalize, tap } from 'rxjs/operators';\nimport * as i3 from '@angular/common';\nimport * as i4 from '@angular/forms';\nimport * as i5 from '@abp/ng.theme.shared';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\n\nclass PermissionManagementComponent {\n    get visible() {\n        return this._visible;\n    }\n    set visible(value) {\n        if (value === this._visible)\n            return;\n        if (value) {\n            this.openModal().subscribe(() => {\n                this._visible = true;\n                this.visibleChange.emit(true);\n                concat(this.selectAllInAllTabsRef.changes, this.selectAllInThisTabsRef.changes)\n                    .pipe(take(1))\n                    .subscribe(() => {\n                    this.initModal();\n                });\n            });\n        }\n        else {\n            this.setSelectedGroup(null);\n            this._visible = false;\n            this.visibleChange.emit(false);\n        }\n    }\n    constructor(service, configState) {\n        this.service = service;\n        this.configState = configState;\n        this.hideBadges = false;\n        this._visible = false;\n        this.visibleChange = new EventEmitter();\n        this.data = { groups: [], entityDisplayName: '' };\n        this.permissions = [];\n        this.selectThisTab = false;\n        this.selectAllTab = false;\n        this.disableSelectAllTab = false;\n        this.disabledSelectAllInAllTabs = false;\n        this.modalBusy = false;\n        this.selectedGroupPermissions = [];\n        this.trackByFn = (_, item) => item.name;\n    }\n    getChecked(name) {\n        return (this.permissions.find(per => per.name === name) || { isGranted: false }).isGranted;\n    }\n    setSelectedGroup(group) {\n        this.selectedGroup = group;\n        if (!this.selectedGroup) {\n            this.selectedGroupPermissions = [];\n            return;\n        }\n        const margin = `margin-${document.body.dir === 'rtl' ? 'right' : 'left'}.px`;\n        const permissions = (this.data.groups.find(group => group.name === this.selectedGroup?.name) || {}).permissions ||\n            [];\n        this.selectedGroupPermissions = permissions.map(permission => ({\n            ...permission,\n            style: { [margin]: findMargin(permissions, permission) },\n            isGranted: (this.permissions.find(per => per.name === permission.name) || {}).isGranted,\n        }));\n    }\n    setDisabled(permissions) {\n        if (permissions.length) {\n            this.disableSelectAllTab = permissions.every(permission => permission.isGranted &&\n                permission.grantedProviders?.every(p => p.providerName !== this.providerName));\n        }\n        else {\n            this.disableSelectAllTab = false;\n        }\n    }\n    isGrantedByOtherProviderName(grantedProviders) {\n        if (grantedProviders.length) {\n            return grantedProviders.findIndex(p => p.providerName !== this.providerName) > -1;\n        }\n        return false;\n    }\n    onClickCheckbox(clickedPermission) {\n        if (clickedPermission.isGranted &&\n            this.isGrantedByOtherProviderName(clickedPermission.grantedProviders))\n            return;\n        this.setSelectedGroup(this.selectedGroup);\n        setTimeout(() => {\n            this.permissions = this.permissions.map(per => {\n                if (clickedPermission.name === per.name) {\n                    return { ...per, isGranted: !per.isGranted };\n                }\n                else if (clickedPermission.name === per.parentName && clickedPermission.isGranted) {\n                    return { ...per, isGranted: false };\n                }\n                else if (clickedPermission.parentName === per.name && !clickedPermission.isGranted) {\n                    return { ...per, isGranted: true };\n                }\n                return per;\n            });\n            this.updateSelectedGroupPermissions(clickedPermission);\n            this.setTabCheckboxState();\n            this.setGrantCheckboxState();\n            this.setParentClicked(clickedPermission);\n        }, 0);\n    }\n    setParentClicked(clickedPermissions) {\n        let childPermissionGrantedCount = 0;\n        let parentPermission;\n        if (clickedPermissions.parentName) {\n            this.permissions.forEach(per => {\n                if (per.name === clickedPermissions.parentName) {\n                    parentPermission = per;\n                }\n            });\n            this.permissions.forEach(per => {\n                if (parentPermission.name === per.parentName) {\n                    per.isGranted && childPermissionGrantedCount++;\n                }\n            });\n            if (childPermissionGrantedCount === 1 && !parentPermission.isGranted) {\n                this.permissions = this.permissions.map(per => {\n                    if (per.name === parentPermission.name) {\n                        per.isGranted = true;\n                    }\n                    return per;\n                });\n            }\n            return;\n        }\n        this.permissions = this.permissions.map(per => {\n            if (per.parentName === clickedPermissions.name) {\n                per.isGranted = false;\n            }\n            return per;\n        });\n    }\n    updateSelectedGroupPermissions(clickedPermissions) {\n        this.selectedGroupPermissions = this.selectedGroupPermissions.map(per => {\n            if (per.name === clickedPermissions.name) {\n                per.isGranted = !per.isGranted;\n            }\n            return per;\n        });\n    }\n    setTabCheckboxState() {\n        const selectableGroupPermissions = this.selectedGroupPermissions.filter(per => per.grantedProviders.every(p => p.providerName === this.providerName));\n        const selectedPermissions = selectableGroupPermissions.filter(per => per.isGranted);\n        const element = document.querySelector('#select-all-in-this-tabs');\n        if (selectedPermissions.length === selectableGroupPermissions.length) {\n            element.indeterminate = false;\n            this.selectThisTab = true;\n        }\n        else if (selectedPermissions.length === 0) {\n            element.indeterminate = false;\n            this.selectThisTab = false;\n        }\n        else {\n            element.indeterminate = true;\n        }\n    }\n    setGrantCheckboxState() {\n        const selectablePermissions = this.permissions.filter(per => per.grantedProviders.every(p => p.providerName === this.providerName));\n        const selectedAllPermissions = selectablePermissions.filter(per => per.isGranted);\n        const checkboxElement = document.querySelector('#select-all-in-all-tabs');\n        if (selectedAllPermissions.length === selectablePermissions.length) {\n            checkboxElement.indeterminate = false;\n            this.selectAllTab = true;\n        }\n        else if (selectedAllPermissions.length === 0) {\n            checkboxElement.indeterminate = false;\n            this.selectAllTab = false;\n        }\n        else {\n            checkboxElement.indeterminate = true;\n        }\n    }\n    onClickSelectThisTab() {\n        this.selectedGroupPermissions.forEach(permission => {\n            if (permission.isGranted && this.isGrantedByOtherProviderName(permission.grantedProviders))\n                return;\n            const index = this.permissions.findIndex(per => per.name === permission.name);\n            this.permissions = [\n                ...this.permissions.slice(0, index),\n                { ...this.permissions[index], isGranted: !this.selectThisTab },\n                ...this.permissions.slice(index + 1),\n            ];\n        });\n        this.setGrantCheckboxState();\n    }\n    onClickSelectAll() {\n        this.permissions = this.permissions.map(permission => ({\n            ...permission,\n            isGranted: this.isGrantedByOtherProviderName(permission.grantedProviders) || !this.selectAllTab,\n        }));\n        if (!this.disableSelectAllTab) {\n            this.selectThisTab = !this.selectAllTab;\n            this.setTabCheckboxState();\n        }\n        this.onChangeGroup(this.selectedGroup);\n    }\n    onChangeGroup(group) {\n        this.setDisabled(group.permissions);\n        this.setSelectedGroup(group);\n        this.setTabCheckboxState();\n    }\n    submit() {\n        const unchangedPermissions = getPermissions(this.data.groups);\n        const changedPermissions = this.permissions\n            .filter(per => (unchangedPermissions.find(unchanged => unchanged.name === per.name) || {}).isGranted ===\n            per.isGranted\n            ? false\n            : true)\n            .map(({ name, isGranted }) => ({ name, isGranted }));\n        if (!changedPermissions.length) {\n            this.visible = false;\n            return;\n        }\n        this.modalBusy = true;\n        this.service\n            .update(this.providerName, this.providerKey, { permissions: changedPermissions })\n            .pipe(switchMap(() => this.shouldFetchAppConfig() ? this.configState.refreshAppState() : of(null)), finalize(() => (this.modalBusy = false)))\n            .subscribe(() => {\n            this.visible = false;\n        });\n    }\n    openModal() {\n        if (!this.providerKey || !this.providerName) {\n            throw new Error('Provider Key and Provider Name are required.');\n        }\n        return this.service.get(this.providerName, this.providerKey).pipe(tap((permissionRes) => {\n            this.data = permissionRes;\n            this.permissions = getPermissions(permissionRes.groups);\n            this.setSelectedGroup(permissionRes.groups[0]);\n            this.disabledSelectAllInAllTabs = this.permissions.every(per => per.isGranted &&\n                per.grantedProviders.every(provider => provider.providerName !== this.providerName));\n        }));\n    }\n    initModal() {\n        // TODO: Refactor\n        setTimeout(() => {\n            this.setDisabled(this.selectedGroup?.permissions || []);\n            this.setTabCheckboxState();\n            this.setGrantCheckboxState();\n        });\n    }\n    getAssignedCount(groupName) {\n        return this.permissions.reduce((acc, val) => (val.groupName === groupName && val.isGranted ? acc + 1 : acc), 0);\n    }\n    shouldFetchAppConfig() {\n        const currentUser = this.configState.getOne('currentUser');\n        if (this.providerName === 'R')\n            return currentUser.roles.some(role => role === this.providerKey);\n        if (this.providerName === 'U')\n            return currentUser.id === this.providerKey;\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PermissionManagementComponent, deps: [{ token: i1.PermissionsService }, { token: i2.ConfigStateService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: PermissionManagementComponent, selector: \"abp-permission-management\", inputs: { providerName: \"providerName\", providerKey: \"providerKey\", hideBadges: \"hideBadges\", entityDisplayName: \"entityDisplayName\", visible: \"visible\" }, outputs: { visibleChange: \"visibleChange\" }, viewQueries: [{ propertyName: \"selectAllInThisTabsRef\", predicate: [\"selectAllInThisTabsRef\"], descendants: true }, { propertyName: \"selectAllInAllTabsRef\", predicate: [\"selectAllInAllTabsRef\"], descendants: true }], exportAs: [\"abpPermissionManagement\"], ngImport: i0, template: \"<abp-modal [(visible)]=\\\"visible\\\" [busy]=\\\"modalBusy\\\" [options]=\\\"{ size: 'lg' ,scrollable:false }\\\">\\r\\n  <ng-container *ngIf=\\\"data.entityDisplayName || entityDisplayName\\\">\\r\\n    <ng-template #abpHeader>\\r\\n      <h4>\\r\\n        {{ 'AbpPermissionManagement::Permissions' | abpLocalization }} -\\r\\n        {{ entityDisplayName || data.entityDisplayName }}\\r\\n      </h4>\\r\\n    </ng-template>\\r\\n    <ng-template #abpBody>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-4 scroll-in-modal\\\">\\r\\n          <div class=\\\"form-check mb-2\\\">\\r\\n            <input\\r\\n              #selectAllInAllTabsRef\\r\\n              type=\\\"checkbox\\\"\\r\\n              id=\\\"select-all-in-all-tabs\\\"\\r\\n              name=\\\"select-all-in-all-tabs\\\"\\r\\n              class=\\\"form-check-input\\\"\\r\\n              [(ngModel)]=\\\"selectAllTab\\\"\\r\\n              (click)=\\\"onClickSelectAll()\\\"\\r\\n              [disabled]=\\\"disabledSelectAllInAllTabs\\\"\\r\\n            />\\r\\n            <label class=\\\"form-check-label\\\" for=\\\"select-all-in-all-tabs\\\">{{\\r\\n              'AbpPermissionManagement::SelectAllInAllTabs' | abpLocalization\\r\\n            }}</label>\\r\\n          </div>\\r\\n\\r\\n          <hr class=\\\"mt-2 mb-2\\\" />\\r\\n          <div class=\\\"overflow-auto\\\">\\r\\n            <ul class=\\\"nav nav-pills flex-column\\\">\\r\\n              <li *ngFor=\\\"let group of data.groups; trackBy: trackByFn\\\" class=\\\"nav-item\\\">\\r\\n                <a\\r\\n                  *ngIf=\\\"{ assignedCount: getAssignedCount(group.name) } as count\\\"\\r\\n                  class=\\\"nav-link pointer\\\"\\r\\n                  [class.active]=\\\"selectedGroup?.name === group?.name\\\"\\r\\n                  (click)=\\\"onChangeGroup(group)\\\"\\r\\n                  (select)=\\\"setDisabled(group.permissions)\\\"\\r\\n                >\\r\\n                  <div [class.font-weight-bold]=\\\"count.assignedCount\\\">\\r\\n                    {{ group?.displayName }}\\r\\n                    <span *ngIf=\\\"count.assignedCount > 0\\\">({{ count.assignedCount }})</span>\\r\\n                  </div>\\r\\n                </a>\\r\\n              </li>\\r\\n            </ul>\\r\\n          </div>\\r\\n         </div>\\r\\n\\r\\n        <div class=\\\"col-md-8 scroll-in-modal\\\">\\r\\n          <div class=\\\"ps-1\\\">\\r\\n            <div class=\\\"form-check mb-2\\\">\\r\\n              <input\\r\\n                #selectAllInThisTabsRef\\r\\n                type=\\\"checkbox\\\"\\r\\n                id=\\\"select-all-in-this-tabs\\\"\\r\\n                name=\\\"select-all-in-this-tabs\\\"\\r\\n                class=\\\"form-check-input\\\"\\r\\n                [(ngModel)]=\\\"selectThisTab\\\"\\r\\n                [disabled]=\\\"disableSelectAllTab\\\"\\r\\n                (click)=\\\"onClickSelectThisTab()\\\"\\r\\n              />\\r\\n              <label class=\\\"form-check-label\\\" for=\\\"select-all-in-this-tabs\\\">{{\\r\\n                'AbpPermissionManagement::SelectAllInThisTab' | abpLocalization\\r\\n              }}</label>\\r\\n            </div>\\r\\n            <hr class=\\\"my-2\\\" />\\r\\n            <div\\r\\n              *ngFor=\\\"let permission of selectedGroupPermissions; let i = index; trackBy: trackByFn\\\"\\r\\n              [ngStyle]=\\\"permission.style\\\"\\r\\n              class=\\\"form-check mb-2\\\"\\r\\n            >\\r\\n              <input\\r\\n                #permissionCheckbox\\r\\n                type=\\\"checkbox\\\"\\r\\n                [checked]=\\\"getChecked(permission.name)\\\"\\r\\n                [value]=\\\"getChecked(permission.name)\\\"\\r\\n                [attr.id]=\\\"permission.name\\\"\\r\\n                class=\\\"form-check-input\\\"\\r\\n                [disabled]=\\\"isGrantedByOtherProviderName(permission.grantedProviders)\\\"\\r\\n                (click)=\\\"onClickCheckbox(permission, permissionCheckbox.value)\\\"\\r\\n              />\\r\\n              <label class=\\\"form-check-label\\\" [attr.for]=\\\"permission.name\\\"\\r\\n                >{{ permission.displayName }}\\r\\n                <ng-container *ngIf=\\\"!hideBadges\\\">\\r\\n                  <span\\r\\n                    *ngFor=\\\"let provider of permission.grantedProviders\\\"\\r\\n                    class=\\\"badge bg-light text-dark\\\"\\r\\n                    >{{ provider.providerName }}: {{ provider.providerKey }}</span\\r\\n                  >\\r\\n                </ng-container>\\r\\n              </label>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n    <ng-template #abpFooter>\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n        {{ 'AbpIdentity::Cancel' | abpLocalization }}\\r\\n      </button>\\r\\n      <abp-button iconClass=\\\"fa fa-check\\\" (click)=\\\"submit()\\\">{{\\r\\n        'AbpIdentity::Save' | abpLocalization\\r\\n      }}</abp-button>\\r\\n    </ng-template>\\r\\n  </ng-container>\\r\\n</abp-modal>\\r\\n\", styles: [\".overflow-scroll{max-height:70vh;overflow-y:scroll}.scroll-in-modal{overflow:auto;max-height:calc(100vh - 15rem)}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i4.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { kind: \"directive\", type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i5.ButtonComponent, selector: \"abp-button\", inputs: [\"buttonId\", \"buttonClass\", \"buttonType\", \"formName\", \"iconClass\", \"loading\", \"disabled\", \"attributes\"], outputs: [\"click\", \"focus\", \"blur\", \"abpClick\", \"abpFocus\", \"abpBlur\"] }, { kind: \"component\", type: i5.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i5.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"pipe\", type: i2.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PermissionManagementComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-permission-management', exportAs: 'abpPermissionManagement', template: \"<abp-modal [(visible)]=\\\"visible\\\" [busy]=\\\"modalBusy\\\" [options]=\\\"{ size: 'lg' ,scrollable:false }\\\">\\r\\n  <ng-container *ngIf=\\\"data.entityDisplayName || entityDisplayName\\\">\\r\\n    <ng-template #abpHeader>\\r\\n      <h4>\\r\\n        {{ 'AbpPermissionManagement::Permissions' | abpLocalization }} -\\r\\n        {{ entityDisplayName || data.entityDisplayName }}\\r\\n      </h4>\\r\\n    </ng-template>\\r\\n    <ng-template #abpBody>\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-4 scroll-in-modal\\\">\\r\\n          <div class=\\\"form-check mb-2\\\">\\r\\n            <input\\r\\n              #selectAllInAllTabsRef\\r\\n              type=\\\"checkbox\\\"\\r\\n              id=\\\"select-all-in-all-tabs\\\"\\r\\n              name=\\\"select-all-in-all-tabs\\\"\\r\\n              class=\\\"form-check-input\\\"\\r\\n              [(ngModel)]=\\\"selectAllTab\\\"\\r\\n              (click)=\\\"onClickSelectAll()\\\"\\r\\n              [disabled]=\\\"disabledSelectAllInAllTabs\\\"\\r\\n            />\\r\\n            <label class=\\\"form-check-label\\\" for=\\\"select-all-in-all-tabs\\\">{{\\r\\n              'AbpPermissionManagement::SelectAllInAllTabs' | abpLocalization\\r\\n            }}</label>\\r\\n          </div>\\r\\n\\r\\n          <hr class=\\\"mt-2 mb-2\\\" />\\r\\n          <div class=\\\"overflow-auto\\\">\\r\\n            <ul class=\\\"nav nav-pills flex-column\\\">\\r\\n              <li *ngFor=\\\"let group of data.groups; trackBy: trackByFn\\\" class=\\\"nav-item\\\">\\r\\n                <a\\r\\n                  *ngIf=\\\"{ assignedCount: getAssignedCount(group.name) } as count\\\"\\r\\n                  class=\\\"nav-link pointer\\\"\\r\\n                  [class.active]=\\\"selectedGroup?.name === group?.name\\\"\\r\\n                  (click)=\\\"onChangeGroup(group)\\\"\\r\\n                  (select)=\\\"setDisabled(group.permissions)\\\"\\r\\n                >\\r\\n                  <div [class.font-weight-bold]=\\\"count.assignedCount\\\">\\r\\n                    {{ group?.displayName }}\\r\\n                    <span *ngIf=\\\"count.assignedCount > 0\\\">({{ count.assignedCount }})</span>\\r\\n                  </div>\\r\\n                </a>\\r\\n              </li>\\r\\n            </ul>\\r\\n          </div>\\r\\n         </div>\\r\\n\\r\\n        <div class=\\\"col-md-8 scroll-in-modal\\\">\\r\\n          <div class=\\\"ps-1\\\">\\r\\n            <div class=\\\"form-check mb-2\\\">\\r\\n              <input\\r\\n                #selectAllInThisTabsRef\\r\\n                type=\\\"checkbox\\\"\\r\\n                id=\\\"select-all-in-this-tabs\\\"\\r\\n                name=\\\"select-all-in-this-tabs\\\"\\r\\n                class=\\\"form-check-input\\\"\\r\\n                [(ngModel)]=\\\"selectThisTab\\\"\\r\\n                [disabled]=\\\"disableSelectAllTab\\\"\\r\\n                (click)=\\\"onClickSelectThisTab()\\\"\\r\\n              />\\r\\n              <label class=\\\"form-check-label\\\" for=\\\"select-all-in-this-tabs\\\">{{\\r\\n                'AbpPermissionManagement::SelectAllInThisTab' | abpLocalization\\r\\n              }}</label>\\r\\n            </div>\\r\\n            <hr class=\\\"my-2\\\" />\\r\\n            <div\\r\\n              *ngFor=\\\"let permission of selectedGroupPermissions; let i = index; trackBy: trackByFn\\\"\\r\\n              [ngStyle]=\\\"permission.style\\\"\\r\\n              class=\\\"form-check mb-2\\\"\\r\\n            >\\r\\n              <input\\r\\n                #permissionCheckbox\\r\\n                type=\\\"checkbox\\\"\\r\\n                [checked]=\\\"getChecked(permission.name)\\\"\\r\\n                [value]=\\\"getChecked(permission.name)\\\"\\r\\n                [attr.id]=\\\"permission.name\\\"\\r\\n                class=\\\"form-check-input\\\"\\r\\n                [disabled]=\\\"isGrantedByOtherProviderName(permission.grantedProviders)\\\"\\r\\n                (click)=\\\"onClickCheckbox(permission, permissionCheckbox.value)\\\"\\r\\n              />\\r\\n              <label class=\\\"form-check-label\\\" [attr.for]=\\\"permission.name\\\"\\r\\n                >{{ permission.displayName }}\\r\\n                <ng-container *ngIf=\\\"!hideBadges\\\">\\r\\n                  <span\\r\\n                    *ngFor=\\\"let provider of permission.grantedProviders\\\"\\r\\n                    class=\\\"badge bg-light text-dark\\\"\\r\\n                    >{{ provider.providerName }}: {{ provider.providerKey }}</span\\r\\n                  >\\r\\n                </ng-container>\\r\\n              </label>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n    <ng-template #abpFooter>\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n        {{ 'AbpIdentity::Cancel' | abpLocalization }}\\r\\n      </button>\\r\\n      <abp-button iconClass=\\\"fa fa-check\\\" (click)=\\\"submit()\\\">{{\\r\\n        'AbpIdentity::Save' | abpLocalization\\r\\n      }}</abp-button>\\r\\n    </ng-template>\\r\\n  </ng-container>\\r\\n</abp-modal>\\r\\n\", styles: [\".overflow-scroll{max-height:70vh;overflow-y:scroll}.scroll-in-modal{overflow:auto;max-height:calc(100vh - 15rem)}\\n\"] }]\n        }], ctorParameters: () => [{ type: i1.PermissionsService }, { type: i2.ConfigStateService }], propDecorators: { providerName: [{\n                type: Input\n            }], providerKey: [{\n                type: Input\n            }], hideBadges: [{\n                type: Input\n            }], entityDisplayName: [{\n                type: Input\n            }], visible: [{\n                type: Input\n            }], visibleChange: [{\n                type: Output\n            }], selectAllInThisTabsRef: [{\n                type: ViewChildren,\n                args: ['selectAllInThisTabsRef']\n            }], selectAllInAllTabsRef: [{\n                type: ViewChildren,\n                args: ['selectAllInAllTabsRef']\n            }] } });\nfunction findMargin(permissions, permission) {\n    const parentPermission = permissions.find(per => per.name === permission.parentName);\n    if (parentPermission && parentPermission.parentName) {\n        let margin = 20;\n        return (margin += findMargin(permissions, parentPermission));\n    }\n    return parentPermission ? 20 : 0;\n}\nfunction getPermissions(groups) {\n    return groups.reduce((acc, val) => [\n        ...acc,\n        ...val.permissions.map(p => ({ ...p, groupName: val.name || '' })),\n    ], []);\n}\n\nclass PermissionManagementModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PermissionManagementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: PermissionManagementModule, declarations: [PermissionManagementComponent], imports: [CoreModule, ThemeSharedModule], exports: [PermissionManagementComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PermissionManagementModule, imports: [CoreModule, ThemeSharedModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: PermissionManagementModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [PermissionManagementComponent],\n                    imports: [CoreModule, ThemeSharedModule],\n                    exports: [PermissionManagementComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { PermissionManagementComponent, PermissionManagementModule };\n"],"x_google_ignoreList":[0,1]}