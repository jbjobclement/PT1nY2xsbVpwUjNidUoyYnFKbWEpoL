{"version":3,"file":"21660.d8f04662fa3033ca.js","mappings":"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","names":["LanguageTextService","constructor","restService","this","apiName","get","resourceName","cultureName","name","baseCultureName","request","method","url","params","getList","input","filter","targetCultureName","getOnlyEmptyValues","sorting","skipCount","maxResultCount","restoreToDefault","update","value","static","ɵfac","t","i0","i1","ɵprov","token","factory","providedIn","LanguageService","create","body","delete","id","getAllList","getCulturelist","getFlagList","getResources","setAsDefault","LanguagesComponent_ng_template_6_Template","rf","ctx","$implicit","displayName","LanguagesComponent_ng_template_8_Template","data_r11","LanguagesComponent_ng_template_11_Template","ctx_r4","selected","LanguagesComponent_ng_template_13_form_0_Template","_r14","ctx_r13","save","ctx_r12","form","LanguagesComponent_ng_template_13_Template","ctx_r6","LanguagesComponent_ng_template_15_Template","LanguageTextsComponent_option_13_Template","lang_r11","LanguageTextsComponent_option_20_Template","lang_r12","LanguageTextsComponent_option_29_Template","resource_r13","LanguageTextsComponent_ng_template_45_Template","row_r14","row","rowIndex","LanguageTextsComponent_ngx_datatable_column_46_ng_template_2_Template","row_r18","col_r16","field","LanguageTextsComponent_ngx_datatable_column_46_Template","header","LanguageTextsComponent_ng_template_48_Template","LanguageTextsComponent_ng_template_50_Template","_r22","ctx_r21","$event","ctx_r23","ctx_r7","modalBusy","baseValue","LanguageTextsComponent_ng_template_52_Template","_r25","ctx_r24","restore","ctx_r26","ctx_r27","ctx_r9","_c0","size","flagIcons","LanguagesComponent","list","confirmationService","service","injector","configState","sessionService","data","items","totalCount","cultures$","of","isModalVisible","controls","createForm","pipe","switchMap","cultures","length","subscribe","res","FormPropData","generateFormFromProps","patchValue","uiCultureName","hookToQuery","query","ngOnInit","openModal","add","edit","valid","finalize","refreshAppState","isDefaultLanguage","warningMessageKey","warn","messageLocalizationParams","status","Confirmation","Status","confirm","lang","defaultLanguage","forEach","item","getLanguage","setLanguage","i2","i2$1","ɵcmp","type","selectors","features","ListService","provide","EXTENSIONS_IDENTIFIER","useValue","decls","vars","consts","template","dependencies","i4","i4$1","i6","i6$1","i8","i9","encapsulation","LanguageTextsComponent","renderer","languageService","pageQuery","resources","languages","getDeep","columns","closeModal","selectedIndex","index","next","setTimeout","page","removeClass","document","getElementById","getWithoutPageReset","i7","DEFAULT_LANGUAGE_TEXTS_ENTITY_ACTIONS","EntityAction","createMany","text","action","getInjected","record","permission","DEFAULT_LANGUAGE_TEXTS_TOOLBAR_ACTIONS","ToolbarAction","DEFAULT_LANGUAGES_ENTITY_ACTIONS","DEFAULT_LANGUAGES_ENTITY_PROPS","EntityProp","columnWidth","valueResolver","l10n","LocalizationService","instant","bind","escapeHtmlChars","flagIcon","EMPTY_OPTION","key","DEFAULT_LANGUAGES_CREATE_FORM_PROPS","FormProp","validators","Validators","required","options","map","culture","maxLength","flag","defaultValue","DEFAULT_LANGUAGES_EDIT_FORM_PROPS","slice","DEFAULT_LANGUAGES_TOOLBAR_ACTIONS","icon","DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_ACTIONS","DEFAULT_LANGUAGE_MANAGEMENT_TOOLBAR_ACTIONS","DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS","DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS","DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS","LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS","InjectionToken","LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS","LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS","LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS","LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS","LanguageManagementExtensionsGuard","canActivate","isFlagIconEnabled","ENABLE_FLAG_ICON","extensions","ExtensionsService","actionContributors","toolbarContributors","propContributors","createFormContributors","editFormContributors","filterFlagIcon","ConfigStateService","getObjectExtensionEntitiesFromStore","entities","Language","mapEntitiesToContributors","tap","objectExtensionContributors","mergeWithDefaultActions","entityActions","toolbarActions","mergeWithDefaultProps","entityProps","prop","createFormProps","editFormProps","editForm","mapTo","defaults","d","LanguageManagementGuard","languageManagementFeatures","enable","LANGUAGE_MANAGEMENT_FEATURES","languageManagementGuard","inject","languageManagementExtensionsResolver","Injector","routes","path","redirectTo","pathMatch","component","RouterOutletComponent","authGuard","permissionGuard","resolve","children","ReplaceableRouteContainerComponent","requiredPolicy","replaceableComponent","defaultComponent","LanguageManagementRoutingModule","ɵmod","ɵinj","imports","RouterModule","forChild","LanguageManagementModule","ngModule","providers","entityActionContributors","toolbarActionContributors","entityPropContributors","createFormPropContributors","editFormPropContributors","forLazy","LazyModuleFactory","CoreModule","CommercialUiModule","ThemeSharedModule","NgbDropdownModule","NgxValidateCoreModule","PageModule","AdvancedEntityFiltersModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@volo/abp.ng.language-management/fesm2022/volo-abp.ng.language-management-proxy.mjs","./node_modules/@volo/abp.ng.language-management/fesm2022/volo-abp.ng.language-management.mjs"],"sourcesContent":["import * as i1 from '@abp/ng.core';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nclass LanguageTextService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'LanguageManagement';\n        this.get = (resourceName, cultureName, name, baseCultureName) => this.restService.request({\n            method: 'GET',\n            url: `/api/language-management/language-texts/${resourceName}/${cultureName}/${name}`,\n            params: { baseCultureName },\n        }, { apiName: this.apiName });\n        this.getList = (input) => this.restService.request({\n            method: 'GET',\n            url: '/api/language-management/language-texts',\n            params: { filter: input.filter, resourceName: input.resourceName, baseCultureName: input.baseCultureName, targetCultureName: input.targetCultureName, getOnlyEmptyValues: input.getOnlyEmptyValues, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },\n        }, { apiName: this.apiName });\n        this.restoreToDefault = (resourceName, cultureName, name) => this.restService.request({\n            method: 'PUT',\n            url: `/api/language-management/language-texts/${resourceName}/${cultureName}/${name}/restore`,\n        }, { apiName: this.apiName });\n        this.update = (resourceName, cultureName, name, value) => this.restService.request({\n            method: 'PUT',\n            url: `/api/language-management/language-texts/${resourceName}/${cultureName}/${name}`,\n            params: { value },\n        }, { apiName: this.apiName });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageTextService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageTextService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageTextService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\nclass LanguageService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'LanguageManagement';\n        this.create = (input) => this.restService.request({\n            method: 'POST',\n            url: '/api/language-management/languages',\n            body: input,\n        }, { apiName: this.apiName });\n        this.delete = (id) => this.restService.request({\n            method: 'DELETE',\n            url: `/api/language-management/languages/${id}`,\n        }, { apiName: this.apiName });\n        this.get = (id) => this.restService.request({\n            method: 'GET',\n            url: `/api/language-management/languages/${id}`,\n        }, { apiName: this.apiName });\n        this.getAllList = () => this.restService.request({\n            method: 'GET',\n            url: '/api/language-management/languages/all',\n        }, { apiName: this.apiName });\n        this.getCulturelist = () => this.restService.request({\n            method: 'GET',\n            url: '/api/language-management/languages/culture-list',\n        }, { apiName: this.apiName });\n        this.getFlagList = () => this.restService.request({\n            method: 'GET',\n            url: '/api/language-management/languages/flag-list',\n        }, { apiName: this.apiName });\n        this.getList = (input) => this.restService.request({\n            method: 'GET',\n            url: '/api/language-management/languages',\n            params: { filter: input.filter, resourceName: input.resourceName, baseCultureName: input.baseCultureName, targetCultureName: input.targetCultureName, getOnlyEmptyValues: input.getOnlyEmptyValues, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },\n        }, { apiName: this.apiName });\n        this.getResources = () => this.restService.request({\n            method: 'GET',\n            url: '/api/language-management/languages/resources',\n        }, { apiName: this.apiName });\n        this.setAsDefault = (id) => this.restService.request({\n            method: 'PUT',\n            url: `/api/language-management/languages/${id}/set-as-default`,\n        }, { apiName: this.apiName });\n        this.update = (id, input) => this.restService.request({\n            method: 'PUT',\n            url: `/api/language-management/languages/${id}`,\n            body: input,\n        }, { apiName: this.apiName });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LanguageService, LanguageTextService };\n","import * as i1 from '@abp/ng.core';\nimport { ListService, LocalizationService, escapeHtmlChars, ConfigStateService, RouterOutletComponent, authGuard, permissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';\nimport * as i2 from '@abp/ng.theme.shared';\nimport { Confirmation, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport * as i6 from '@abp/ng.components/extensible';\nimport { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, ToolbarAction, EntityProp, FormProp, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps } from '@abp/ng.components/extensible';\nimport * as i0 from '@angular/core';\nimport { Component, InjectionToken, Injectable, Inject, inject, Injector, NgModule } from '@angular/core';\nimport * as i2$1 from '@volo/abp.ng.language-management/proxy';\nimport * as i1$1 from 'rxjs';\nimport { of } from 'rxjs';\nimport { switchMap, finalize, map, tap, mapTo } from 'rxjs/operators';\nimport * as i4 from '@angular/common';\nimport * as i4$1 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i6$1 from '@volo/abp.commercial.ng.ui';\nimport { CommercialUiModule, AdvancedEntityFiltersModule } from '@volo/abp.commercial.ng.ui';\nimport * as i8 from '@ngx-validate/core';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\nimport * as i9 from '@abp/ng.components/page';\nimport { PageModule } from '@abp/ng.components/page';\nimport * as i7 from '@swimlane/ngx-datatable';\nimport { ENABLE_FLAG_ICON } from '@volo/abp.commercial.ng.ui/config';\nimport { LANGUAGE_MANAGEMENT_FEATURES } from '@volo/abp.ng.language-management/common';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\nimport * as i1$2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\n\nvar flagIcons = [\n    'ad',\n    'ae',\n    'af',\n    'ag',\n    'ai',\n    'al',\n    'am',\n    'ao',\n    'ar',\n    'as',\n    'at',\n    'au',\n    'aw',\n    'ax',\n    'az',\n    'ba',\n    'bb',\n    'bd',\n    'be',\n    'bf',\n    'bg',\n    'bh',\n    'bi',\n    'bj',\n    'bl',\n    'bm',\n    'bn',\n    'bo',\n    'bq',\n    'br',\n    'bs',\n    'bt',\n    'bw',\n    'by',\n    'bz',\n    'ca',\n    'cc',\n    'cd',\n    'cf',\n    'cg',\n    'ch',\n    'ci',\n    'ck',\n    'cl',\n    'cm',\n    'cn',\n    'co',\n    'cr',\n    'cu',\n    'cv',\n    'cw',\n    'cx',\n    'cy',\n    'cz',\n    'de',\n    'dj',\n    'dk',\n    'do',\n    'dz',\n    'ec',\n    'ee',\n    'eg',\n    'eh',\n    'er',\n    'es',\n    'et',\n    'fi',\n    'fj',\n    'fk',\n    'fm',\n    'fo',\n    'fr',\n    'ga',\n    'gb',\n    'gd',\n    'ge',\n    'gf',\n    'gg',\n    'gh',\n    'gi',\n    'gl',\n    'gm',\n    'gn',\n    'gp',\n    'gq',\n    'gr',\n    'gs',\n    'gt',\n    'gu',\n    'gw',\n    'gy',\n    'hk',\n    'hn',\n    'hr',\n    'hr',\n    'ht',\n    'id',\n    'ie',\n    'il',\n    'im',\n    'in',\n    'io',\n    'iq',\n    'ir',\n    'is',\n    'it',\n    'je',\n    'jm',\n    'jo',\n    'jp',\n    'ke',\n    'kg',\n    'kh',\n    'ki',\n    'km',\n    'kn',\n    'kp',\n    'kr',\n    'kw',\n    'ky',\n    'kz',\n    'la',\n    'lb',\n    'lc',\n    'li',\n    'lk',\n    'lr',\n    'ls',\n    'lt',\n    'lu',\n    'lv',\n    'ly',\n    'ma',\n    'mc',\n    'md',\n    'me',\n    'mf',\n    'mg',\n    'mh',\n    'mk',\n    'ml',\n    'mm',\n    'mn',\n    'mo',\n    'mp',\n    'mq',\n    'mr',\n    'ms',\n    'mt',\n    'mu',\n    'mv',\n    'mw',\n    'mx',\n    'my',\n    'mz',\n    'na',\n    'nc',\n    'ne',\n    'nf',\n    'ng',\n    'ni',\n    'nl',\n    'no',\n    'nr',\n    'nu',\n    'nz',\n    'om',\n    'pa',\n    'pe',\n    'pf',\n    'pg',\n    'ph',\n    'pk',\n    'pl',\n    'pm',\n    'pn',\n    'pr',\n    'ps',\n    'pt',\n    'pw',\n    'py',\n    'qa',\n    're',\n    'ro',\n    'rs',\n    'ru',\n    'rw',\n    'sa',\n    'sb',\n    'sc',\n    'sd',\n    'se',\n    'sg',\n    'sh',\n    'si',\n    'sj',\n    'sk',\n    'sl',\n    'sm',\n    'sn',\n    'so',\n    'sr',\n    'ss',\n    'st',\n    'sv',\n    'sx',\n    'sy',\n    'sz',\n    'tc',\n    'td',\n    'tf',\n    'tg',\n    'th',\n    'tj',\n    'tk',\n    'tl',\n    'tm',\n    'tn',\n    'to',\n    'tr',\n    'tt',\n    'tv',\n    'tw',\n    'tz',\n    'ua',\n    'ug',\n    'us',\n    'uy',\n    'uz',\n    'va',\n    'vc',\n    've',\n    'vg',\n    'vi',\n    'vn',\n    'vu',\n    'wf',\n    'ws',\n    'xk',\n    'ye',\n    'yt',\n    'za',\n    'zm',\n    'zw',\n];\n\nclass LanguagesComponent {\n    constructor(list, confirmationService, service, injector, configState, sessionService) {\n        this.list = list;\n        this.confirmationService = confirmationService;\n        this.service = service;\n        this.injector = injector;\n        this.configState = configState;\n        this.sessionService = sessionService;\n        this.data = { items: [], totalCount: 0 };\n        this.cultures$ = of([]);\n        this.isModalVisible = false;\n        this.modalBusy = false;\n        this.flagIcons = flagIcons;\n    }\n    get controls() {\n        return this.form.controls;\n    }\n    createForm() {\n        this.cultures$\n            .pipe(switchMap(cultures => (cultures.length ? of(cultures) : this.service.getCulturelist())))\n            .subscribe(res => {\n            this.cultures$ = of(res);\n            const data = new FormPropData(this.injector, this.selected);\n            this.form = generateFormFromProps(data);\n            this.controls.cultureName.patchValue(null);\n            this.controls.uiCultureName.patchValue(null);\n        });\n    }\n    hookToQuery() {\n        this.list.hookToQuery(query => this.service.getList(query)).subscribe(res => (this.data = res));\n    }\n    ngOnInit() {\n        this.hookToQuery();\n    }\n    openModal() {\n        this.createForm();\n        this.isModalVisible = true;\n    }\n    add() {\n        this.selected = {};\n        this.openModal();\n    }\n    edit(id) {\n        this.service.get(id).subscribe(res => {\n            this.selected = res;\n            this.openModal();\n        });\n    }\n    save() {\n        if (!this.form.valid)\n            return;\n        this.modalBusy = true;\n        const { id } = this.selected;\n        (id\n            ? this.service.update(id, { ...this.selected, ...this.form.value })\n            : this.service.create(this.form.value))\n            .pipe(finalize(() => (this.modalBusy = false)))\n            .subscribe(() => {\n            this.isModalVisible = false;\n            this.list.get();\n            if (!this.selected.id) {\n                this.configState.refreshAppState().subscribe();\n            }\n        });\n    }\n    delete(id, name, isDefaultLanguage = false) {\n        let warningMessageKey = 'LanguageManagement::LanguageDeletionConfirmationMessage';\n        if (isDefaultLanguage) {\n            warningMessageKey = 'LanguageManagement::DefaultLanguageDeletionConfirmationMessage';\n        }\n        this.confirmationService\n            .warn(warningMessageKey, 'LanguageManagement::AreYouSure', {\n            messageLocalizationParams: [name],\n        })\n            .subscribe((status) => {\n            if (status === Confirmation.Status.confirm) {\n                this.service.get(id).subscribe(lang => {\n                    this.service.delete(id).subscribe(() => {\n                        let defaultLanguage;\n                        this.service.getAllList().subscribe(list => {\n                            list.items.forEach(item => {\n                                if (item.isDefaultLanguage) {\n                                    defaultLanguage = item;\n                                }\n                            });\n                            if (lang.cultureName == this.sessionService.getLanguage()) {\n                                this.sessionService.setLanguage(defaultLanguage.cultureName);\n                            }\n                        });\n                        this.list.get();\n                    });\n                });\n            }\n        });\n    }\n    setAsDefault(id) {\n        this.service.setAsDefault(id).subscribe(() => this.list.get());\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguagesComponent, deps: [{ token: i1.ListService }, { token: i2.ConfirmationService }, { token: i2$1.LanguageService }, { token: i0.Injector }, { token: i1.ConfigStateService }, { token: i1.SessionStateService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: LanguagesComponent, selector: \"abp-languages\", providers: [\n            ListService,\n            {\n                provide: EXTENSIONS_IDENTIFIER,\n                useValue: \"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */,\n            },\n        ], ngImport: i0, template: \"  <abp-page [title]=\\\"'LanguageManagement::Languages' | abpLocalization\\\" [toolbar]=\\\"data\\\">\\r\\n    <div id=\\\"wrapper\\\">\\r\\n      <abp-advanced-entity-filters\\r\\n        localizationSourceName=\\\"LanguageManagement\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-advanced-entity-filters>\\r\\n\\r\\n      <div class=\\\"card\\\">\\r\\n        <abp-extensible-table\\r\\n          [data]=\\\"data.items\\\"\\r\\n          [recordsTotal]=\\\"data.totalCount\\\"\\r\\n          [list]=\\\"list\\\"\\r\\n        ></abp-extensible-table>\\r\\n      </div>\\r\\n    </div>\\r\\n  </abp-page>\\r\\n\\r\\n<ng-template #displayName let-data>{{ data.displayName }}</ng-template>\\r\\n<ng-template #defaultLanguage let-data\\r\\n  ><strong\\r\\n    >{{ data.displayName }} ({{ 'LanguageManagement::DefaultLanguage' | abpLocalization }})</strong\\r\\n  ></ng-template\\r\\n>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>\\r\\n      {{\\r\\n        (selected?.id ? 'LanguageManagement::Edit' : 'LanguageManagement::CreateNewLanguage')\\r\\n          | abpLocalization\\r\\n      }}\\r\\n    </h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\" id=\\\"languageForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n      <div class=\\\"mt-2\\\">\\r\\n        <abp-extensible-form [selectedRecord]=\\\"selected\\\"></abp-extensible-form>\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"languageForm\\\">{{\\r\\n      'AbpIdentity::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\", dependencies: [{ kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i4$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i1.FormSubmitDirective, selector: \"form[ngSubmit][formGroup]\", inputs: [\"debounce\", \"notValidateOnSubmit\", \"markAsDirtyWhenSubmit\"], outputs: [\"ngSubmit\"] }, { kind: \"component\", type: i6.ExtensibleFormComponent, selector: \"abp-extensible-form\", inputs: [\"selectedRecord\"], exportAs: [\"abpExtensibleForm\"] }, { kind: \"component\", type: i6.ExtensibleTableComponent, selector: \"abp-extensible-table\", inputs: [\"actionsText\", \"data\", \"list\", \"recordsTotal\", \"actionsColumnWidth\", \"actionsTemplate\"], outputs: [\"tableActivate\"], exportAs: [\"abpExtensibleTable\"] }, { kind: \"component\", type: i6$1.AdvancedEntityFiltersComponent, selector: \"abp-advanced-entity-filters\", inputs: [\"list\", \"localizationSourceName\", \"entityFilterPlaceholder\"] }, { kind: \"directive\", type: i8.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"component\", type: i2.ButtonComponent, selector: \"abp-button\", inputs: [\"buttonId\", \"buttonClass\", \"buttonType\", \"formName\", \"iconClass\", \"loading\", \"disabled\", \"attributes\"], outputs: [\"click\", \"focus\", \"blur\", \"abpClick\", \"abpFocus\", \"abpBlur\"] }, { kind: \"component\", type: i2.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i2.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"component\", type: i9.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"pipe\", type: i1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguagesComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-languages', providers: [\n                        ListService,\n                        {\n                            provide: EXTENSIONS_IDENTIFIER,\n                            useValue: \"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */,\n                        },\n                    ], template: \"  <abp-page [title]=\\\"'LanguageManagement::Languages' | abpLocalization\\\" [toolbar]=\\\"data\\\">\\r\\n    <div id=\\\"wrapper\\\">\\r\\n      <abp-advanced-entity-filters\\r\\n        localizationSourceName=\\\"LanguageManagement\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-advanced-entity-filters>\\r\\n\\r\\n      <div class=\\\"card\\\">\\r\\n        <abp-extensible-table\\r\\n          [data]=\\\"data.items\\\"\\r\\n          [recordsTotal]=\\\"data.totalCount\\\"\\r\\n          [list]=\\\"list\\\"\\r\\n        ></abp-extensible-table>\\r\\n      </div>\\r\\n    </div>\\r\\n  </abp-page>\\r\\n\\r\\n<ng-template #displayName let-data>{{ data.displayName }}</ng-template>\\r\\n<ng-template #defaultLanguage let-data\\r\\n  ><strong\\r\\n    >{{ data.displayName }} ({{ 'LanguageManagement::DefaultLanguage' | abpLocalization }})</strong\\r\\n  ></ng-template\\r\\n>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>\\r\\n      {{\\r\\n        (selected?.id ? 'LanguageManagement::Edit' : 'LanguageManagement::CreateNewLanguage')\\r\\n          | abpLocalization\\r\\n      }}\\r\\n    </h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form *ngIf=\\\"form\\\" [formGroup]=\\\"form\\\" id=\\\"languageForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n      <div class=\\\"mt-2\\\">\\r\\n        <abp-extensible-form [selectedRecord]=\\\"selected\\\"></abp-extensible-form>\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"languageForm\\\">{{\\r\\n      'AbpIdentity::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1.ListService }, { type: i2.ConfirmationService }, { type: i2$1.LanguageService }, { type: i0.Injector }, { type: i1.ConfigStateService }, { type: i1.SessionStateService }] });\n\nclass LanguageTextsComponent {\n    constructor(list, renderer, configState, service, languageService) {\n        this.list = list;\n        this.renderer = renderer;\n        this.configState = configState;\n        this.service = service;\n        this.languageService = languageService;\n        this.data = { items: [], totalCount: 0 };\n        this.pageQuery = {};\n        this.isModalVisible = false;\n        this.modalBusy = false;\n        this.resources = [];\n    }\n    ngOnInit() {\n        this.languages = this.configState.getDeep('localization.languages');\n        this.languageService.getResources().subscribe(resources => {\n            this.resources = resources;\n        });\n        this.pageQuery = {\n            baseCultureName: this.languages[0].cultureName,\n            targetCultureName: this.languages?.[1]?.cultureName || this.languages?.[0]?.cultureName,\n            getOnlyEmptyValues: false,\n            resourceName: null,\n        };\n        this.hookToQuery();\n        this.columns = [\n            { field: 'name', header: 'LanguageManagement::Key' },\n            { field: 'baseValue', header: 'LanguageManagement::BaseValue' },\n            { field: 'value', header: 'LanguageManagement::Value' },\n            { field: 'resourceName', header: 'LanguageManagement::ResourceName' },\n        ];\n    }\n    openModal() {\n        this.isModalVisible = true;\n    }\n    closeModal() {\n        this.isModalVisible = false;\n        this.selected = {};\n        this.selectedIndex = null;\n    }\n    hookToQuery() {\n        this.list\n            .hookToQuery(query => this.service.getList({ ...query, ...this.pageQuery }))\n            .subscribe(res => {\n            this.data = res;\n            if (this.isModalVisible) {\n                if (!res.items[this.selectedIndex]) {\n                    this.closeModal();\n                    return;\n                }\n                this.selected = { ...res.items[this.selectedIndex] } || {};\n            }\n        });\n    }\n    edit(data, index) {\n        this.selectedIndex = index % this.list.maxResultCount;\n        this.selected = { ...data };\n        this.openModal();\n    }\n    save(next) {\n        if (this.modalBusy)\n            return;\n        this.modalBusy = true;\n        const { resourceName, cultureName, name, value } = this.selected;\n        this.service\n            .update(resourceName, cultureName, name, value)\n            .pipe(finalize(() => {\n            setTimeout(() => {\n                this.modalBusy = false;\n            }, 200);\n            if (!next) {\n                this.closeModal();\n            }\n        }))\n            .subscribe(() => {\n            if (next) {\n                const { maxResultCount } = this.list;\n                if (this.selectedIndex + 1 === this.data.totalCount % maxResultCount &&\n                    this.list.page * 10 + maxResultCount >= this.data.totalCount) {\n                    this.closeModal();\n                    return;\n                }\n                if ((this.selectedIndex + 1) % maxResultCount === 0) {\n                    this.selectedIndex = 0;\n                    this.list.page = this.list.page + 1;\n                    this.renderer.removeClass(document.getElementById('LanguageTextToEdit_TargetCultureValue'), 'ng-dirty');\n                }\n                else {\n                    this.selectedIndex += 1;\n                    this.selected = { ...this.data.items[this.selectedIndex] } || {};\n                    this.renderer.removeClass(document.getElementById('LanguageTextToEdit_TargetCultureValue'), 'ng-dirty');\n                }\n            }\n            this.list.getWithoutPageReset();\n        });\n    }\n    restore() {\n        const { resourceName, cultureName, name } = this.selected;\n        this.service.restoreToDefault(resourceName, cultureName, name).subscribe(() => {\n            this.closeModal();\n            this.list.get();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageTextsComponent, deps: [{ token: i1.ListService }, { token: i0.Renderer2 }, { token: i1.ConfigStateService }, { token: i2$1.LanguageTextService }, { token: i2$1.LanguageService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: LanguageTextsComponent, selector: \"abp-language-texts\", providers: [\n            ListService,\n            {\n                provide: EXTENSIONS_IDENTIFIER,\n                useValue: \"LanguageManagement.LanguageTextsComponent\" /* eLanguageManagementComponents.LanguageTexts */,\n            },\n        ], ngImport: i0, template: \"<abp-page [title]=\\\"'LanguageManagement::LanguageTexts' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n    <abp-advanced-entity-filters localizationSourceName=\\\"LanguageManagement\\\" [list]=\\\"list\\\">\\r\\n      <abp-advanced-entity-filters-above-search>\\r\\n        <form id=\\\"FilterFormId\\\" (keyup.enter)=\\\"list.get()\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-12 col-md-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label for=\\\"BaseCultureName\\\" class=\\\"form-label\\\">{{\\r\\n                  'LanguageManagement::BaseCultureName' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  id=\\\"BaseCultureName\\\"\\r\\n                  name=\\\"BaseCultureName\\\"\\r\\n                  [(ngModel)]=\\\"pageQuery.baseCultureName\\\"\\r\\n                  (change)=\\\"list.get()\\\"\\r\\n                >\\r\\n                  <option *ngFor=\\\"let lang of languages\\\" [ngValue]=\\\"lang.cultureName\\\">\\r\\n                    {{ lang.displayName }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-md-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label for=\\\"TargetCultureName\\\" class=\\\"form-label\\\">{{\\r\\n                  'LanguageManagement::TargetCultureName' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  id=\\\"TargetCultureName\\\"\\r\\n                  name=\\\"TargetCultureName\\\"\\r\\n                  [(ngModel)]=\\\"pageQuery.targetCultureName\\\"\\r\\n                  (change)=\\\"list.get()\\\"\\r\\n                >\\r\\n                  <option *ngFor=\\\"let lang of languages\\\" [ngValue]=\\\"lang.cultureName\\\">\\r\\n                    {{ lang.displayName }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-md-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label for=\\\"ResourceName\\\" class=\\\"form-label\\\">{{\\r\\n                  'LanguageManagement::ResourceName' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  id=\\\"ResourceName\\\"\\r\\n                  name=\\\"ResourceName\\\"\\r\\n                  [(ngModel)]=\\\"pageQuery.resourceName\\\"\\r\\n                  (change)=\\\"list.get()\\\"\\r\\n                >\\r\\n                  <option [ngValue]=\\\"null\\\">-</option>\\r\\n                  <option *ngFor=\\\"let resource of resources\\\" [ngValue]=\\\"resource.name\\\">\\r\\n                    {{ resource.name }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-md-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label class=\\\"form-label\\\" for=\\\"GetOnlyEmptyValues\\\">{{\\r\\n                  'LanguageManagement::TargetValue' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  id=\\\"GetOnlyEmptyValues\\\"\\r\\n                  name=\\\"GetOnlyEmptyValues\\\"\\r\\n                  [(ngModel)]=\\\"pageQuery.getOnlyEmptyValues\\\"\\r\\n                  (change)=\\\"list.get()\\\"\\r\\n                >\\r\\n                  <option [ngValue]=\\\"false\\\">-</option>\\r\\n                  <option [ngValue]=\\\"true\\\">\\r\\n                    {{ 'LanguageManagement::OnlyEmptyValues' | abpLocalization }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </abp-advanced-entity-filters-above-search>\\r\\n    </abp-advanced-entity-filters>\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <ngx-datatable default [rows]=\\\"data.items\\\" [count]=\\\"data.totalCount\\\" [list]=\\\"list\\\">\\r\\n        <ngx-datatable-column\\r\\n          [name]=\\\"'LanguageManagement::Actions' | abpLocalization\\\"\\r\\n          [maxWidth]=\\\"150\\\"\\r\\n          [width]=\\\"150\\\"\\r\\n          [sortable]=\\\"false\\\"\\r\\n        >\\r\\n          <ng-template let-row=\\\"row\\\" let-i=\\\"rowIndex\\\" ngx-datatable-cell-template>\\r\\n            <abp-grid-actions\\r\\n              [index]=\\\"i\\\"\\r\\n              [record]=\\\"row\\\"\\r\\n              text=\\\"LanguageManagement::Actions\\\"\\r\\n            ></abp-grid-actions>\\r\\n          </ng-template>\\r\\n        </ngx-datatable-column>\\r\\n        <ngx-datatable-column\\r\\n          *ngFor=\\\"let col of columns\\\"\\r\\n          [name]=\\\"col.header | abpLocalization\\\"\\r\\n          [prop]=\\\"col.field\\\"\\r\\n          [width]=\\\"200\\\"\\r\\n        >\\r\\n          <ng-template let-row=\\\"row\\\" let-i=\\\"index\\\" ngx-datatable-cell-template>\\r\\n            <div abpEllipsis>\\r\\n              {{ row[col.field] }}\\r\\n            </div>\\r\\n          </ng-template>\\r\\n        </ngx-datatable-column>\\r\\n      </ngx-datatable>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\" [options]=\\\"{ size: 'lg' }\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ 'LanguageManagement::Edit' | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <div class=\\\"fade\\\" [class.show]=\\\"!modalBusy\\\">\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label class=\\\"form-label\\\">{{ 'LanguageManagement::Key' | abpLocalization }}</label>\\r\\n        <div>\\r\\n          <strong>{{ selected.name }}</strong>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label class=\\\"form-label\\\" for=\\\"LanguageTextToEdit_BaseCultureValue\\\">{{\\r\\n          'LanguageManagement::BaseValue' | abpLocalization\\r\\n        }}</label\\r\\n        ><textarea\\r\\n          id=\\\"LanguageTextToEdit_BaseCultureValue\\\"\\r\\n          name=\\\"LanguageTextToEdit.BaseCultureValue\\\"\\r\\n          rows=\\\"4\\\"\\r\\n          disabled\\r\\n          class=\\\"form-control\\\"\\r\\n          [value]=\\\"selected.baseValue\\\"\\r\\n        ></textarea>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label class=\\\"form-label\\\" for=\\\"LanguageTextToEdit_BaseCultureValue\\\">{{\\r\\n          'LanguageManagement::TargetValue' | abpLocalization\\r\\n        }}</label\\r\\n        ><textarea\\r\\n          id=\\\"LanguageTextToEdit_TargetCultureValue\\\"\\r\\n          name=\\\"LanguageTextToEdit.TargetCultureValue\\\"\\r\\n          rows=\\\"4\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          (keyup.enter)=\\\"save(false)\\\"\\r\\n          [(ngModel)]=\\\"selected.value\\\"\\r\\n        ></textarea>\\r\\n      </div>\\r\\n    </div>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-outline-primary\\\" abpClose>\\r\\n      {{ 'LanguageManagement::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button\\r\\n      iconClass=\\\"fa fa-check\\\"\\r\\n      buttonClass=\\\"btn btn-sm btn-outline-primary\\\"\\r\\n      (click)=\\\"restore()\\\"\\r\\n      >{{ 'LanguageManagement::RestoreToDefault' | abpLocalization }}</abp-button\\r\\n    >\\r\\n    <abp-button\\r\\n      iconClass=\\\"fa fa-check\\\"\\r\\n      buttonClass=\\\"btn btn-sm btn-primary\\\"\\r\\n      (click)=\\\"save(false)\\\"\\r\\n      [loading]=\\\"modalBusy\\\"\\r\\n      >{{ 'LanguageManagement::Save' | abpLocalization }}</abp-button\\r\\n    >\\r\\n    <abp-button\\r\\n      iconClass=\\\"fa fa-check\\\"\\r\\n      buttonClass=\\\"btn btn-sm btn-success\\\"\\r\\n      (click)=\\\"save(true)\\\"\\r\\n      [loading]=\\\"modalBusy\\\"\\r\\n      >{{ 'LanguageManagement::SaveAndNext' | abpLocalization }}\\r\\n      <i class=\\\"fa fa-arrow-right ms-1\\\" aria-hidden=\\\"true\\\"></i\\r\\n    ></abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\", dependencies: [{ kind: \"directive\", type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i4$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4$1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i4$1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { kind: \"directive\", type: i4$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4$1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: i4$1.NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: [\"ngFormOptions\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"component\", type: i6.GridActionsComponent, selector: \"abp-grid-actions\", inputs: [\"icon\", \"index\", \"text\"], exportAs: [\"abpGridActions\"] }, { kind: \"component\", type: i6$1.AdvancedEntityFiltersComponent, selector: \"abp-advanced-entity-filters\", inputs: [\"list\", \"localizationSourceName\", \"entityFilterPlaceholder\"] }, { kind: \"component\", type: i6$1.AdvancedEntityFiltersAboveSearchComponent, selector: \"abp-advanced-entity-filters-above-search\" }, { kind: \"component\", type: i7.DatatableComponent, selector: \"ngx-datatable\", inputs: [\"targetMarkerTemplate\", \"rows\", \"groupRowsBy\", \"groupedRows\", \"columns\", \"selected\", \"scrollbarV\", \"scrollbarH\", \"rowHeight\", \"columnMode\", \"headerHeight\", \"footerHeight\", \"externalPaging\", \"externalSorting\", \"limit\", \"count\", \"offset\", \"loadingIndicator\", \"selectionType\", \"reorderable\", \"swapColumns\", \"sortType\", \"sorts\", \"cssClasses\", \"messages\", \"rowClass\", \"selectCheck\", \"displayCheck\", \"groupExpansionDefault\", \"trackByProp\", \"selectAllRowsOnPage\", \"virtualization\", \"treeFromRelation\", \"treeToRelation\", \"summaryRow\", \"summaryHeight\", \"summaryPosition\", \"rowIdentity\"], outputs: [\"scroll\", \"activate\", \"select\", \"sort\", \"page\", \"reorder\", \"resize\", \"tableContextmenu\", \"treeAction\"] }, { kind: \"directive\", type: i7.DataTableColumnDirective, selector: \"ngx-datatable-column\", inputs: [\"name\", \"prop\", \"frozenLeft\", \"frozenRight\", \"flexGrow\", \"resizeable\", \"comparator\", \"pipe\", \"sortable\", \"draggable\", \"canAutoResize\", \"minWidth\", \"width\", \"maxWidth\", \"checkboxable\", \"headerCheckboxable\", \"headerClass\", \"cellClass\", \"isTreeColumn\", \"treeLevelIndent\", \"summaryFunc\", \"summaryTemplate\", \"cellTemplate\", \"headerTemplate\", \"treeToggleTemplate\"] }, { kind: \"directive\", type: i7.DataTableColumnCellDirective, selector: \"[ngx-datatable-cell-template]\" }, { kind: \"directive\", type: i2.NgxDatatableListDirective, selector: \"ngx-datatable[list]\", inputs: [\"list\"], exportAs: [\"ngxDatatableList\"] }, { kind: \"directive\", type: i2.NgxDatatableDefaultDirective, selector: \"ngx-datatable[default]\", inputs: [\"class\"], exportAs: [\"ngxDatatableDefault\"] }, { kind: \"component\", type: i2.ButtonComponent, selector: \"abp-button\", inputs: [\"buttonId\", \"buttonClass\", \"buttonType\", \"formName\", \"iconClass\", \"loading\", \"disabled\", \"attributes\"], outputs: [\"click\", \"focus\", \"blur\", \"abpClick\", \"abpFocus\", \"abpBlur\"] }, { kind: \"component\", type: i2.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i2.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"component\", type: i9.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"pipe\", type: i1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageTextsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-language-texts', providers: [\n                        ListService,\n                        {\n                            provide: EXTENSIONS_IDENTIFIER,\n                            useValue: \"LanguageManagement.LanguageTextsComponent\" /* eLanguageManagementComponents.LanguageTexts */,\n                        },\n                    ], template: \"<abp-page [title]=\\\"'LanguageManagement::LanguageTexts' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n    <abp-advanced-entity-filters localizationSourceName=\\\"LanguageManagement\\\" [list]=\\\"list\\\">\\r\\n      <abp-advanced-entity-filters-above-search>\\r\\n        <form id=\\\"FilterFormId\\\" (keyup.enter)=\\\"list.get()\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-12 col-md-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label for=\\\"BaseCultureName\\\" class=\\\"form-label\\\">{{\\r\\n                  'LanguageManagement::BaseCultureName' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  id=\\\"BaseCultureName\\\"\\r\\n                  name=\\\"BaseCultureName\\\"\\r\\n                  [(ngModel)]=\\\"pageQuery.baseCultureName\\\"\\r\\n                  (change)=\\\"list.get()\\\"\\r\\n                >\\r\\n                  <option *ngFor=\\\"let lang of languages\\\" [ngValue]=\\\"lang.cultureName\\\">\\r\\n                    {{ lang.displayName }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-md-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label for=\\\"TargetCultureName\\\" class=\\\"form-label\\\">{{\\r\\n                  'LanguageManagement::TargetCultureName' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  id=\\\"TargetCultureName\\\"\\r\\n                  name=\\\"TargetCultureName\\\"\\r\\n                  [(ngModel)]=\\\"pageQuery.targetCultureName\\\"\\r\\n                  (change)=\\\"list.get()\\\"\\r\\n                >\\r\\n                  <option *ngFor=\\\"let lang of languages\\\" [ngValue]=\\\"lang.cultureName\\\">\\r\\n                    {{ lang.displayName }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-md-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label for=\\\"ResourceName\\\" class=\\\"form-label\\\">{{\\r\\n                  'LanguageManagement::ResourceName' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  id=\\\"ResourceName\\\"\\r\\n                  name=\\\"ResourceName\\\"\\r\\n                  [(ngModel)]=\\\"pageQuery.resourceName\\\"\\r\\n                  (change)=\\\"list.get()\\\"\\r\\n                >\\r\\n                  <option [ngValue]=\\\"null\\\">-</option>\\r\\n                  <option *ngFor=\\\"let resource of resources\\\" [ngValue]=\\\"resource.name\\\">\\r\\n                    {{ resource.name }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-md-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label class=\\\"form-label\\\" for=\\\"GetOnlyEmptyValues\\\">{{\\r\\n                  'LanguageManagement::TargetValue' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  id=\\\"GetOnlyEmptyValues\\\"\\r\\n                  name=\\\"GetOnlyEmptyValues\\\"\\r\\n                  [(ngModel)]=\\\"pageQuery.getOnlyEmptyValues\\\"\\r\\n                  (change)=\\\"list.get()\\\"\\r\\n                >\\r\\n                  <option [ngValue]=\\\"false\\\">-</option>\\r\\n                  <option [ngValue]=\\\"true\\\">\\r\\n                    {{ 'LanguageManagement::OnlyEmptyValues' | abpLocalization }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </abp-advanced-entity-filters-above-search>\\r\\n    </abp-advanced-entity-filters>\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <ngx-datatable default [rows]=\\\"data.items\\\" [count]=\\\"data.totalCount\\\" [list]=\\\"list\\\">\\r\\n        <ngx-datatable-column\\r\\n          [name]=\\\"'LanguageManagement::Actions' | abpLocalization\\\"\\r\\n          [maxWidth]=\\\"150\\\"\\r\\n          [width]=\\\"150\\\"\\r\\n          [sortable]=\\\"false\\\"\\r\\n        >\\r\\n          <ng-template let-row=\\\"row\\\" let-i=\\\"rowIndex\\\" ngx-datatable-cell-template>\\r\\n            <abp-grid-actions\\r\\n              [index]=\\\"i\\\"\\r\\n              [record]=\\\"row\\\"\\r\\n              text=\\\"LanguageManagement::Actions\\\"\\r\\n            ></abp-grid-actions>\\r\\n          </ng-template>\\r\\n        </ngx-datatable-column>\\r\\n        <ngx-datatable-column\\r\\n          *ngFor=\\\"let col of columns\\\"\\r\\n          [name]=\\\"col.header | abpLocalization\\\"\\r\\n          [prop]=\\\"col.field\\\"\\r\\n          [width]=\\\"200\\\"\\r\\n        >\\r\\n          <ng-template let-row=\\\"row\\\" let-i=\\\"index\\\" ngx-datatable-cell-template>\\r\\n            <div abpEllipsis>\\r\\n              {{ row[col.field] }}\\r\\n            </div>\\r\\n          </ng-template>\\r\\n        </ngx-datatable-column>\\r\\n      </ngx-datatable>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\" [options]=\\\"{ size: 'lg' }\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ 'LanguageManagement::Edit' | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <div class=\\\"fade\\\" [class.show]=\\\"!modalBusy\\\">\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label class=\\\"form-label\\\">{{ 'LanguageManagement::Key' | abpLocalization }}</label>\\r\\n        <div>\\r\\n          <strong>{{ selected.name }}</strong>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label class=\\\"form-label\\\" for=\\\"LanguageTextToEdit_BaseCultureValue\\\">{{\\r\\n          'LanguageManagement::BaseValue' | abpLocalization\\r\\n        }}</label\\r\\n        ><textarea\\r\\n          id=\\\"LanguageTextToEdit_BaseCultureValue\\\"\\r\\n          name=\\\"LanguageTextToEdit.BaseCultureValue\\\"\\r\\n          rows=\\\"4\\\"\\r\\n          disabled\\r\\n          class=\\\"form-control\\\"\\r\\n          [value]=\\\"selected.baseValue\\\"\\r\\n        ></textarea>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label class=\\\"form-label\\\" for=\\\"LanguageTextToEdit_BaseCultureValue\\\">{{\\r\\n          'LanguageManagement::TargetValue' | abpLocalization\\r\\n        }}</label\\r\\n        ><textarea\\r\\n          id=\\\"LanguageTextToEdit_TargetCultureValue\\\"\\r\\n          name=\\\"LanguageTextToEdit.TargetCultureValue\\\"\\r\\n          rows=\\\"4\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          (keyup.enter)=\\\"save(false)\\\"\\r\\n          [(ngModel)]=\\\"selected.value\\\"\\r\\n        ></textarea>\\r\\n      </div>\\r\\n    </div>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-outline-primary\\\" abpClose>\\r\\n      {{ 'LanguageManagement::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button\\r\\n      iconClass=\\\"fa fa-check\\\"\\r\\n      buttonClass=\\\"btn btn-sm btn-outline-primary\\\"\\r\\n      (click)=\\\"restore()\\\"\\r\\n      >{{ 'LanguageManagement::RestoreToDefault' | abpLocalization }}</abp-button\\r\\n    >\\r\\n    <abp-button\\r\\n      iconClass=\\\"fa fa-check\\\"\\r\\n      buttonClass=\\\"btn btn-sm btn-primary\\\"\\r\\n      (click)=\\\"save(false)\\\"\\r\\n      [loading]=\\\"modalBusy\\\"\\r\\n      >{{ 'LanguageManagement::Save' | abpLocalization }}</abp-button\\r\\n    >\\r\\n    <abp-button\\r\\n      iconClass=\\\"fa fa-check\\\"\\r\\n      buttonClass=\\\"btn btn-sm btn-success\\\"\\r\\n      (click)=\\\"save(true)\\\"\\r\\n      [loading]=\\\"modalBusy\\\"\\r\\n      >{{ 'LanguageManagement::SaveAndNext' | abpLocalization }}\\r\\n      <i class=\\\"fa fa-arrow-right ms-1\\\" aria-hidden=\\\"true\\\"></i\\r\\n    ></abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1.ListService }, { type: i0.Renderer2 }, { type: i1.ConfigStateService }, { type: i2$1.LanguageTextService }, { type: i2$1.LanguageService }] });\n\nconst DEFAULT_LANGUAGE_TEXTS_ENTITY_ACTIONS = EntityAction.createMany([\n    {\n        text: 'LanguageManagement::Edit',\n        action: data => {\n            const component = data.getInjected(LanguageTextsComponent);\n            component.edit(data.record, data.index);\n        },\n        permission: 'LanguageManagement.LanguageTexts.Edit',\n    },\n]);\n\nconst DEFAULT_LANGUAGE_TEXTS_TOOLBAR_ACTIONS = ToolbarAction.createMany([]);\n\nconst DEFAULT_LANGUAGES_ENTITY_ACTIONS = EntityAction.createMany([\n    {\n        text: 'LanguageManagement::Edit',\n        action: data => {\n            const component = data.getInjected(LanguagesComponent);\n            component.edit(data.record.id);\n        },\n        permission: 'LanguageManagement.Languages.Edit',\n    },\n    {\n        text: 'LanguageManagement::Delete',\n        action: data => {\n            const component = data.getInjected(LanguagesComponent);\n            component.delete(data.record.id, data.record.displayName, data.record.isDefaultLanguage);\n        },\n        permission: 'LanguageManagement.Languages.Delete',\n    },\n    {\n        text: 'LanguageManagement::SetAsDefaultLanguage',\n        action: data => {\n            const component = data.getInjected(LanguagesComponent);\n            component.setAsDefault(data.record.id);\n        },\n        permission: 'LanguageManagement.Languages.ChangeDefault',\n    },\n]);\n\nconst DEFAULT_LANGUAGES_ENTITY_PROPS = EntityProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'displayName',\n        displayName: 'LanguageManagement::DisplayName',\n        columnWidth: 200,\n        valueResolver: data => {\n            const { displayName, isDefaultLanguage } = data.record;\n            if (!isDefaultLanguage)\n                return of(displayName);\n            const l10n = data.getInjected(LocalizationService);\n            const t = l10n.instant.bind(l10n);\n            return of(`<strong>${escapeHtmlChars(displayName)} (${t('LanguageManagement::DefaultLanguage')})</strong>`);\n        },\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'cultureName',\n        displayName: 'LanguageManagement::CultureName',\n        columnWidth: 200,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'uiCultureName',\n        displayName: 'LanguageManagement::UiCultureName',\n        columnWidth: 200,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        name: 'isEnabled',\n        displayName: 'LanguageManagement::IsEnabled',\n        columnWidth: 100,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'flagIcon',\n        displayName: 'LanguageManagement::FlagIcon',\n        columnWidth: 100,\n        valueResolver: data => {\n            const { displayName, flagIcon } = data.record;\n            return of(`<span class=\"fi fis fi-${flagIcon}\" title=\"${displayName}\"></span>`);\n        },\n    },\n]);\n\nfunction EMPTY_OPTION(data) {\n    const localizationService = data.getInjected(LocalizationService);\n    return {\n        value: null,\n        key: localizationService.instant('AbpUi::NotAssigned'),\n    };\n}\nconst DEFAULT_LANGUAGES_CREATE_FORM_PROPS = FormProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'cultureName',\n        displayName: 'LanguageManagement::CultureName',\n        id: 'culture-name',\n        validators: () => [Validators.required],\n        options: data => data.getInjected(LanguagesComponent).cultures$.pipe(map(cultures => {\n            return [\n                EMPTY_OPTION(data),\n                ...cultures.map(culture => ({\n                    key: culture.displayName,\n                    value: culture.name,\n                })),\n            ];\n        })),\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'uiCultureName',\n        displayName: 'LanguageManagement::UiCultureName',\n        id: 'ui-culture-name',\n        validators: () => [Validators.required],\n        options: data => data.getInjected(LanguagesComponent).cultures$.pipe(map(cultures => {\n            return [\n                EMPTY_OPTION(data),\n                ...cultures.map(culture => ({\n                    key: culture.displayName,\n                    value: culture.name,\n                })),\n            ];\n        })),\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'displayName',\n        displayName: 'LanguageManagement::DisplayName',\n        id: 'name',\n        validators: () => [Validators.required, Validators.maxLength(256)],\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'flagIcon',\n        displayName: 'LanguageManagement::FlagIcon',\n        id: 'flag-icon',\n        validators: () => [Validators.required],\n        options: data => of(data.getInjected(LanguagesComponent).flagIcons.map(flag => ({\n            key: flag,\n            value: flag,\n        }))),\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        name: 'isEnabled',\n        displayName: 'LanguageManagement::IsEnabled',\n        id: 'is-enabled',\n        defaultValue: false,\n    },\n]);\nconst DEFAULT_LANGUAGES_EDIT_FORM_PROPS = DEFAULT_LANGUAGES_CREATE_FORM_PROPS.slice(2);\n\nconst DEFAULT_LANGUAGES_TOOLBAR_ACTIONS = ToolbarAction.createMany([\n    {\n        text: 'LanguageManagement::CreateNewLanguage',\n        action: data => {\n            const component = data.getInjected(LanguagesComponent);\n            component.add();\n        },\n        permission: 'LanguageManagement.Languages.Create',\n        icon: 'fa fa-plus',\n    },\n]);\n\nconst DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_ACTIONS = {\n    [\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */]: DEFAULT_LANGUAGES_ENTITY_ACTIONS,\n    [\"LanguageManagement.LanguageTextsComponent\" /* eLanguageManagementComponents.LanguageTexts */]: DEFAULT_LANGUAGE_TEXTS_ENTITY_ACTIONS,\n};\nconst DEFAULT_LANGUAGE_MANAGEMENT_TOOLBAR_ACTIONS = {\n    [\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */]: DEFAULT_LANGUAGES_TOOLBAR_ACTIONS,\n    [\"LanguageManagement.LanguageTextsComponent\" /* eLanguageManagementComponents.LanguageTexts */]: DEFAULT_LANGUAGE_TEXTS_TOOLBAR_ACTIONS,\n};\nconst DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS = {\n    [\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */]: DEFAULT_LANGUAGES_ENTITY_PROPS,\n};\nconst DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS = {\n    [\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */]: DEFAULT_LANGUAGES_CREATE_FORM_PROPS,\n};\nconst DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS = {\n    [\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */]: DEFAULT_LANGUAGES_EDIT_FORM_PROPS,\n};\nconst LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS');\nconst LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS');\nconst LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS');\nconst LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS');\nconst LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS');\n\n/**\n * @deprecated Use `languageManagementExtensionsResolver` *function* instead.\n */\nclass LanguageManagementExtensionsGuard {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    canActivate() {\n        const isFlagIconEnabled = this.injector.get(ENABLE_FLAG_ICON);\n        const extensions = this.injector.get(ExtensionsService);\n        const actionContributors = this.injector.get(LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n        const toolbarContributors = this.injector.get(LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n        const propContributors = this.injector.get(LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};\n        const createFormContributors = this.injector.get(LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};\n        const editFormContributors = this.injector.get(LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};\n        if (!isFlagIconEnabled) {\n            this.filterFlagIcon(DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS);\n        }\n        const configState = this.injector.get(ConfigStateService);\n        return getObjectExtensionEntitiesFromStore(configState, 'LanguageManagement').pipe(map(entities => ({\n            [\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */]: entities.Language,\n        })), mapEntitiesToContributors(configState, 'LanguageManagement'), tap(objectExtensionContributors => {\n            mergeWithDefaultActions(extensions.entityActions, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_ACTIONS, actionContributors);\n            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_LANGUAGE_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);\n            mergeWithDefaultProps(extensions.entityProps, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);\n            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);\n        }), mapTo(true));\n    }\n    filterFlagIcon(...defaults) {\n        defaults.forEach(d => {\n            d[\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */] = d[\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */].filter(prop => prop.name !== 'flagIcon');\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementExtensionsGuard, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementExtensionsGuard }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementExtensionsGuard, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.Injector }] });\n\n/**\n * @deprecated Use `languageManagementGuard` *function* instead.\n */\nclass LanguageManagementGuard {\n    constructor(languageManagementFeatures) {\n        this.languageManagementFeatures = languageManagementFeatures;\n    }\n    canActivate() {\n        return this.languageManagementFeatures.pipe(map(features => features.enable));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementGuard, deps: [{ token: LANGUAGE_MANAGEMENT_FEATURES }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementGuard }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementGuard, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i1$1.Observable, decorators: [{\n                    type: Inject,\n                    args: [LANGUAGE_MANAGEMENT_FEATURES]\n                }] }] });\nconst languageManagementGuard = () => {\n    const languageManagementFeatures = inject(LANGUAGE_MANAGEMENT_FEATURES);\n    return languageManagementFeatures.pipe(map(features => features.enable));\n};\n\nconst languageManagementExtensionsResolver = () => {\n    const injector = inject(Injector);\n    const isFlagIconEnabled = injector.get(ENABLE_FLAG_ICON);\n    const extensions = injector.get(ExtensionsService);\n    const actionContributors = injector.get(LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n    const toolbarContributors = injector.get(LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n    const propContributors = injector.get(LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};\n    const createFormContributors = injector.get(LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};\n    const editFormContributors = injector.get(LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};\n    if (!isFlagIconEnabled) {\n        filterFlagIcon(DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS);\n    }\n    const configState = injector.get(ConfigStateService);\n    return getObjectExtensionEntitiesFromStore(configState, 'LanguageManagement').pipe(map(entities => ({\n        [\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */]: entities.Language,\n    })), mapEntitiesToContributors(configState, 'LanguageManagement'), tap(objectExtensionContributors => {\n        mergeWithDefaultActions(extensions.entityActions, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_ACTIONS, actionContributors);\n        mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_LANGUAGE_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);\n        mergeWithDefaultProps(extensions.entityProps, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n        mergeWithDefaultProps(extensions.createFormProps, DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);\n        mergeWithDefaultProps(extensions.editFormProps, DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);\n    }));\n    function filterFlagIcon(...defaults) {\n        defaults.forEach(d => {\n            d[\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */] = d[\"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */].filter(prop => prop.name !== 'flagIcon');\n        });\n    }\n};\n\nconst routes = [\n    { path: '', redirectTo: 'languages', pathMatch: 'full' },\n    {\n        path: '',\n        component: RouterOutletComponent,\n        canActivate: [\n            authGuard,\n            permissionGuard,\n            languageManagementGuard,\n        ],\n        resolve: [languageManagementExtensionsResolver],\n        children: [\n            {\n                path: 'languages',\n                component: ReplaceableRouteContainerComponent,\n                data: {\n                    requiredPolicy: 'LanguageManagement.Languages',\n                    replaceableComponent: {\n                        key: \"LanguageManagement.LanguagesComponent\" /* eLanguageManagementComponents.Languages */,\n                        defaultComponent: LanguagesComponent,\n                    },\n                },\n            },\n            {\n                path: 'texts',\n                component: ReplaceableRouteContainerComponent,\n                data: {\n                    requiredPolicy: 'LanguageManagement.LanguageTexts',\n                    replaceableComponent: {\n                        key: \"LanguageManagement.LanguageTextsComponent\" /* eLanguageManagementComponents.LanguageTexts */,\n                        defaultComponent: LanguageTextsComponent,\n                    },\n                },\n            },\n        ],\n    },\n];\nclass LanguageManagementRoutingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementRoutingModule, imports: [i1$2.RouterModule], exports: [RouterModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementRoutingModule, imports: [RouterModule.forChild(routes), RouterModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementRoutingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RouterModule.forChild(routes)],\n                    exports: [RouterModule],\n                }]\n        }] });\n\nclass LanguageManagementModule {\n    static forChild(options = {}) {\n        return {\n            ngModule: LanguageManagementModule,\n            providers: [\n                {\n                    provide: LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,\n                    useValue: options.entityActionContributors,\n                },\n                {\n                    provide: LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,\n                    useValue: options.toolbarActionContributors,\n                },\n                {\n                    provide: LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,\n                    useValue: options.entityPropContributors,\n                },\n                {\n                    provide: LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS,\n                    useValue: options.createFormPropContributors,\n                },\n                {\n                    provide: LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS,\n                    useValue: options.editFormPropContributors,\n                },\n            ],\n        };\n    }\n    static forLazy(options = {}) {\n        return new LazyModuleFactory(LanguageManagementModule.forChild(options));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementModule, declarations: [LanguagesComponent, LanguageTextsComponent], imports: [LanguageManagementRoutingModule,\n            CoreModule,\n            CommercialUiModule,\n            ThemeSharedModule,\n            NgbDropdownModule,\n            NgxValidateCoreModule,\n            PageModule,\n            AdvancedEntityFiltersModule], exports: [LanguagesComponent, LanguageTextsComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementModule, imports: [LanguageManagementRoutingModule,\n            CoreModule,\n            CommercialUiModule,\n            ThemeSharedModule,\n            NgbDropdownModule,\n            NgxValidateCoreModule,\n            PageModule,\n            AdvancedEntityFiltersModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LanguageManagementModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [LanguagesComponent, LanguageTextsComponent],\n                    exports: [LanguagesComponent, LanguageTextsComponent],\n                    imports: [\n                        LanguageManagementRoutingModule,\n                        CoreModule,\n                        CommercialUiModule,\n                        ThemeSharedModule,\n                        NgbDropdownModule,\n                        NgxValidateCoreModule,\n                        PageModule,\n                        AdvancedEntityFiltersModule,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_LANGUAGES_CREATE_FORM_PROPS, DEFAULT_LANGUAGES_EDIT_FORM_PROPS, DEFAULT_LANGUAGES_ENTITY_ACTIONS, DEFAULT_LANGUAGES_ENTITY_PROPS, DEFAULT_LANGUAGES_TOOLBAR_ACTIONS, DEFAULT_LANGUAGE_MANAGEMENT_CREATE_FORM_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_EDIT_FORM_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_ACTIONS, DEFAULT_LANGUAGE_MANAGEMENT_ENTITY_PROPS, DEFAULT_LANGUAGE_MANAGEMENT_TOOLBAR_ACTIONS, DEFAULT_LANGUAGE_TEXTS_ENTITY_ACTIONS, DEFAULT_LANGUAGE_TEXTS_TOOLBAR_ACTIONS, LANGUAGE_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, LANGUAGE_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, LANGUAGE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, LANGUAGE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, LANGUAGE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, LanguageManagementExtensionsGuard, LanguageManagementGuard, LanguageManagementModule, LanguageTextsComponent, LanguagesComponent, languageManagementExtensionsResolver, languageManagementGuard };\n"],"x_google_ignoreList":[0,1]}