{"version":3,"file":"86882.1a05788148b28ba4.js","mappings":"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","names":["ApplicationService","constructor","restService","this","apiName","create","input","config","request","method","url","body","delete","id","params","get","getList","filter","sorting","skipCount","maxResultCount","getTokenLifetime","setTokenLifetime","update","static","ɵfac","t","i0","i1","ɵprov","token","factory","providedIn","ScopeService","getAllScopes","TokenLifetimeModalComponent_ng_template_1_Template","rf","ctx","TokenLifetimeModalComponent_ng_template_3_Template","_r7","ctx_r6","save","ctx_r2","form","TokenLifetimeModalComponent_ng_template_5_Template","ctx_r4","loading","ApplicationFormModalComponent_abp_modal_0_ng_template_1_Template","ctx_r1","selected","ApplicationFormModalComponent_abp_modal_0_ng_template_3_Template","_r8","ctx_r7","ctx_r3","ApplicationFormModalComponent_abp_modal_0_ng_template_5_Template","ApplicationFormModalComponent_abp_modal_0_Template","_r10","$event","ctx_r9","visibleChange","ctx_r0","options","ApplicationsComponent_Conditional_7_Template","ApplicationsComponent_abp_permission_management_8_Template","_r3","visiblePermissions","providerKey","_c0","value","_c1","a0","_c2","twoWay","_c3","a1","a2","providerName","visible","_c4","_c6","inputs","outputs","componentKey","ScopeFormModalComponent_ng_template_2_Template","ScopeFormModalComponent_ng_template_4_Template","blueprints","ScopeFormModalComponent_ng_template_6_Template","ApplicationsService","state","InternalStore","isModalVisible","#isModalVisible","signal","computed","#isTokenLifetimeModalVisible","isTokenLifetimeModalVisible","openModal","setModalState","set","setTokenLifetimeModalState","ScopesService","isModalVisible$","sliceState","x","patch","TokenLifetimeModalComponent","#service","inject","#proxyService","saved","EventEmitter","#fb","FormBuilder","group","accessTokenLifetime","authorizationCodeLifetime","deviceCodeLifetime","identityTokenLifetime","refreshTokenLifetime","userCodeLifetime","invalid","pipe","finalize","emit","subscribe","ngOnInit","patchValue","ɵcmp","type","selectors","standalone","features","decls","vars","consts","template","dependencies","CommonModule","ThemeSharedModule","i2","CoreModule","i3","i3$1","encapsulation","defaultApplicationsTypeList","key","defaultApplicationTypes","public","confidential","defaultApplicationTypesList","separatorRegex","separator","hashSetParser","stringOrArray","Array","isArray","join","split","DefaultApplicationsConsentType","ApplicationFormModalComponent","service","applicationsService","localizationService","subscription","injector","types$","of","consentTypes$","size","ngOnChanges","createForm","hideFlowToType","isEditMode","sub","parseTextAreaValue","formValue","redirectUris","postLogoutRedirectUris","extensionGrantTypes","getFormValue","clientType","data","FormPropData","generateFormFromProps","formType","controls","removeOne","formValueChanges$","addOne","valueChanges","allowDeviceEndpoint","allowClientCredentialsFlow","changeTextToType","displayName","instant","i2$1","i4","i5","ApplicationsComponent","list","ListService","confirmationService","ConfirmationService","proxyService","items","totalCount","onVisiblePermissionChange","onSaved","edit","res","name","warn","messageLocalizationParams","status","Confirmation","Status","confirm","switchMap","hookToQuery","onAdd","openPermissionsModal","setTimeout","query","openTokenLifetimeModal","record","provide","EXTENSIONS_IDENTIFIER","useValue","i3$2","i4$1","i5$1","ScopeFormModalComponent","scopesService","pattern","changes","resources","ScopesComponent","onEdit","onDelete","DEFAULT_APPLICATIONS_ENTITY_ACTIONS","EntityAction","createMany","text","action","getInjected","permission","SHOW_ENTITY_HISTORY","clientId","DEFAULT_APPLICATIONS_ENTITY_PROPS","EntityProp","columnWidth","DEFAULT_APPLICATIONS_TOOLBAR_ACTIONS","ToolbarAction","icon","defaultUriPattern","NewLineRegex","UrisValidator","control","isEmptyInputValue","length","rows","item","trim","every","test","toString","actualValue","allowFlow","allowImplicitFlow","allowAuthorizationCodeFlow","allowHybridFlow","groupLeft","className","groupRight","DEFAULT_APPLICATIONS_CREATE_FORM_PROPS","FormProp","validators","Validators","required","LocalizationService","map","val","defaultValue","displayTextResolver","disabled","allowPasswordFlow","result","scope","allowLogoutEndpoint","DEFAULT_APPLICATIONS_FORM_PROPS","concat","DEFAULT_SCOPES_ENTITY_PROPS","DEFAULT_SCOPES_TOOLBAR_ACTIONS","DEFAULT_SCOPE_CREATE_FORM_PROPS","DEFAULT_SCOPES_FORM_PROPS","DEFAULT_SCOPE_ENTITY_ACTIONS","DEFAULT_OPENIDDICT_PRO_ENTITY_ACTIONS","DEFAULT_OPENIDDICT_PRO_TOOLBAR_ACTIONS","DEFAULT_OPENIDDICT_PRO_ENTITY_PROPS","DEFAULT_OPENIDDICT_PRO_CREATE_FORM_PROPS","DEFAULT_OPENIDDICT_PRO_EDIT_FORM_PROPS","OPENIDDICT_PRO_ENTITY_ACTION_CONTRIBUTORS","InjectionToken","OPENIDDICT_PRO_TOOLBAR_ACTION_CONTRIBUTORS","OPENIDDICT_PRO_ENTITY_PROP_CONTRIBUTORS","OPENIDDICT_PRO_CREATE_FORM_PROP_CONTRIBUTORS","OPENIDDICT_PRO_EDIT_FORM_PROP_CONTRIBUTORS","routes","path","redirectTo","pathMatch","component","RouterOutletComponent","canActivate","authGuard","permissionGuard","resolve","openIddictProExtensionsResolver","Injector","extensions","ExtensionsService","actionContributors","toolbarContributors","propContributors","createFormContributors","editFormContributors","configState","ConfigStateService","getObjectExtensionEntitiesFromStore","map$1","entities","ApiResource","Scopes","mapEntitiesToContributors","tap","objectExtensionContributors","mergeWithDefaultActions","entityActions","toolbarActions","mergeWithDefaultProps","entityProps","prop","createFormProps","editFormProps","editForm","children","ReplaceableRouteContainerComponent","requiredPolicy","replaceableComponent","defaultComponent","OpeniddictproRoutingModule","ɵmod","ɵinj","imports","RouterModule","forChild","OpeniddictproModule","ngModule","providers","entityActionContributors","toolbarActionContributors","entityPropContributors","createFormPropContributors","editFormPropContributors","forLazy","LazyModuleFactory","CommercialUiModule","NgbDropdownModule","NgxValidateCoreModule","PageModule","AdvancedEntityFiltersModule","PermissionManagementModule","ExtensibleFormComponent","ExtensibleTableComponent","OpenIddictProExtensionsGuard","tap$1","mapTo"],"sourceRoot":"webpack:///","sources":["./node_modules/@volo/abp.ng.openiddictpro/fesm2022/volo-abp.ng.openiddictpro-proxy.mjs","./node_modules/@volo/abp.ng.openiddictpro/fesm2022/volo-abp.ng.openiddictpro.mjs"],"sourcesContent":["import * as i1 from '@abp/ng.core';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nvar index$3 = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Dtos: index$3\n});\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Dtos: index$1\n});\n\nclass ApplicationService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'OpenIddictPro';\n        this.create = (input, config) => this.restService.request({\n            method: 'POST',\n            url: '/api/openiddict/applications',\n            body: input,\n        }, { apiName: this.apiName, ...config });\n        this.delete = (id, config) => this.restService.request({\n            method: 'DELETE',\n            url: '/api/openiddict/applications',\n            params: { id },\n        }, { apiName: this.apiName, ...config });\n        this.get = (id, config) => this.restService.request({\n            method: 'GET',\n            url: `/api/openiddict/applications/${id}`,\n        }, { apiName: this.apiName, ...config });\n        this.getList = (input, config) => this.restService.request({\n            method: 'GET',\n            url: '/api/openiddict/applications',\n            params: {\n                filter: input.filter,\n                sorting: input.sorting,\n                skipCount: input.skipCount,\n                maxResultCount: input.maxResultCount,\n            },\n        }, { apiName: this.apiName, ...config });\n        this.getTokenLifetime = (id, config) => this.restService.request({\n            method: 'GET',\n            url: `/api/openiddict/applications/${id}/token-lifetime`,\n        }, { apiName: this.apiName, ...config });\n        this.setTokenLifetime = (id, input, config) => this.restService.request({\n            method: 'PUT',\n            url: `/api/openiddict/applications/${id}/token-lifetime`,\n            body: input,\n        }, { apiName: this.apiName, ...config });\n        this.update = (id, input, config) => this.restService.request({\n            method: 'PUT',\n            url: `/api/openiddict/applications/${id}`,\n            body: input,\n        }, { apiName: this.apiName, ...config });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ApplicationService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ApplicationService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ApplicationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\nclass ScopeService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'OpenIddictPro';\n        this.create = (input, config) => this.restService.request({\n            method: 'POST',\n            url: '/api/openiddict/scopes',\n            body: input,\n        }, { apiName: this.apiName, ...config });\n        this.delete = (id, config) => this.restService.request({\n            method: 'DELETE',\n            url: '/api/openiddict/scopes',\n            params: { id },\n        }, { apiName: this.apiName, ...config });\n        this.get = (id, config) => this.restService.request({\n            method: 'GET',\n            url: `/api/openiddict/scopes/${id}`,\n        }, { apiName: this.apiName, ...config });\n        this.getAllScopes = (config) => this.restService.request({\n            method: 'GET',\n            url: '/api/openiddict/scopes/all',\n        }, { apiName: this.apiName, ...config });\n        this.getList = (input, config) => this.restService.request({\n            method: 'GET',\n            url: '/api/openiddict/scopes',\n            params: {\n                filter: input.filter,\n                sorting: input.sorting,\n                skipCount: input.skipCount,\n                maxResultCount: input.maxResultCount,\n            },\n        }, { apiName: this.apiName, ...config });\n        this.update = (id, input, config) => this.restService.request({\n            method: 'PUT',\n            url: `/api/openiddict/scopes/${id}`,\n            body: input,\n        }, { apiName: this.apiName, ...config });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ScopeService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ScopeService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ScopeService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ApplicationService, index$2 as Applications, ScopeService, index as Scopes };\n","import * as i0 from '@angular/core';\nimport { signal, computed, inject, EventEmitter, Component, Input, Output, InjectionToken, Injector, NgModule, Injectable } from '@angular/core';\nimport * as i3$1 from '@abp/ng.core';\nimport { InternalStore, CoreModule, ListService, LocalizationService, ConfigStateService, RouterOutletComponent, authGuard, permissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory } from '@abp/ng.core';\nimport * as i1$1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i2 from '@abp/ng.theme.shared';\nimport { ThemeSharedModule, ConfirmationService, Confirmation } from '@abp/ng.theme.shared';\nimport * as i5 from '@abp/ng.components/extensible';\nimport { ExtensibleFormComponent, FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, ToolbarAction, FormProp, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, ExtensibleTableComponent } from '@abp/ng.components/extensible';\nimport * as i2$1 from '@volo/abp.ng.openiddictpro/proxy';\nimport { ApplicationService, ScopeService } from '@volo/abp.ng.openiddictpro/proxy';\nimport { finalize, of, filter, switchMap, map as map$1, tap } from 'rxjs';\nimport * as i3$2 from '@volo/abp.commercial.ng.ui';\nimport { SHOW_ENTITY_HISTORY, CommercialUiModule, AdvancedEntityFiltersModule } from '@volo/abp.commercial.ng.ui';\nimport * as i4$1 from '@abp/ng.components/page';\nimport { PageModule } from '@abp/ng.components/page';\nimport * as i5$1 from '@abp/ng.permission-management';\nimport { PermissionManagementModule } from '@abp/ng.permission-management';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from '@angular/forms';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport * as i1 from '@ngx-validate/core';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\nimport { map, tap as tap$1, mapTo } from 'rxjs/operators';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\n\nclass ApplicationsService {\n    constructor() {\n        this.state = new InternalStore({\n            isModalVisible: false,\n        });\n        this.#isModalVisible = signal(false);\n        this.isModalVisible = computed(() => this.#isModalVisible());\n        this.#isTokenLifetimeModalVisible = signal(false);\n        this.isTokenLifetimeModalVisible = computed(() => this.#isTokenLifetimeModalVisible());\n    }\n    #isModalVisible;\n    #isTokenLifetimeModalVisible;\n    openModal() {\n        this.setModalState(true);\n    }\n    setModalState(value) {\n        this.#isModalVisible.set(value);\n    }\n    setTokenLifetimeModalState(value) {\n        this.#isTokenLifetimeModalVisible.set(value);\n    }\n}\n\nclass ScopesService {\n    constructor() {\n        this.state = new InternalStore({ isModalVisible: false });\n        this.isModalVisible$ = this.state.sliceState(x => x.isModalVisible);\n    }\n    openModal() {\n        this.setModalState(true);\n    }\n    setModalState(value) {\n        this.state.patch({ isModalVisible: value });\n    }\n}\n\nclass TokenLifetimeModalComponent {\n    constructor() {\n        this.#service = inject(ApplicationsService);\n        this.#proxyService = inject(ApplicationService);\n        this.saved = new EventEmitter();\n        this.loading = signal(false);\n        this.#fb = inject(FormBuilder);\n        this.form = this.#fb.group({\n            accessTokenLifetime: [null],\n            authorizationCodeLifetime: [null],\n            deviceCodeLifetime: [null],\n            identityTokenLifetime: [null],\n            refreshTokenLifetime: [null],\n            userCodeLifetime: [null],\n        });\n    }\n    #service;\n    #proxyService;\n    #fb;\n    save() {\n        if (this.form.invalid) {\n            return;\n        }\n        const id = this.selected.id;\n        this.#proxyService\n            .setTokenLifetime(id, this.form.value)\n            .pipe(finalize(() => {\n            this.#service.setTokenLifetimeModalState(false);\n            this.saved.emit();\n        }))\n            .subscribe();\n    }\n    visibleChange($event) {\n        if ($event) {\n            return;\n        }\n        this.#service.setTokenLifetimeModalState(false);\n    }\n    ngOnInit() {\n        this.#proxyService.getTokenLifetime(this.selected.id).subscribe(x => {\n            this.form.patchValue(x);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TokenLifetimeModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: TokenLifetimeModalComponent, isStandalone: true, selector: \"abp-token-lifetime-modal\", inputs: { selected: \"selected\" }, outputs: { saved: \"saved\" }, ngImport: i0, template: \"<abp-modal [visible]=\\\"true\\\" (visibleChange)=\\\"visibleChange($event) \\\">\\r\\n\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ 'AbpOpenIddict::TokenLifetime' | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n\\r\\n    <blockquote class=\\\"blockquote\\\">\\r\\n      <p class=\\\"mb-0\\\">{{ \\\"AbpOpenIddict::TokenLifetimeHit\\\" | abpLocalization }}</p>\\r\\n    </blockquote>\\r\\n\\r\\n    <form [formGroup]=\\\"form\\\" id=\\\"applicationForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"accessTokenLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::AccessTokenLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"accessTokenLifetime\\\" class=\\\"form-control\\\" formControlName=\\\"accessTokenLifetime\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"authorizationCodeLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::AuthorizationCodeLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"authorizationCodeLifetime\\\" class=\\\"form-control\\\"\\r\\n               formControlName=\\\"authorizationCodeLifetime\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"deviceCodeLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::DeviceCodeLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"deviceCodeLifetime\\\" class=\\\"form-control\\\" formControlName=\\\"deviceCodeLifetime\\\" />\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"identityTokenLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::IdentityTokenLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"identityTokenLifetime\\\" class=\\\"form-control\\\" formControlName=\\\"identityTokenLifetime\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"refreshTokenLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::RefreshTokenLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"refreshTokenLifetime\\\" class=\\\"form-control\\\" formControlName=\\\"refreshTokenLifetime\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"userCodeLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::UserCodeLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"userCodeLifetime\\\" class=\\\"form-control\\\"\\r\\n               formControlName=\\\"userCodeLifetime\\\" />\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'AbpOpenIddict::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\"\\r\\n                [disabled]=\\\"loading()\\\"\\r\\n                formName=\\\"applicationForm\\\">{{\\r\\n        'AbpOpenIddict::Save' | abpLocalization\\r\\n      }}\\r\\n    </abp-button>\\r\\n  </ng-template>\\r\\n\\r\\n</abp-modal>\\r\\n\", dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"ngmodule\", type: ThemeSharedModule }, { kind: \"directive\", type: i1.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"directive\", type: i1.ValidationDirective, selector: \"[formControl],[formControlName]\", exportAs: [\"validationDirective\"] }, { kind: \"component\", type: i2.ButtonComponent, selector: \"abp-button\", inputs: [\"buttonId\", \"buttonClass\", \"buttonType\", \"formName\", \"iconClass\", \"loading\", \"disabled\", \"attributes\"], outputs: [\"click\", \"focus\", \"blur\", \"abpClick\", \"abpFocus\", \"abpBlur\"] }, { kind: \"component\", type: i2.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i2.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"ngmodule\", type: CoreModule }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NumberValueAccessor, selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i3.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"pipe\", type: i3$1.LocalizationPipe, name: \"abpLocalization\" }, { kind: \"directive\", type: i3$1.FormSubmitDirective, selector: \"form[ngSubmit][formGroup]\", inputs: [\"debounce\", \"notValidateOnSubmit\", \"markAsDirtyWhenSubmit\"], outputs: [\"ngSubmit\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TokenLifetimeModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-token-lifetime-modal', standalone: true, imports: [CommonModule, ThemeSharedModule, CoreModule, ExtensibleFormComponent], template: \"<abp-modal [visible]=\\\"true\\\" (visibleChange)=\\\"visibleChange($event) \\\">\\r\\n\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ 'AbpOpenIddict::TokenLifetime' | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n\\r\\n    <blockquote class=\\\"blockquote\\\">\\r\\n      <p class=\\\"mb-0\\\">{{ \\\"AbpOpenIddict::TokenLifetimeHit\\\" | abpLocalization }}</p>\\r\\n    </blockquote>\\r\\n\\r\\n    <form [formGroup]=\\\"form\\\" id=\\\"applicationForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"accessTokenLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::AccessTokenLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"accessTokenLifetime\\\" class=\\\"form-control\\\" formControlName=\\\"accessTokenLifetime\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"authorizationCodeLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::AuthorizationCodeLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"authorizationCodeLifetime\\\" class=\\\"form-control\\\"\\r\\n               formControlName=\\\"authorizationCodeLifetime\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"deviceCodeLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::DeviceCodeLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"deviceCodeLifetime\\\" class=\\\"form-control\\\" formControlName=\\\"deviceCodeLifetime\\\" />\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"identityTokenLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::IdentityTokenLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"identityTokenLifetime\\\" class=\\\"form-control\\\" formControlName=\\\"identityTokenLifetime\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group mb-3\\\">\\r\\n        <label for=\\\"refreshTokenLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::RefreshTokenLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"refreshTokenLifetime\\\" class=\\\"form-control\\\" formControlName=\\\"refreshTokenLifetime\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"userCodeLifetime\\\"\\r\\n               class=\\\"form-label\\\"> {{ \\\"AbpOpenIddict::UserCodeLifetime\\\" | abpLocalization }} </label>\\r\\n        <input type=\\\"number\\\" id=\\\"userCodeLifetime\\\" class=\\\"form-control\\\"\\r\\n               formControlName=\\\"userCodeLifetime\\\" />\\r\\n      </div>\\r\\n    </form>\\r\\n\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'AbpOpenIddict::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\"\\r\\n                [disabled]=\\\"loading()\\\"\\r\\n                formName=\\\"applicationForm\\\">{{\\r\\n        'AbpOpenIddict::Save' | abpLocalization\\r\\n      }}\\r\\n    </abp-button>\\r\\n  </ng-template>\\r\\n\\r\\n</abp-modal>\\r\\n\" }]\n        }], propDecorators: { selected: [{\n                type: Input\n            }], saved: [{\n                type: Output\n            }] } });\n\nconst defaultApplicationsTypeList = [\n    {\n        key: 'Confidential client',\n        value: 'confidential',\n    },\n    {\n        key: 'Public client',\n        value: 'public',\n    },\n];\nconst defaultApplicationTypes = {\n    public: 'public',\n    confidential: 'confidential',\n};\nconst defaultApplicationTypesList = [\n    {\n        key: 'Web',\n        value: 'web',\n    },\n    {\n        key: 'Native',\n        value: 'native',\n    },\n];\n\nconst separatorRegex = /\\r?\\n/;\nconst separator = '\\n';\nfunction hashSetParser(stringOrArray) {\n    if (Array.isArray(stringOrArray)) {\n        return stringOrArray.join(separator);\n    }\n    if (typeof stringOrArray === 'string') {\n        if (!stringOrArray) {\n            return null;\n        }\n        return stringOrArray.split(separatorRegex);\n    }\n    return stringOrArray;\n}\n\nconst DefaultApplicationsConsentType = [\n    {\n        key: 'Explicit consent',\n        value: 'explicit',\n    },\n    {\n        key: 'External consent',\n        value: 'external',\n    },\n    {\n        key: 'Implicit consent',\n        value: 'implicit',\n    },\n    {\n        key: 'Systematic consent',\n        value: 'systematic',\n    },\n];\n\nclass ApplicationFormModalComponent {\n    constructor(service, applicationsService, localizationService, subscription, injector) {\n        this.service = service;\n        this.applicationsService = applicationsService;\n        this.localizationService = localizationService;\n        this.subscription = subscription;\n        this.injector = injector;\n        this.saved = new EventEmitter();\n        this.types$ = of(defaultApplicationsTypeList);\n        this.consentTypes$ = of(DefaultApplicationsConsentType);\n        this.options = { size: 'lg' };\n        this.isModalVisible = this.applicationsService.isModalVisible;\n    }\n    ngOnChanges() {\n        this.createForm();\n        this.hideFlowToType();\n    }\n    visibleChange($event) {\n        this.applicationsService.setModalState($event);\n    }\n    save() {\n        if (this.form.invalid) {\n            return;\n        }\n        const id = this.selected?.id;\n        const isEditMode = !!id;\n        let sub;\n        const parseTextAreaValue = value => {\n            return Array.isArray(value) ? value : hashSetParser(value);\n        };\n        const formValue = {\n            ...this.form.value,\n            redirectUris: parseTextAreaValue(this.form.value.redirectUris),\n            postLogoutRedirectUris: parseTextAreaValue(this.form.value.postLogoutRedirectUris),\n            extensionGrantTypes: parseTextAreaValue(this.form.value.extensionGrantTypes),\n        };\n        if (isEditMode) {\n            sub = this.service.update(id, formValue);\n        }\n        else {\n            sub = this.service.create(formValue);\n        }\n        sub.subscribe(() => {\n            this.applicationsService.setModalState(false);\n            this.saved.emit();\n        });\n    }\n    getFormValue() {\n        return this.form?.value || {};\n    }\n    createForm() {\n        const selected = this.selected?.id\n            ? {\n                ...this.selected,\n                redirectUris: hashSetParser(this.selected.redirectUris),\n                postLogoutRedirectUris: hashSetParser(this.selected.postLogoutRedirectUris),\n                extensionGrantTypes: hashSetParser(this.selected.extensionGrantTypes),\n            }\n            : { clientType: null };\n        const data = new FormPropData(this.injector, selected);\n        this.form = generateFormFromProps(data);\n    }\n    hideFlowToType() {\n        const formType = this.form.controls['clientType'];\n        this.subscription.removeOne(this.formValueChanges$);\n        this.formValueChanges$ = this.subscription.addOne(formType.valueChanges, value => {\n            if (value == defaultApplicationTypes.public) {\n                this.form.patchValue({\n                    allowDeviceEndpoint: false,\n                    allowClientCredentialsFlow: false,\n                });\n            }\n        });\n    }\n    changeTextToType(displayName) {\n        const form = this.getFormValue();\n        if (form.clientType === defaultApplicationTypes.public) {\n            return (this.localizationService.instant(displayName) +\n                ' (' +\n                this.localizationService.instant('AbpOpenIddict::NotAvailableForThisType') +\n                ')');\n        }\n        else {\n            return this.localizationService.instant(displayName);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ApplicationFormModalComponent, deps: [{ token: i2$1.ApplicationService }, { token: ApplicationsService }, { token: i3$1.LocalizationService }, { token: i3$1.SubscriptionService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: ApplicationFormModalComponent, selector: \"abp-application-form-modal\", inputs: { selected: \"selected\" }, outputs: { saved: \"saved\" }, usesOnChanges: true, ngImport: i0, template: \"\\r\\n<abp-modal *ngIf=\\\"isModalVisible()\\\" [visible]=\\\"true\\\" (visibleChange)=\\\"visibleChange($event) \\\" [options]=\\\"options\\\" >\\r\\n\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ (selected?.id  ? 'AbpOpenIddict::Edit' : 'AbpOpenIddict::NewApplication') | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form [formGroup]=\\\"form\\\" id=\\\"applicationForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n     <div class=\\\"row\\\">\\r\\n       <abp-extensible-form class=\\\"row gap-x2\\\" [selectedRecord]=\\\"selected\\\">\\r\\n       </abp-extensible-form>\\r\\n     </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'AbpOpenIddict::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"applicationForm\\\">{{\\r\\n      'AbpOpenIddict::Save' | abpLocalization\\r\\n      }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\", dependencies: [{ kind: \"directive\", type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i3$1.FormSubmitDirective, selector: \"form[ngSubmit][formGroup]\", inputs: [\"debounce\", \"notValidateOnSubmit\", \"markAsDirtyWhenSubmit\"], outputs: [\"ngSubmit\"] }, { kind: \"component\", type: i5.ExtensibleFormComponent, selector: \"abp-extensible-form\", inputs: [\"selectedRecord\"], exportAs: [\"abpExtensibleForm\"] }, { kind: \"directive\", type: i1.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"component\", type: i2.ButtonComponent, selector: \"abp-button\", inputs: [\"buttonId\", \"buttonClass\", \"buttonType\", \"formName\", \"iconClass\", \"loading\", \"disabled\", \"attributes\"], outputs: [\"click\", \"focus\", \"blur\", \"abpClick\", \"abpFocus\", \"abpBlur\"] }, { kind: \"component\", type: i2.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i2.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"pipe\", type: i3$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ApplicationFormModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-application-form-modal', template: \"\\r\\n<abp-modal *ngIf=\\\"isModalVisible()\\\" [visible]=\\\"true\\\" (visibleChange)=\\\"visibleChange($event) \\\" [options]=\\\"options\\\" >\\r\\n\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ (selected?.id  ? 'AbpOpenIddict::Edit' : 'AbpOpenIddict::NewApplication') | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form [formGroup]=\\\"form\\\" id=\\\"applicationForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n     <div class=\\\"row\\\">\\r\\n       <abp-extensible-form class=\\\"row gap-x2\\\" [selectedRecord]=\\\"selected\\\">\\r\\n       </abp-extensible-form>\\r\\n     </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'AbpOpenIddict::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"applicationForm\\\">{{\\r\\n      'AbpOpenIddict::Save' | abpLocalization\\r\\n      }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i2$1.ApplicationService }, { type: ApplicationsService }, { type: i3$1.LocalizationService }, { type: i3$1.SubscriptionService }, { type: i0.Injector }], propDecorators: { saved: [{\n                type: Output\n            }], selected: [{\n                type: Input\n            }] } });\n\nclass ApplicationsComponent {\n    constructor() {\n        this.service = inject(ApplicationsService);\n        this.list = inject(ListService);\n        this.confirmationService = inject(ConfirmationService);\n        this.proxyService = inject(ApplicationService);\n        this.data = { items: [], totalCount: 0 };\n        this.selected = signal({});\n        this.visiblePermissions = false;\n        this.onVisiblePermissionChange = (value) => {\n            this.visiblePermissions = value;\n        };\n    }\n    onSaved() {\n        this.list.get();\n    }\n    edit(id) {\n        this.proxyService.get(id).subscribe(res => {\n            this.selected.set(res);\n            this.service.openModal();\n        });\n    }\n    delete(id, name) {\n        this.confirmationService\n            .warn('AbpOpenIddict::ApplicationDeletionWarningMessage', 'AbpOpenIddict::AreYouSure', {\n            messageLocalizationParams: [name],\n        })\n            .pipe(filter(status => status === Confirmation.Status.confirm), switchMap(() => this.proxyService.delete(id)))\n            .subscribe(() => {\n            this.list.get();\n        });\n    }\n    ngOnInit() {\n        this.hookToQuery();\n    }\n    onAdd() {\n        this.selected.set({});\n        this.service.openModal();\n    }\n    openPermissionsModal(providerKey) {\n        this.providerKey = providerKey;\n        setTimeout(() => {\n            this.visiblePermissions = true;\n        }, 0);\n    }\n    hookToQuery() {\n        this.list\n            .hookToQuery(query => this.proxyService.getList(query))\n            .subscribe(res => (this.data = res));\n    }\n    openTokenLifetimeModal(record) {\n        this.selected.set(record);\n        this.service.setTokenLifetimeModalState(true);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ApplicationsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.0.9\", type: ApplicationsComponent, selector: \"abp-applications\", providers: [\n            ListService,\n            {\n                provide: EXTENSIONS_IDENTIFIER,\n                useValue: \"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */,\n            },\n        ], ngImport: i0, template: \"<abp-page [title]=\\\"'AbpOpenIddict::Applications' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n\\r\\n    <abp-advanced-entity-filters\\r\\n      localizationSourceName=\\\"AbpOpenIddict\\\"\\r\\n      [list]=\\\"list\\\"\\r\\n    ></abp-advanced-entity-filters>\\r\\n\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <abp-extensible-table\\r\\n        [data]=\\\"data.items\\\"\\r\\n        [recordsTotal]=\\\"data.totalCount\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-extensible-table>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n<abp-application-form-modal [selected]=\\\"selected()\\\" (saved)=\\\"onSaved()\\\">\\r\\n</abp-application-form-modal>\\r\\n\\r\\n@if (service.isTokenLifetimeModalVisible()) {\\r\\n  <abp-token-lifetime-modal [selected]=\\\"selected()\\\" />\\r\\n}\\r\\n<abp-permission-management\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    inputs: {\\r\\n      providerName: { value: 'C' },\\r\\n      providerKey: { value: providerKey },\\r\\n      visible: { value: visiblePermissions, twoWay: true }\\r\\n    },\\r\\n    outputs: { visibleChange: onVisiblePermissionChange },\\r\\n    componentKey: 'PermissionManagement.PermissionManagementComponent'\\r\\n  }\\\"\\r\\n  [(visible)]=\\\"visiblePermissions\\\"\\r\\n  providerName=\\\"C\\\"\\r\\n  [providerKey]=\\\"providerKey\\\"\\r\\n>\\r\\n</abp-permission-management>\\r\\n\", dependencies: [{ kind: \"directive\", type: i3$1.ReplaceableTemplateDirective, selector: \"[abpReplaceableTemplate]\", inputs: [\"abpReplaceableTemplate\"] }, { kind: \"component\", type: i5.ExtensibleTableComponent, selector: \"abp-extensible-table\", inputs: [\"actionsText\", \"data\", \"list\", \"recordsTotal\", \"actionsColumnWidth\", \"actionsTemplate\"], outputs: [\"tableActivate\"], exportAs: [\"abpExtensibleTable\"] }, { kind: \"component\", type: i3$2.AdvancedEntityFiltersComponent, selector: \"abp-advanced-entity-filters\", inputs: [\"list\", \"localizationSourceName\", \"entityFilterPlaceholder\"] }, { kind: \"component\", type: i4$1.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"component\", type: i5$1.PermissionManagementComponent, selector: \"abp-permission-management\", inputs: [\"providerName\", \"providerKey\", \"hideBadges\", \"entityDisplayName\", \"visible\"], outputs: [\"visibleChange\"], exportAs: [\"abpPermissionManagement\"] }, { kind: \"component\", type: TokenLifetimeModalComponent, selector: \"abp-token-lifetime-modal\", inputs: [\"selected\"], outputs: [\"saved\"] }, { kind: \"component\", type: ApplicationFormModalComponent, selector: \"abp-application-form-modal\", inputs: [\"selected\"], outputs: [\"saved\"] }, { kind: \"pipe\", type: i3$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ApplicationsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-applications', providers: [\n                        ListService,\n                        {\n                            provide: EXTENSIONS_IDENTIFIER,\n                            useValue: \"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */,\n                        },\n                    ], template: \"<abp-page [title]=\\\"'AbpOpenIddict::Applications' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n\\r\\n    <abp-advanced-entity-filters\\r\\n      localizationSourceName=\\\"AbpOpenIddict\\\"\\r\\n      [list]=\\\"list\\\"\\r\\n    ></abp-advanced-entity-filters>\\r\\n\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <abp-extensible-table\\r\\n        [data]=\\\"data.items\\\"\\r\\n        [recordsTotal]=\\\"data.totalCount\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-extensible-table>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n<abp-application-form-modal [selected]=\\\"selected()\\\" (saved)=\\\"onSaved()\\\">\\r\\n</abp-application-form-modal>\\r\\n\\r\\n@if (service.isTokenLifetimeModalVisible()) {\\r\\n  <abp-token-lifetime-modal [selected]=\\\"selected()\\\" />\\r\\n}\\r\\n<abp-permission-management\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    inputs: {\\r\\n      providerName: { value: 'C' },\\r\\n      providerKey: { value: providerKey },\\r\\n      visible: { value: visiblePermissions, twoWay: true }\\r\\n    },\\r\\n    outputs: { visibleChange: onVisiblePermissionChange },\\r\\n    componentKey: 'PermissionManagement.PermissionManagementComponent'\\r\\n  }\\\"\\r\\n  [(visible)]=\\\"visiblePermissions\\\"\\r\\n  providerName=\\\"C\\\"\\r\\n  [providerKey]=\\\"providerKey\\\"\\r\\n>\\r\\n</abp-permission-management>\\r\\n\" }]\n        }] });\n\nclass ScopeFormModalComponent {\n    constructor(injector, scopesService, service) {\n        this.injector = injector;\n        this.scopesService = scopesService;\n        this.service = service;\n        this.saved = new EventEmitter();\n        this.blueprints = { pattern: 'AbpOpenIddict::TheScopeNameCannotContainSpaces' };\n        this.isModalVisible$ = this.scopesService.isModalVisible$;\n    }\n    ngOnChanges(changes) {\n        this.createForm();\n    }\n    save() {\n        if (this.form.invalid) {\n            return;\n        }\n        const id = this.selected.id;\n        const isEditMode = !!id;\n        let sub;\n        const value = { ...this.form.value, resources: hashSetParser(this.form.value.resources) };\n        if (isEditMode) {\n            sub = this.service.update(id, value);\n        }\n        else {\n            sub = this.service.create(value);\n        }\n        sub.subscribe(() => {\n            this.scopesService.setModalState(false);\n            this.saved.emit();\n        });\n    }\n    visibleChange($event) {\n        this.scopesService.setModalState($event);\n    }\n    createForm() {\n        const selected = this.selected?.id\n            ? { ...this.selected, resources: hashSetParser(this.selected.resources) }\n            : {};\n        const data = new FormPropData(this.injector, selected);\n        this.form = generateFormFromProps(data);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ScopeFormModalComponent, deps: [{ token: i0.Injector }, { token: ScopesService }, { token: i2$1.ScopeService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: ScopeFormModalComponent, selector: \"abp-scope-form-modal\", inputs: { selected: \"selected\" }, outputs: { saved: \"saved\" }, usesOnChanges: true, ngImport: i0, template: \"\\r\\n<abp-modal [visible]=\\\"isModalVisible$ | async\\\" (visibleChange)=\\\"visibleChange($event)\\\" >\\r\\n\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ (selected?.id  ? 'AbpOpenIddict::Edit' : 'AbpOpenIddict::NewScope') | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form [formGroup]=\\\"form\\\" id=\\\"scopeForm\\\" [blueprints]=\\\"blueprints\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n      <abp-extensible-form [selectedRecord]=\\\"selected\\\"></abp-extensible-form>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'AbpOpenIddict::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"scopeForm\\\">{{\\r\\n      'AbpOpenIddict::Save' | abpLocalization\\r\\n      }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\", dependencies: [{ kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i3$1.FormSubmitDirective, selector: \"form[ngSubmit][formGroup]\", inputs: [\"debounce\", \"notValidateOnSubmit\", \"markAsDirtyWhenSubmit\"], outputs: [\"ngSubmit\"] }, { kind: \"component\", type: i5.ExtensibleFormComponent, selector: \"abp-extensible-form\", inputs: [\"selectedRecord\"], exportAs: [\"abpExtensibleForm\"] }, { kind: \"directive\", type: i1.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"component\", type: i2.ButtonComponent, selector: \"abp-button\", inputs: [\"buttonId\", \"buttonClass\", \"buttonType\", \"formName\", \"iconClass\", \"loading\", \"disabled\", \"attributes\"], outputs: [\"click\", \"focus\", \"blur\", \"abpClick\", \"abpFocus\", \"abpBlur\"] }, { kind: \"component\", type: i2.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i2.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"pipe\", type: i4.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i3$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ScopeFormModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-scope-form-modal', template: \"\\r\\n<abp-modal [visible]=\\\"isModalVisible$ | async\\\" (visibleChange)=\\\"visibleChange($event)\\\" >\\r\\n\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ (selected?.id  ? 'AbpOpenIddict::Edit' : 'AbpOpenIddict::NewScope') | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form [formGroup]=\\\"form\\\" id=\\\"scopeForm\\\" [blueprints]=\\\"blueprints\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n      <abp-extensible-form [selectedRecord]=\\\"selected\\\"></abp-extensible-form>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'AbpOpenIddict::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"scopeForm\\\">{{\\r\\n      'AbpOpenIddict::Save' | abpLocalization\\r\\n      }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i0.Injector }, { type: ScopesService }, { type: i2$1.ScopeService }], propDecorators: { selected: [{\n                type: Input\n            }], saved: [{\n                type: Output\n            }] } });\n\nclass ScopesComponent {\n    constructor(list, service, scopesService, confirmationService) {\n        this.list = list;\n        this.service = service;\n        this.scopesService = scopesService;\n        this.confirmationService = confirmationService;\n        this.data = { items: [], totalCount: 0 };\n        this.selected = {};\n    }\n    hookToQuery() {\n        this.list.hookToQuery(query => this.service.getList(query)).subscribe(res => (this.data = res));\n    }\n    ngOnInit() {\n        this.hookToQuery();\n    }\n    onAdd() {\n        this.selected = {};\n        this.scopesService.openModal();\n    }\n    onEdit(id) {\n        this.service.get(id).subscribe(res => {\n            this.selected = res;\n            this.scopesService.openModal();\n        });\n    }\n    onDelete(id, name) {\n        const sub = this.confirmationService\n            .warn('AbpOpenIddict::ScopeDeletionWarningMessage', 'AbpOpenIddict::AreYouSure', {\n            messageLocalizationParams: [name],\n        })\n            .subscribe((status) => {\n            if (status === Confirmation.Status.confirm) {\n                this.service.delete(id).subscribe(() => this.list.get());\n            }\n        });\n    }\n    onSaved() {\n        this.list.get();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ScopesComponent, deps: [{ token: i3$1.ListService }, { token: i2$1.ScopeService }, { token: ScopesService }, { token: i2.ConfirmationService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: ScopesComponent, selector: \"abp-scopes\", providers: [\n            ListService,\n            {\n                provide: EXTENSIONS_IDENTIFIER,\n                useValue: \"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */,\n            },\n        ], ngImport: i0, template: \"<abp-page [title]=\\\"'AbpOpenIddict::Scopes' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n\\r\\n    <abp-advanced-entity-filters\\r\\n      localizationSourceName=\\\"AbpOpenIddict\\\"\\r\\n      [list]=\\\"list\\\"\\r\\n    ></abp-advanced-entity-filters>\\r\\n\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <abp-extensible-table\\r\\n        [data]=\\\"data.items\\\"\\r\\n        [recordsTotal]=\\\"data.totalCount\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-extensible-table>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\\r\\n<abp-scope-form-modal [selected]=\\\"selected\\\" (saved)=\\\"onSaved()\\\">\\r\\n</abp-scope-form-modal>\\r\\n\", dependencies: [{ kind: \"component\", type: i5.ExtensibleTableComponent, selector: \"abp-extensible-table\", inputs: [\"actionsText\", \"data\", \"list\", \"recordsTotal\", \"actionsColumnWidth\", \"actionsTemplate\"], outputs: [\"tableActivate\"], exportAs: [\"abpExtensibleTable\"] }, { kind: \"component\", type: i3$2.AdvancedEntityFiltersComponent, selector: \"abp-advanced-entity-filters\", inputs: [\"list\", \"localizationSourceName\", \"entityFilterPlaceholder\"] }, { kind: \"component\", type: i4$1.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"component\", type: ScopeFormModalComponent, selector: \"abp-scope-form-modal\", inputs: [\"selected\"], outputs: [\"saved\"] }, { kind: \"pipe\", type: i3$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ScopesComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-scopes', providers: [\n                        ListService,\n                        {\n                            provide: EXTENSIONS_IDENTIFIER,\n                            useValue: \"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */,\n                        },\n                    ], template: \"<abp-page [title]=\\\"'AbpOpenIddict::Scopes' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n\\r\\n    <abp-advanced-entity-filters\\r\\n      localizationSourceName=\\\"AbpOpenIddict\\\"\\r\\n      [list]=\\\"list\\\"\\r\\n    ></abp-advanced-entity-filters>\\r\\n\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <abp-extensible-table\\r\\n        [data]=\\\"data.items\\\"\\r\\n        [recordsTotal]=\\\"data.totalCount\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-extensible-table>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\\r\\n<abp-scope-form-modal [selected]=\\\"selected\\\" (saved)=\\\"onSaved()\\\">\\r\\n</abp-scope-form-modal>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i3$1.ListService }, { type: i2$1.ScopeService }, { type: ScopesService }, { type: i2.ConfirmationService }] });\n\nconst DEFAULT_APPLICATIONS_ENTITY_ACTIONS = EntityAction.createMany([\n    {\n        text: 'AbpOpenIddict::Edit',\n        action: data => {\n            const component = data.getInjected(ApplicationsComponent);\n            component.edit(data.record.id);\n        },\n        permission: 'OpenIddictPro.Application.Update',\n    },\n    {\n        text: 'AbpOpenIddict::TokenLifetime',\n        action: data => {\n            const component = data.getInjected(ApplicationsComponent);\n            component.openTokenLifetimeModal(data.record);\n        },\n        permission: 'OpenIddictPro.Application.Update',\n    },\n    {\n        text: 'AbpOpenIddict::ChangeHistory',\n        action: data => {\n            const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);\n            showHistory(data.record.id, 'Volo.Abp.OpenIddict.Applications.OpenIddictApplication');\n        },\n        permission: 'AuditLogging.ViewChangeHistory:Volo.Abp.OpenIddict.Pro.Applications.Application',\n    },\n    {\n        text: 'AbpOpenIddict::Permissions',\n        action: data => {\n            const component = data.getInjected(ApplicationsComponent);\n            component.openPermissionsModal(data.record.clientId);\n        },\n        permission: 'OpenIddictPro.Application.ManagePermissions',\n    },\n    {\n        text: 'LanguageManagement::Delete',\n        action: data => {\n            const component = data.getInjected(ApplicationsComponent);\n            component.delete(data.record.id, data.record.clientId);\n        },\n        permission: 'LanguageManagement.Languages.Delete',\n    },\n]);\n\nconst DEFAULT_APPLICATIONS_ENTITY_PROPS = EntityProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'applicationType',\n        displayName: 'AbpOpenIddict::ApplicationType',\n        columnWidth: 100,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'clientId',\n        displayName: 'AbpOpenIddict::ClientId',\n        columnWidth: 200,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'displayName',\n        displayName: 'AbpOpenIddict::DisplayName',\n        columnWidth: 100,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'clientType',\n        displayName: 'AbpOpenIddict::ClientType',\n        columnWidth: 200,\n    },\n]);\n\nconst DEFAULT_APPLICATIONS_TOOLBAR_ACTIONS = ToolbarAction.createMany([\n    {\n        text: 'AbpOpenIddict::NewApplication',\n        action: data => {\n            const component = data.getInjected(ApplicationsComponent);\n            component.onAdd();\n        },\n        permission: 'OpenIddictPro.Application.Create',\n        icon: 'fa fa-plus',\n    },\n]);\n\nconst defaultUriPattern = /^([a-z][a-z0-9+.-]*):(?:\\/\\/((?:(?=((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*))(\\3)@)?(?=(\\[[0-9A-F:.]{2,}\\]|(?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*))\\5(?::(?=(\\d*))\\6)?)(\\/(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*))\\8)?|(\\/?(?!\\/)(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*))\\10)?)(?:\\?(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/?]|%[0-9A-F]{2})*))\\11)?(?:#(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/?]|%[0-9A-F]{2})*))\\12)?$/i;\n\nconst NewLineRegex = /(\\r\\n|\\r|\\n)/;\n\nfunction UrisValidator() {\n    const pattern = defaultUriPattern;\n    return (control) => {\n        if (isEmptyInputValue(control.value)) {\n            return null;\n        }\n        const value = control.value;\n        const rows = value.split(NewLineRegex).filter(item => !!item.trim());\n        if (rows.length === 0) {\n            return null;\n        }\n        const isAllRowsValid = rows.every(item => pattern.test(item));\n        if (isAllRowsValid) {\n            return null;\n        }\n        return { url: pattern.toString(), actualValue: value };\n    };\n}\nfunction isEmptyInputValue(value) {\n    return (value == null || ((typeof value === 'string' || Array.isArray(value)) && value.length === 0));\n}\n\nconst allowFlow = ({ allowImplicitFlow, allowAuthorizationCodeFlow, allowHybridFlow, }) => {\n    return allowAuthorizationCodeFlow || allowImplicitFlow || allowHybridFlow;\n};\n\nconst groupLeft = {\n    name: 'left',\n    className: 'col col-md-6',\n};\nconst groupRight = {\n    name: 'right',\n    className: 'col col-md-6',\n};\nconst className = 'mb-1 form-group';\n// @ts-ignore\nconst DEFAULT_APPLICATIONS_CREATE_FORM_PROPS = FormProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        options: data => of(defaultApplicationTypesList),\n        name: 'applicationType',\n        displayName: 'AbpOpenIddict::ApplicationType',\n        id: 'applicationType',\n        group: groupLeft,\n        className: className,\n        validators: () => [Validators.required],\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'clientId',\n        displayName: 'AbpOpenIddict::ClientId',\n        id: 'clientId',\n        validators: () => [Validators.required],\n        group: groupLeft,\n        className: className,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'displayName',\n        displayName: 'AbpOpenIddict::DisplayName',\n        id: 'displayName',\n        validators: () => [Validators.required],\n        group: groupLeft,\n        className: className,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'clientUri',\n        displayName: 'AbpOpenIddict::ClientUri',\n        id: 'clientUri',\n        validators: () => [UrisValidator()],\n        group: groupLeft,\n        className: className,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'logoUri',\n        displayName: 'AbpOpenIddict::LogoUri',\n        id: 'logoUri',\n        group: groupLeft,\n        className: className,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'clientType',\n        displayName: 'AbpOpenIddict::ClientType',\n        id: 'clientType',\n        validators: () => [Validators.required],\n        options: data => {\n            const key = data.getInjected(LocalizationService).instant('AbpUi::NotAssigned');\n            return data\n                .getInjected(ApplicationFormModalComponent)\n                .types$.pipe(map(val => [{ key, value: null }, ...val]));\n        },\n        group: groupLeft,\n        className: className,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'clientSecret',\n        displayName: 'AbpOpenIddict::ClientSecret',\n        id: 'clientSecret',\n        visible: data => {\n            const formValue = data.getInjected(ApplicationFormModalComponent).getFormValue();\n            return formValue.clientType === defaultApplicationTypes.confidential;\n        },\n        group: groupLeft,\n        className: className,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        defaultValue: false,\n        name: 'allowAuthorizationCodeFlow',\n        displayName: 'AbpOpenIddict::AllowAuthorizationCodeFlow',\n        id: 'allowAuthorizationCodeFlow',\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        defaultValue: false,\n        name: 'allowImplicitFlow',\n        displayName: 'AbpOpenIddict::AllowImplicitFlow',\n        id: 'allowImplicitFlow',\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        defaultValue: false,\n        name: 'allowHybridFlow',\n        displayName: 'AbpOpenIddict::AllowHybridFlow',\n        id: 'allowHybridFlow',\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        defaultValue: false,\n        name: 'allowPasswordFlow',\n        displayName: 'AbpOpenIddict::AllowPasswordFlow',\n        id: 'allowPasswordFlow',\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        defaultValue: false,\n        name: 'allowClientCredentialsFlow',\n        displayTextResolver: data => {\n            return data\n                .getInjected(ApplicationFormModalComponent)\n                .changeTextToType('AbpOpenIddict::AllowClientCredentialsFlow');\n        },\n        disabled: data => {\n            const formValue = data.getInjected(ApplicationFormModalComponent).getFormValue();\n            return formValue.type === defaultApplicationTypes.public;\n        },\n        id: 'allowClientCredentialsFlow',\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        defaultValue: false,\n        name: 'allowRefreshTokenFlow',\n        displayName: 'AbpOpenIddict::AllowRefreshTokenFlow',\n        disabled: data => {\n            const { allowHybridFlow, allowAuthorizationCodeFlow, allowPasswordFlow } = data\n                .getInjected(ApplicationFormModalComponent)\n                .getFormValue();\n            return !(allowHybridFlow || allowAuthorizationCodeFlow || allowPasswordFlow);\n        },\n        id: 'allowRefreshTokenFlow',\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        defaultValue: false,\n        name: 'allowDeviceEndpoint',\n        displayTextResolver: data => {\n            return data\n                .getInjected(ApplicationFormModalComponent)\n                .changeTextToType('AbpOpenIddict::AllowDeviceEndpoint');\n        },\n        disabled: data => {\n            const formValue = data.getInjected(ApplicationFormModalComponent).getFormValue();\n            return formValue.type === defaultApplicationTypes.public;\n        },\n        id: 'allowDeviceEndpoint',\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'consentType',\n        displayName: 'AbpOpenIddict::ConsentType',\n        id: 'consentType',\n        options: data => data.getInjected(ApplicationFormModalComponent).consentTypes$,\n        visible: data => {\n            const formValue = data.getInjected(ApplicationFormModalComponent).getFormValue();\n            return allowFlow(formValue);\n        },\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"text\" /* ePropType.Text */,\n        name: 'extensionGrantTypes',\n        displayName: 'AbpOpenIddict::ExtensionGrantTypes',\n        id: 'extensionGrantTypes',\n        className: className,\n        group: groupRight,\n    },\n    {\n        type: \"multiselect\" /* ePropType.MultiSelect */,\n        name: 'scopes',\n        displayName: 'AbpOpenIddict::Scopes',\n        id: 'scopes',\n        defaultValue: [],\n        options: data => {\n            return data\n                .getInjected(ScopeService)\n                .getAllScopes()\n                .pipe(map((result) => result.map(scope => ({\n                key: scope.name,\n                value: scope.name,\n            }))));\n        },\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"text\" /* ePropType.Text */,\n        name: 'redirectUris',\n        displayName: 'AbpOpenIddict::RedirectUris',\n        id: 'redirectUris',\n        validators: () => [UrisValidator()],\n        visible: data => {\n            const formValue = data.getInjected(ApplicationFormModalComponent).getFormValue();\n            return allowFlow(formValue);\n        },\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        defaultValue: false,\n        name: 'allowLogoutEndpoint',\n        displayName: 'AbpOpenIddict::AllowLogoutEndpoint',\n        id: 'allowLogoutEndpoint',\n        visible: data => {\n            const formValue = data.getInjected(ApplicationFormModalComponent).getFormValue();\n            return allowFlow(formValue);\n        },\n        group: groupRight,\n        className: className,\n    },\n    {\n        type: \"text\" /* ePropType.Text */,\n        name: 'postLogoutRedirectUris',\n        displayName: 'AbpOpenIddict::PostLogoutRedirectUris',\n        id: 'postLogoutRedirectUris',\n        validators: () => [UrisValidator()],\n        visible: data => {\n            const { allowLogoutEndpoint } = data\n                .getInjected(ApplicationFormModalComponent)\n                .getFormValue();\n            return allowLogoutEndpoint;\n        },\n        group: groupRight,\n        className: className,\n    },\n]);\nconst DEFAULT_APPLICATIONS_FORM_PROPS = DEFAULT_APPLICATIONS_CREATE_FORM_PROPS.concat(FormProp.createMany([\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        name: 'enabled',\n        displayName: 'AbpOpenIddict::Enabled',\n        id: 'enabled',\n        defaultValue: false,\n        group: groupRight,\n        className: className,\n    },\n]));\n\nconst DEFAULT_SCOPES_ENTITY_PROPS = EntityProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'name',\n        displayName: 'AbpOpenIddict::Name',\n        columnWidth: 200,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'displayName',\n        displayName: 'AbpOpenIddict::DisplayName',\n        columnWidth: 200,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'description',\n        displayName: 'AbpOpenIddict::Description',\n        columnWidth: 200,\n    },\n]);\n\nconst DEFAULT_SCOPES_TOOLBAR_ACTIONS = ToolbarAction.createMany([\n    {\n        text: 'AbpOpenIddict::NewScope',\n        action: data => {\n            const component = data.getInjected(ScopesComponent);\n            component.onAdd();\n        },\n        permission: 'OpenIddictPro.Scope.Create',\n        icon: 'fa fa-plus',\n    },\n]);\n\nconst DEFAULT_SCOPE_CREATE_FORM_PROPS = FormProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'name',\n        displayName: 'AbpOpenIddict::Name',\n        id: 'name',\n        validators: () => [Validators.required, Validators.pattern(/^\\S+$/)],\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'displayName',\n        displayName: 'AbpOpenIddict::DisplayName',\n        id: 'displayName',\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'description',\n        displayName: 'AbpOpenIddict::Description',\n        id: 'description',\n    },\n    {\n        type: \"text\" /* ePropType.Text */,\n        name: 'resources',\n        displayName: 'AbpOpenIddict::Resources',\n        id: 'resources',\n    },\n]);\nconst DEFAULT_SCOPES_FORM_PROPS = DEFAULT_SCOPE_CREATE_FORM_PROPS;\n\nconst DEFAULT_SCOPE_ENTITY_ACTIONS = EntityAction.createMany([\n    {\n        text: 'AbpOpenIddict::Edit',\n        action: data => {\n            const component = data.getInjected(ScopesComponent);\n            component.onEdit(data.record.id);\n        },\n        permission: 'OpenIddictPro.Scope.Update',\n    },\n    {\n        text: 'AbpOpenIddict::ChangeHistory',\n        action: data => {\n            const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);\n            showHistory(data.record.id, 'Volo.Abp.OpenIddict.Scopes.OpenIddictScope');\n        },\n        permission: 'AuditLogging.ViewChangeHistory:Volo.Abp.OpenIddict.Pro.Scopes.Scope',\n        visible: data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)),\n    },\n    {\n        text: 'AbpOpenIddict::Delete',\n        action: data => {\n            const component = data.getInjected(ScopesComponent);\n            component.onDelete(data.record.id, data.record.name);\n        },\n        permission: 'OpenIddictPro.Scope.Delete',\n    },\n]);\n\nconst DEFAULT_OPENIDDICT_PRO_ENTITY_ACTIONS = {\n    [\"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */]: DEFAULT_APPLICATIONS_ENTITY_ACTIONS,\n    [\"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */]: DEFAULT_SCOPE_ENTITY_ACTIONS,\n};\nconst DEFAULT_OPENIDDICT_PRO_TOOLBAR_ACTIONS = {\n    [\"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */]: DEFAULT_APPLICATIONS_TOOLBAR_ACTIONS,\n    [\"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */]: DEFAULT_SCOPES_TOOLBAR_ACTIONS,\n};\nconst DEFAULT_OPENIDDICT_PRO_ENTITY_PROPS = {\n    [\"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */]: DEFAULT_APPLICATIONS_ENTITY_PROPS,\n    [\"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */]: DEFAULT_SCOPES_ENTITY_PROPS,\n};\nconst DEFAULT_OPENIDDICT_PRO_CREATE_FORM_PROPS = {\n    [\"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */]: DEFAULT_APPLICATIONS_CREATE_FORM_PROPS,\n    [\"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */]: DEFAULT_SCOPE_CREATE_FORM_PROPS,\n};\nconst DEFAULT_OPENIDDICT_PRO_EDIT_FORM_PROPS = {\n    [\"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */]: DEFAULT_APPLICATIONS_FORM_PROPS,\n    [\"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */]: DEFAULT_SCOPES_FORM_PROPS,\n};\nconst OPENIDDICT_PRO_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('OPENIDDICT_PRO_ENTITY_ACTION_CONTRIBUTORS');\nconst OPENIDDICT_PRO_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('OPENIDDICT_PRO__TOOLBAR_ACTION_CONTRIBUTORS');\nconst OPENIDDICT_PRO_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('OPENIDDICT_PRO_ENTITY_PROP_CONTRIBUTORS');\nconst OPENIDDICT_PRO_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('OPENIDDICT_PRO_CREATE_FORM_PROP_CONTRIBUTORS');\nconst OPENIDDICT_PRO_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('OPENIDDICT_PRO_EDIT_FORM_PROP_CONTRIBUTORS');\n\nconst openIddictProExtensionsResolver = () => {\n    const injector = inject(Injector);\n    const extensions = injector.get(ExtensionsService);\n    const actionContributors = injector.get(OPENIDDICT_PRO_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n    const toolbarContributors = injector.get(OPENIDDICT_PRO_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n    const propContributors = injector.get(OPENIDDICT_PRO_ENTITY_PROP_CONTRIBUTORS, null) || {};\n    const createFormContributors = injector.get(OPENIDDICT_PRO_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};\n    const editFormContributors = injector.get(OPENIDDICT_PRO_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};\n    const configState = injector.get(ConfigStateService);\n    return getObjectExtensionEntitiesFromStore(configState, 'OpenIddictPro').pipe(map$1(entities => {\n        return {\n            [\"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */]: entities.ApiResource,\n            [\"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */]: entities.Scopes,\n        };\n    }), mapEntitiesToContributors(configState, 'AbpOpenIddictPro'), tap(objectExtensionContributors => {\n        mergeWithDefaultActions(extensions.entityActions, DEFAULT_OPENIDDICT_PRO_ENTITY_ACTIONS, actionContributors);\n        mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_OPENIDDICT_PRO_TOOLBAR_ACTIONS, toolbarContributors);\n        mergeWithDefaultProps(extensions.entityProps, DEFAULT_OPENIDDICT_PRO_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n        mergeWithDefaultProps(extensions.createFormProps, DEFAULT_OPENIDDICT_PRO_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);\n        mergeWithDefaultProps(extensions.editFormProps, DEFAULT_OPENIDDICT_PRO_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);\n    }));\n};\n\nconst routes = [\n    { path: '', redirectTo: 'Applications', pathMatch: 'full' },\n    {\n        path: '',\n        component: RouterOutletComponent,\n        canActivate: [authGuard, permissionGuard],\n        resolve: [openIddictProExtensionsResolver],\n        children: [\n            {\n                path: 'Applications',\n                component: ReplaceableRouteContainerComponent,\n                data: {\n                    requiredPolicy: 'OpenIddictPro.Application',\n                    replaceableComponent: {\n                        key: \"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */,\n                        defaultComponent: ApplicationsComponent,\n                    },\n                },\n            },\n            {\n                path: 'Scopes',\n                component: ReplaceableRouteContainerComponent,\n                data: {\n                    requiredPolicy: 'OpenIddictPro.Scopes',\n                    replaceableComponent: {\n                        key: \"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */,\n                        defaultComponent: ScopesComponent,\n                    },\n                },\n            },\n        ],\n    },\n];\nclass OpeniddictproRoutingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: OpeniddictproRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: OpeniddictproRoutingModule, imports: [i1$1.RouterModule], exports: [RouterModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: OpeniddictproRoutingModule, imports: [RouterModule.forChild(routes), RouterModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: OpeniddictproRoutingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RouterModule.forChild(routes)],\n                    exports: [RouterModule],\n                }]\n        }] });\n\nconst components = [\n    ApplicationsComponent,\n    ApplicationFormModalComponent,\n    ScopesComponent,\n    ScopeFormModalComponent,\n];\nclass OpeniddictproModule {\n    static forChild(options = {}) {\n        return {\n            ngModule: OpeniddictproModule,\n            providers: [\n                {\n                    provide: OPENIDDICT_PRO_ENTITY_ACTION_CONTRIBUTORS,\n                    useValue: options.entityActionContributors,\n                },\n                {\n                    provide: OPENIDDICT_PRO_TOOLBAR_ACTION_CONTRIBUTORS,\n                    useValue: options.toolbarActionContributors,\n                },\n                {\n                    provide: OPENIDDICT_PRO_ENTITY_PROP_CONTRIBUTORS,\n                    useValue: options.entityPropContributors,\n                },\n                {\n                    provide: OPENIDDICT_PRO_CREATE_FORM_PROP_CONTRIBUTORS,\n                    useValue: options.createFormPropContributors,\n                },\n                {\n                    provide: OPENIDDICT_PRO_EDIT_FORM_PROP_CONTRIBUTORS,\n                    useValue: options.editFormPropContributors,\n                },\n                ApplicationsService,\n                ScopesService,\n            ],\n        };\n    }\n    static forLazy(options = {}) {\n        return new LazyModuleFactory(OpeniddictproModule.forChild(options));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: OpeniddictproModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: OpeniddictproModule, declarations: [ApplicationsComponent,\n            ApplicationFormModalComponent,\n            ScopesComponent,\n            ScopeFormModalComponent], imports: [OpeniddictproRoutingModule,\n            CoreModule,\n            CommercialUiModule,\n            ThemeSharedModule,\n            NgbDropdownModule,\n            NgxValidateCoreModule,\n            PageModule,\n            AdvancedEntityFiltersModule,\n            PermissionManagementModule,\n            ExtensibleFormComponent,\n            TokenLifetimeModalComponent,\n            ExtensibleTableComponent], exports: [ApplicationsComponent,\n            ApplicationFormModalComponent,\n            ScopesComponent,\n            ScopeFormModalComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: OpeniddictproModule, imports: [OpeniddictproRoutingModule,\n            CoreModule,\n            CommercialUiModule,\n            ThemeSharedModule,\n            NgbDropdownModule,\n            NgxValidateCoreModule,\n            PageModule,\n            AdvancedEntityFiltersModule,\n            PermissionManagementModule,\n            ExtensibleFormComponent,\n            TokenLifetimeModalComponent,\n            ExtensibleTableComponent] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: OpeniddictproModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OpeniddictproRoutingModule,\n                        CoreModule,\n                        CommercialUiModule,\n                        ThemeSharedModule,\n                        NgbDropdownModule,\n                        NgxValidateCoreModule,\n                        PageModule,\n                        AdvancedEntityFiltersModule,\n                        PermissionManagementModule,\n                        ExtensibleFormComponent,\n                        TokenLifetimeModalComponent,\n                        ExtensibleTableComponent,\n                    ],\n                    declarations: [...components],\n                    exports: [...components],\n                }]\n        }] });\n\n/**\n * @deprecated Use `openIddictProExtensionsResolver` *function* instead.\n */\nclass OpenIddictProExtensionsGuard {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    canActivate() {\n        const extensions = this.injector.get(ExtensionsService);\n        const actionContributors = this.injector.get(OPENIDDICT_PRO_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n        const toolbarContributors = this.injector.get(OPENIDDICT_PRO_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n        const propContributors = this.injector.get(OPENIDDICT_PRO_ENTITY_PROP_CONTRIBUTORS, null) || {};\n        const createFormContributors = this.injector.get(OPENIDDICT_PRO_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};\n        const editFormContributors = this.injector.get(OPENIDDICT_PRO_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};\n        const configState = this.injector.get(ConfigStateService);\n        return getObjectExtensionEntitiesFromStore(configState, 'OpenIddictPro').pipe(map(entities => {\n            return {\n                [\"OpenIddictPro.Applications\" /* eOpenIddictProComponents.Applications */]: entities.ApiResource,\n                [\"OpenIddictPro.Scopes\" /* eOpenIddictProComponents.Scopes */]: entities.Scopes,\n            };\n        }), mapEntitiesToContributors(configState, 'AbpOpenIddictPro'), tap$1(objectExtensionContributors => {\n            mergeWithDefaultActions(extensions.entityActions, DEFAULT_OPENIDDICT_PRO_ENTITY_ACTIONS, actionContributors);\n            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_OPENIDDICT_PRO_TOOLBAR_ACTIONS, toolbarContributors);\n            mergeWithDefaultProps(extensions.entityProps, DEFAULT_OPENIDDICT_PRO_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_OPENIDDICT_PRO_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);\n            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_OPENIDDICT_PRO_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);\n        }), mapTo(true));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: OpenIddictProExtensionsGuard, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: OpenIddictProExtensionsGuard }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: OpenIddictProExtensionsGuard, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.Injector }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ApplicationFormModalComponent, ApplicationsComponent, ApplicationsService, DEFAULT_APPLICATIONS_CREATE_FORM_PROPS, DEFAULT_APPLICATIONS_ENTITY_ACTIONS, DEFAULT_APPLICATIONS_ENTITY_PROPS, DEFAULT_APPLICATIONS_FORM_PROPS, DEFAULT_APPLICATIONS_TOOLBAR_ACTIONS, DEFAULT_OPENIDDICT_PRO_CREATE_FORM_PROPS, DEFAULT_OPENIDDICT_PRO_EDIT_FORM_PROPS, DEFAULT_OPENIDDICT_PRO_ENTITY_ACTIONS, DEFAULT_OPENIDDICT_PRO_ENTITY_PROPS, DEFAULT_OPENIDDICT_PRO_TOOLBAR_ACTIONS, DEFAULT_SCOPES_ENTITY_PROPS, DEFAULT_SCOPES_FORM_PROPS, DEFAULT_SCOPES_TOOLBAR_ACTIONS, DEFAULT_SCOPE_CREATE_FORM_PROPS, DEFAULT_SCOPE_ENTITY_ACTIONS, DefaultApplicationsConsentType, OPENIDDICT_PRO_CREATE_FORM_PROP_CONTRIBUTORS, OPENIDDICT_PRO_EDIT_FORM_PROP_CONTRIBUTORS, OPENIDDICT_PRO_ENTITY_ACTION_CONTRIBUTORS, OPENIDDICT_PRO_ENTITY_PROP_CONTRIBUTORS, OPENIDDICT_PRO_TOOLBAR_ACTION_CONTRIBUTORS, OpenIddictProExtensionsGuard, OpeniddictproModule, ScopeFormModalComponent, ScopesComponent, ScopesService, TokenLifetimeModalComponent, UrisValidator, allowFlow, defaultApplicationTypes, defaultApplicationTypesList, defaultApplicationsTypeList, defaultUriPattern, hashSetParser };\n"],"x_google_ignoreList":[0,1]}