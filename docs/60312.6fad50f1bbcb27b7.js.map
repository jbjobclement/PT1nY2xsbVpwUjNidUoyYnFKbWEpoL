{"version":3,"file":"60312.6fad50f1bbcb27b7.js","mappings":"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","names":["SettingManagementComponent_ng_container_8_li_1_Template","rf","ctx","_r5","i0","setting_r2","$implicit","ctx_r4","selected","ctx_r3","name","SettingManagementComponent_ng_container_8_Template","requiredPolicy","SettingManagementComponent_div_10_ng_container_2_Template","SettingManagementComponent_div_10_Template","ctx_r1","component","SettingManagementComponent","constructor","settingTabsService","this","subscription","Subscription","settings","trackByFn","_","item","ngOnDestroy","unsubscribe","ngOnInit","add","visible$","subscribe","static","ɵfac","t","i1","ɵcmp","type","selectors","decls","vars","consts","template","length","dependencies","i2","i3","i4","encapsulation","routes","path","RouterOutletComponent","canActivate","authGuard","children","ReplaceableRouteContainerComponent","data","replaceableComponent","key","defaultComponent","SettingManagementRoutingModule","ɵmod","ɵinj","imports","RouterModule","forChild","SettingManagementModule","ngModule","providers","forLazy","LazyModuleFactory","CoreModule","ThemeSharedModule","PageModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@abp/ng.setting-management/fesm2022/abp-ng.setting-management.mjs"],"sourcesContent":["import * as i4 from '@abp/ng.components/page';\nimport { PageModule } from '@abp/ng.components/page';\nimport * as i3 from '@abp/ng.core';\nimport { RouterOutletComponent, authGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport * as i0 from '@angular/core';\nimport { Component, NgModule } from '@angular/core';\nimport * as i1 from '@abp/ng.setting-management/config';\nimport { Subscription } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport * as i1$1 from '@angular/router';\nimport { RouterModule } from '@angular/router';\n\nclass SettingManagementComponent {\n    constructor(settingTabsService) {\n        this.settingTabsService = settingTabsService;\n        this.subscription = new Subscription();\n        this.settings = [];\n        this.trackByFn = (_, item) => item.name;\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    ngOnInit() {\n        this.subscription.add(this.settingTabsService.visible$.subscribe(settings => {\n            this.settings = settings;\n            if (!this.selected)\n                this.selected = this.settings[0];\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementComponent, deps: [{ token: i1.SettingTabsService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: SettingManagementComponent, selector: \"abp-setting-management\", ngImport: i0, template: \"<abp-page [title]=\\\"'AbpSettingManagement::Settings' | abpLocalization\\\">\\r\\n  <div id=\\\"SettingManagementWrapper\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-12 col-md-3 mb-2 mb-md-0\\\">\\r\\n            <ul class=\\\"nav flex-column nav-pills\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\r\\n              <ng-container *abpFor=\\\"let setting of settings; trackBy: trackByFn\\\">\\r\\n                <li\\r\\n                  (click)=\\\"selected = setting\\\"\\r\\n                  class=\\\"nav-item pointer\\\"\\r\\n                  *abpPermission=\\\"setting.requiredPolicy\\\"\\r\\n                >\\r\\n                  <a\\r\\n                    class=\\\"nav-link\\\"\\r\\n                    [id]=\\\"setting.name + '-tab'\\\"\\r\\n                    role=\\\"tab\\\"\\r\\n                    [class.active]=\\\"setting.name === selected.name\\\"\\r\\n                    >{{ setting.name | abpLocalization }}</a\\r\\n                  >\\r\\n                </li>\\r\\n              </ng-container>\\r\\n            </ul>\\r\\n          </div>\\r\\n          <div class=\\\"col-12 col-md-9\\\">\\r\\n            <div *ngIf=\\\"settings.length\\\" class=\\\"tab-content\\\">\\r\\n              <div class=\\\"tab-pane fade show active\\\" [id]=\\\"selected.name + '-tab'\\\" role=\\\"tabpanel\\\">\\r\\n                <ng-container *ngComponentOutlet=\\\"selected.component\\\"></ng-container>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\", dependencies: [{ kind: \"directive\", type: i2.NgComponentOutlet, selector: \"[ngComponentOutlet]\", inputs: [\"ngComponentOutlet\", \"ngComponentOutletInputs\", \"ngComponentOutletInjector\", \"ngComponentOutletContent\", \"ngComponentOutletNgModule\", \"ngComponentOutletNgModuleFactory\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.ForDirective, selector: \"[abpFor]\", inputs: [\"abpForOf\", \"abpForOrderBy\", \"abpForOrderDir\", \"abpForFilterBy\", \"abpForFilterVal\", \"abpForTrackBy\", \"abpForCompareBy\", \"abpForEmptyRef\"] }, { kind: \"directive\", type: i3.PermissionDirective, selector: \"[abpPermission]\", inputs: [\"abpPermission\", \"abpPermissionRunChangeDetection\"] }, { kind: \"component\", type: i4.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"pipe\", type: i3.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-setting-management', template: \"<abp-page [title]=\\\"'AbpSettingManagement::Settings' | abpLocalization\\\">\\r\\n  <div id=\\\"SettingManagementWrapper\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-12 col-md-3 mb-2 mb-md-0\\\">\\r\\n            <ul class=\\\"nav flex-column nav-pills\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\r\\n              <ng-container *abpFor=\\\"let setting of settings; trackBy: trackByFn\\\">\\r\\n                <li\\r\\n                  (click)=\\\"selected = setting\\\"\\r\\n                  class=\\\"nav-item pointer\\\"\\r\\n                  *abpPermission=\\\"setting.requiredPolicy\\\"\\r\\n                >\\r\\n                  <a\\r\\n                    class=\\\"nav-link\\\"\\r\\n                    [id]=\\\"setting.name + '-tab'\\\"\\r\\n                    role=\\\"tab\\\"\\r\\n                    [class.active]=\\\"setting.name === selected.name\\\"\\r\\n                    >{{ setting.name | abpLocalization }}</a\\r\\n                  >\\r\\n                </li>\\r\\n              </ng-container>\\r\\n            </ul>\\r\\n          </div>\\r\\n          <div class=\\\"col-12 col-md-9\\\">\\r\\n            <div *ngIf=\\\"settings.length\\\" class=\\\"tab-content\\\">\\r\\n              <div class=\\\"tab-pane fade show active\\\" [id]=\\\"selected.name + '-tab'\\\" role=\\\"tabpanel\\\">\\r\\n                <ng-container *ngComponentOutlet=\\\"selected.component\\\"></ng-container>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1.SettingTabsService }] });\n\nconst routes = [\n    {\n        path: '',\n        component: RouterOutletComponent,\n        canActivate: [authGuard],\n        children: [\n            {\n                path: '',\n                component: ReplaceableRouteContainerComponent,\n                data: {\n                    requiredPolicy: 'AbpAccount.SettingManagement',\n                    replaceableComponent: {\n                        key: \"SettingManagement.SettingManagementComponent\" /* eSettingManagementComponents.SettingManagement */,\n                        defaultComponent: SettingManagementComponent,\n                    },\n                },\n            },\n        ],\n    },\n];\nclass SettingManagementRoutingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementRoutingModule, imports: [i1$1.RouterModule], exports: [RouterModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementRoutingModule, imports: [RouterModule.forChild(routes), RouterModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementRoutingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RouterModule.forChild(routes)],\n                    exports: [RouterModule],\n                }]\n        }] });\n\nclass SettingManagementModule {\n    static forChild() {\n        return {\n            ngModule: SettingManagementModule,\n            providers: [],\n        };\n    }\n    static forLazy() {\n        return new LazyModuleFactory(SettingManagementModule.forChild());\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementModule, declarations: [SettingManagementComponent], imports: [SettingManagementRoutingModule, CoreModule, ThemeSharedModule, PageModule], exports: [SettingManagementComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementModule, imports: [SettingManagementRoutingModule, CoreModule, ThemeSharedModule, PageModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SettingManagementModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [SettingManagementComponent],\n                    exports: [SettingManagementComponent],\n                    imports: [SettingManagementRoutingModule, CoreModule, ThemeSharedModule, PageModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SettingManagementComponent, SettingManagementModule };\n"],"x_google_ignoreList":[0]}