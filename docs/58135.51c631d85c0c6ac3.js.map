{"version":3,"file":"58135.51c631d85c0c6ac3.js","mappings":"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","names":["EditionService","constructor","restService","this","apiName","create","input","config","request","method","url","body","delete","id","get","getAllList","getList","params","filter","sorting","skipCount","maxResultCount","getPlanLookup","getUsageStatistics","moveAllTenants","editionId","update","static","ɵfac","t","i0","i1","ɵprov","token","factory","providedIn","TenantService","applyDatabaseMigrations","checkConnectionString","connectionString","getConnectionStrings","getDatabases","getEditionLookup","getEditionNames","expirationDateMin","expirationDateMax","activationState","setPassword","updateConnectionStrings","PaymentRequestState","Waiting","Completed","Failed","Refunded","paymentRequestStateOptions","mapEnumToOptions","PaymentType","OneTime","Subscription","paymentTypeOptions","TenantActivationState","Active","ActiveWithLimitedTime","Passive","tenantActivationStateOptions","EditionDeleteComponent_ng_template_1_Template","rf","ctx","EditionDeleteComponent_ng_template_3_ng_container_4_ng_container_9_select_6_option_4_Template","item_r11","$implicit","displayName","_c0","a0","EditionDeleteComponent_ng_template_3_ng_container_4_ng_container_9_select_6_Template","ctx_r8","showAssignErrorMessage","loading","editions","trackByFn","EditionDeleteComponent_ng_template_3_ng_container_4_ng_container_9_span_8_Template","EditionDeleteComponent_ng_template_3_ng_container_4_ng_container_9_Template","ctx_r7","assignType$","EditionDeleteComponent_ng_template_3_ng_container_4_Template","ctx_r6","tenantCount","length","EditionDeleteComponent_ng_template_3_Template","_r13","ctx_r12","save","ctx_r2","name","form","EditionDeleteComponent_ng_template_5_Template","ctx_r4","MoveAllTenantsComponent_ng_template_1_Template","MoveAllTenantsComponent_ng_template_3_option_7_Template","item_r7","MoveAllTenantsComponent_ng_template_3_Template","_r9","MoveAllTenantsComponent_ng_template_5_Template","invalid","touched","EditionsComponent_ng_template_7_Template","ctx_r0","selected","EditionsComponent_ng_template_9_Conditional_0_Template","_r11","ctx_r10","ctx_r9","editionForm","EditionsComponent_ng_template_9_Template","EditionsComponent_ng_template_11_Template","EditionsComponent_abp_feature_management_13_Template","$event","visibleFeatures","providerKey","EditionsComponent_Conditional_14_Template","_r15","ctx_r14","onVisibleDeleteChange","visibleEditionDelete","EditionsComponent_Conditional_15_Template","_r17","ctx_r16","onVisibleMoveChange","visibleMove","_c1","value","_c2","_c3","twoWay","_c4","a1","a2","providerName","visible","_c5","visibleChange","_c6","inputs","outputs","componentKey","ConnectionStringsComponent_ng_container_1_div_8_Template","_r6","ctx_r5","ConnectionStringsComponent_ng_container_1_Conditional_9_ng_container_5_ng_container_8_option_1_Template","db_r10","databaseName","ConnectionStringsComponent_ng_container_1_Conditional_9_ng_container_5_ng_container_8_Template","ConnectionStringsComponent_ng_container_1_Conditional_9_ng_container_5_ng_container_36_tr_1_ng_template_6_Template","_r20","_r18","close","i_r14","index","ctx_r21","removeDbConnectionString","ConnectionStringsComponent_ng_container_1_Conditional_9_ng_container_5_ng_container_36_tr_1_Template","db_r13","ConnectionStringsComponent_ng_container_1_Conditional_9_ng_container_5_ng_container_36_Template","ConnectionStringsComponent_ng_container_1_Conditional_9_ng_container_5_Template","_r25","ctx_r24","selectedDatabase","ctx_r26","databaseConnectionString","ctx_r27","addDatabaseConnectionString","ctx_r28","ctx_r29","databases","ConnectionStringsComponent_ng_container_1_Conditional_9_Template","_r31","ctx_r30","moduleSpecificDatabase","ConnectionStringsComponent_ng_container_1_Template","_r33","ctx_r32","onSharedDatabaseChange","ConnectionStringsComponent_ng_template_2_Template","SetTenantPasswordModalComponent_ng_template_1_Template","tenantName","SetTenantPasswordModalComponent_ng_template_3_form_0_Template","_r7","fieldTextType","ctx_r11","generatePassword","SetTenantPasswordModalComponent_ng_template_3_Template","SetTenantPasswordModalComponent_ng_template_5_Template","_c7","size","ImpersonateTenantModalComponent_ng_template_2_Template","ImpersonateTenantModalComponent_ng_template_4_form_0_Template","_r8","ImpersonateTenantModalComponent_ng_template_4_Template","ImpersonateTenantModalComponent_ng_template_6_Template","_r10","_c8","_c9","TenantsComponent_option_30_Template","data_r14","key","TenantsComponent_ng_template_46_Template","selectedModalContent","title","TenantsComponent_ng_template_48_ng_container_0_Template","TenantsComponent_ng_template_48_Template","template","TenantsComponent_ng_template_50_abp_button_4_Template","TenantsComponent_ng_template_50_abp_button_5_Template","_r19","ctx_r18","ctx_r17","isDisabledSaveButton","TenantsComponent_ng_template_50_Template","type","TenantsComponent_ng_container_52_abp_set_tenant_password_modal_1_Template","_r22","closeSetTenantPasswordModal","ctx_r20","isVisibleSetTenantPasswordModal","selectedTenantId","selectedTenantNameForSetTenantPasswordModal","TenantsComponent_ng_container_52_Template","setTenantReplaceableTemplateOptions","TenantsComponent_ng_template_53_ng_container_0_Template","TenantsComponent_ng_template_53_ng_template_1_ng_template_6_ng_container_0_Template","TenantsComponent_ng_template_53_ng_template_1_ng_template_6_Template","_r27","TenantsComponent_ng_template_53_ng_template_1_ng_template_11_ng_container_0_Template","TenantsComponent_ng_template_53_ng_template_1_ng_template_11_Template","_r29","TenantsComponent_ng_template_53_ng_template_1_Template","_r30","TenantsComponent_ng_template_53_ng_template_3_form_0_Template","_r37","ctx_r36","ctx_r35","tenantForm","TenantsComponent_ng_template_53_ng_template_3_Template","TenantsComponent_ng_template_53_ng_template_5_abp_connection_strings_0_Template","_r40","ctx_r39","_c10","formSubmit","_c11","TenantsComponent_ng_template_53_ng_template_5_Template","connectionStringsReplacementKey","TenantsComponent_ng_template_53_Template","TenantsComponent_ng_template_55_abp_connection_strings_0_Template","_r43","ctx_r42","ctx_r41","_c12","selectedTenant","_c13","TenantsComponent_ng_template_55_Template","TenantsComponent_abp_feature_management_57_Template","_r45","ctx_r44","ctx_r13","_c14","_c15","EditionsUsageWidgetComponent_div_0_Template","chartData","width","height","LatestTenantsWidgetComponent_div_0_tr_20_Template","item_r2","i_r3","editionName","LatestTenantsWidgetComponent_div_0_Template","minHeight","data","EditionDeleteValidator","control","assignType","edition","required","EditionDeleteComponent","EventEmitter","#isSubmitted","signal","#editions","computed","e","trackByService","inject","TrackByService","by","editionService","fb","FormBuilder","destroyRef","DestroyRef","group","validators","controls","valueChanges","onVisibleChange","emit","refresh","ngOnInit","set","pipe","finalize","subscribe","res","tap","takeUntilDestroyed","errors","_this","_asyncToGenerator","moveAllTenants$","firstValueFrom","delete$","ɵcmp","selectors","standalone","features","decls","vars","consts","dependencies","CommonModule","ThemeSharedModule","i4","i3","CoreModule","i4$1","i1$1","encapsulation","MoveAllTenantsComponent","_this2","EditionsComponent","list","service","injector","confirmationService","items","totalCount","plans$","BehaviorSubject","isModalVisible","modalBusy","onVisibleFeaturesChange","hookToQuery","query","createEditionForm","FormPropData","generateFormFromProps","onAddEdition","onEditEdition","selectedEdition","valid","finalize$1","openFeaturesModal","setTimeout","cb","next","v","warn","hideCancelBtn","yesText","i2","ListService","provide","EXTENSIONS_IDENTIFIER","useValue","NgxValidateCoreModule","PageModule","i5","AdvancedEntityFiltersModule","i7","FeatureManagementModule","i7$1","ExtensibleModule","i8","ReplaceableTemplateDirective","LocalizationModule","ReactiveFormsModule","ConnectionStringsComponent","UntypedFormBuilder","toasterService","ToasterService","useSharedDatabase","defaultConnectionString","getInitialData","selectFirstDatabase","find","db","tap$1","map","extraProperties","setValue","default","some","val","updateValueAndValidity","findIndex","i","getInput","undefined","dbConnection","success","error","_r2","i11","SetTenantPasswordModalComponent","tenantService","toaster","modalVisible","tenantId","modalVisibleChange","buildForm","adminName","Validators","password","ngForm","username","resetForm","add","onModalVisibleChange","isVisible","ngOnChanges","currentValue","generatedPassword","ImpersonateTenantModalService","store","InternalStore","isVisible$","sliceState","x","state","setTenantId","patch","hide","show","ImpersonateTenantModalComponent","impersonationService","ImpersonationService","subscription","SubscriptionService","confirmation","ConfirmationService","defaultTenantUserName","reset","tenantUserName","response","addOne","error_description","console","sub","impersonateTenant","TenantsComponent","hasSelectedTenant","connectionStringsRef","emptyOption","label","setTenantPasswordReplacementKey","activationStateOptions","clearFilters","formFilters","times","createTenantForm","record","patchValue","openModal","onEditConnectionString","tenant","connectionStringModalTemplate","onAddTenant","tenantModalTemplate","onEditTenant","saveConnectionString","saveTenant","connectionStrings","messageLocalizationParams","status","Confirmation","Status","confirm","document","getElementById","focus","openSetTenantPasswordModal","recordId","info","life","getData","viewQuery","_t","first","NgbDateAdapter","useClass","DateAdapter","EditionsUsageWidgetComponent","permissionService","initialized","draw","getGrantedPolicy","setChartData","JSON","stringify","dataKeys","Object","keys","labels","datasets","backgroundColor","getRandomBackgroundColor","chart","ChartComponent","i3$1","LatestTenantsWidgetComponent","_","item","DEFAULT_EDITIONS_ENTITY_ACTIONS","EntityAction","createMany","text","action","getInjected","permission","SHOW_ENTITY_HISTORY","DEFAULT_EDITIONS_ENTITY_PROPS","EntityProp","sortable","DEFAULT_EDITIONS_FORM_PROPS","FormProp","maxLength","options","concat","plan","DEFAULT_EDITIONS_TOOLBAR_ACTIONS","ToolbarAction","icon","DEFAULT_TENANTS_ENTITY_ACTIONS","hasDefaultConnectionString","impersonatorUserId","ConfigStateService","getDeep","activationEndDate","isActive","isActiveWithTime","isGreaterThanNow","Date","DEFAULT_TENANTS_ENTITY_PROPS","columnWidth","tooltip","valueResolver","localization","LocalizationService","configState","localeId","LOCALE_ID","shortDatePattern","shortTimePattern","result","instant","of","formatDate","replace","DEFAULT_TENANTS_CREATE_FORM_PROPS","disabled","editionEndDate","editionEndDateUtc","getTime","email","formText","autocomplete","getPasswordValidators","defaultValue","DEFAULT_TENANTS_EDIT_FORM_PROPS","slice","DEFAULT_TENANTS_TOOLBAR_ACTIONS","DEFAULT_SAAS_ENTITY_ACTIONS","DEFAULT_SAAS_TOOLBAR_ACTIONS","DEFAULT_SAAS_ENTITY_PROPS","DEFAULT_SAAS_CREATE_FORM_PROPS","DEFAULT_SAAS_EDIT_FORM_PROPS","SAAS_ENTITY_ACTION_CONTRIBUTORS","InjectionToken","SAAS_TOOLBAR_ACTION_CONTRIBUTORS","SAAS_ENTITY_PROP_CONTRIBUTORS","SAAS_CREATE_FORM_PROP_CONTRIBUTORS","SAAS_EDIT_FORM_PROP_CONTRIBUTORS","SaasExtensionsGuard","canActivate","extensions","ExtensionsService","actionContributors","toolbarContributors","propContributors","createFormContributors","editFormContributors","getObjectExtensionEntitiesFromStore","entities","Edition","Tenant","mapEntitiesToContributors","objectExtensionContributors","mergeWithDefaultActions","entityActions","toolbarActions","mergeWithDefaultProps","entityProps","prop","createFormProps","createForm","editFormProps","editForm","saasExtensionsResolver","Injector","map$1","routes","path","redirectTo","pathMatch","component","RouterOutletComponent","authGuard","permissionGuard","resolve","children","ReplaceableRouteContainerComponent","requiredPolicy","replaceableComponent","defaultComponent","SaasRoutingModule","ɵmod","ɵinj","imports","RouterModule","forChild","SaasModule","ngModule","providers","entityActionContributors","toolbarActionContributors","entityPropContributors","createFormPropContributors","editFormPropContributors","forLazy","LazyModuleFactory","CommercialUiModule","NgbDropdownModule","ChartModule","NgbNavModule","NgbPopoverModule","NgbDatepickerModule","NgbTooltipModule","defaultDateFormatRegex"],"sourceRoot":"webpack:///","sources":["./node_modules/@volo/abp.ng.saas/fesm2022/volo-abp.ng.saas-proxy.mjs","./node_modules/@volo/abp.ng.saas/fesm2022/volo-abp.ng.saas.mjs"],"sourcesContent":["import * as i1 from '@abp/ng.core';\nimport { mapEnumToOptions } from '@abp/ng.core';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nvar index$3 = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nclass EditionService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'SaasHost';\n        this.create = (input, config) => this.restService.request({\n            method: 'POST',\n            url: '/api/saas/editions',\n            body: input,\n        }, { apiName: this.apiName, ...config });\n        this.delete = (id, config) => this.restService.request({\n            method: 'DELETE',\n            url: `/api/saas/editions/${id}`,\n        }, { apiName: this.apiName, ...config });\n        this.get = (id, config) => this.restService.request({\n            method: 'GET',\n            url: `/api/saas/editions/${id}`,\n        }, { apiName: this.apiName, ...config });\n        this.getAllList = (config) => this.restService.request({\n            method: 'GET',\n            url: '/api/saas/editions/all',\n        }, { apiName: this.apiName, ...config });\n        this.getList = (input, config) => this.restService.request({\n            method: 'GET',\n            url: '/api/saas/editions',\n            params: {\n                filter: input.filter,\n                sorting: input.sorting,\n                skipCount: input.skipCount,\n                maxResultCount: input.maxResultCount,\n            },\n        }, { apiName: this.apiName, ...config });\n        this.getPlanLookup = (config) => this.restService.request({\n            method: 'GET',\n            url: '/api/saas/editions/plan-lookup',\n        }, { apiName: this.apiName, ...config });\n        this.getUsageStatistics = (config) => this.restService.request({\n            method: 'GET',\n            url: '/api/saas/editions/statistics/usage-statistic',\n        }, { apiName: this.apiName, ...config });\n        this.moveAllTenants = (id, editionId, config) => this.restService.request({\n            method: 'PUT',\n            url: `/api/saas/editions/${id}/move-all-tenants`,\n            params: { editionId },\n        }, { apiName: this.apiName, ...config });\n        this.update = (id, input, config) => this.restService.request({\n            method: 'PUT',\n            url: `/api/saas/editions/${id}`,\n            body: input,\n        }, { apiName: this.apiName, ...config });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: EditionService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: EditionService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: EditionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\nclass SubscriptionService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'SaasHost';\n        this.createSubscription = (editionId, tenantId, config) => this.restService.request({\n            method: 'POST',\n            url: '/api/saas/subscription',\n            params: { editionId, tenantId },\n        }, { apiName: this.apiName, ...config });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SubscriptionService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SubscriptionService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SubscriptionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\nclass TenantService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'SaasHost';\n        this.applyDatabaseMigrations = (id, config) => this.restService.request({\n            method: 'POST',\n            url: `/api/saas/tenants/${id}/apply-database-migrations`,\n        }, { apiName: this.apiName, ...config });\n        this.checkConnectionString = (connectionString, config) => this.restService.request({\n            method: 'GET',\n            url: '/api/saas/tenants/check-connection-string',\n            params: { connectionString },\n        }, { apiName: this.apiName, ...config });\n        this.create = (input, config) => this.restService.request({\n            method: 'POST',\n            url: '/api/saas/tenants',\n            body: input,\n        }, { apiName: this.apiName, ...config });\n        this.delete = (id, config) => this.restService.request({\n            method: 'DELETE',\n            url: `/api/saas/tenants/${id}`,\n        }, { apiName: this.apiName, ...config });\n        this.get = (id, config) => this.restService.request({\n            method: 'GET',\n            url: `/api/saas/tenants/${id}`,\n        }, { apiName: this.apiName, ...config });\n        this.getConnectionStrings = (id, config) => this.restService.request({\n            method: 'GET',\n            url: `/api/saas/tenants/${id}/connection-strings`,\n        }, { apiName: this.apiName, ...config });\n        this.getDatabases = (config) => this.restService.request({\n            method: 'GET',\n            url: '/api/saas/tenants/databases',\n        }, { apiName: this.apiName, ...config });\n        this.getEditionLookup = (config) => this.restService.request({\n            method: 'GET',\n            url: '/api/saas/tenants/lookup/editions',\n        }, { apiName: this.apiName, ...config });\n        this.getList = (input, config) => this.restService.request({\n            method: 'GET',\n            url: '/api/saas/tenants',\n            params: {\n                filter: input.filter,\n                getEditionNames: input.getEditionNames,\n                editionId: input.editionId,\n                expirationDateMin: input.expirationDateMin,\n                expirationDateMax: input.expirationDateMax,\n                activationState: input.activationState,\n                sorting: input.sorting,\n                skipCount: input.skipCount,\n                maxResultCount: input.maxResultCount,\n            },\n        }, { apiName: this.apiName, ...config });\n        this.setPassword = (id, input, config) => this.restService.request({\n            method: 'PUT',\n            url: `/api/saas/tenants/${id}/set-password`,\n            body: input,\n        }, { apiName: this.apiName, ...config });\n        this.update = (id, input, config) => this.restService.request({\n            method: 'PUT',\n            url: `/api/saas/tenants/${id}`,\n            body: input,\n        }, { apiName: this.apiName, ...config });\n        this.updateConnectionStrings = (id, input, config) => this.restService.request({\n            method: 'PUT',\n            url: `/api/saas/tenants/${id}/connection-strings`,\n            body: input,\n        }, { apiName: this.apiName, ...config });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TenantService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TenantService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TenantService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nvar PaymentRequestState;\n(function (PaymentRequestState) {\n    PaymentRequestState[PaymentRequestState[\"Waiting\"] = 0] = \"Waiting\";\n    PaymentRequestState[PaymentRequestState[\"Completed\"] = 1] = \"Completed\";\n    PaymentRequestState[PaymentRequestState[\"Failed\"] = 2] = \"Failed\";\n    PaymentRequestState[PaymentRequestState[\"Refunded\"] = 3] = \"Refunded\";\n})(PaymentRequestState || (PaymentRequestState = {}));\nconst paymentRequestStateOptions = mapEnumToOptions(PaymentRequestState);\n\nvar PaymentType;\n(function (PaymentType) {\n    PaymentType[PaymentType[\"OneTime\"] = 0] = \"OneTime\";\n    PaymentType[PaymentType[\"Subscription\"] = 1] = \"Subscription\";\n})(PaymentType || (PaymentType = {}));\nconst paymentTypeOptions = mapEnumToOptions(PaymentType);\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    get PaymentRequestState () { return PaymentRequestState; },\n    get PaymentType () { return PaymentType; },\n    paymentRequestStateOptions: paymentRequestStateOptions,\n    paymentTypeOptions: paymentTypeOptions\n});\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Plans: index$2,\n    Requests: index$1\n});\n\nvar TenantActivationState;\n(function (TenantActivationState) {\n    TenantActivationState[TenantActivationState[\"Active\"] = 0] = \"Active\";\n    TenantActivationState[TenantActivationState[\"ActiveWithLimitedTime\"] = 1] = \"ActiveWithLimitedTime\";\n    TenantActivationState[TenantActivationState[\"Passive\"] = 2] = \"Passive\";\n})(TenantActivationState || (TenantActivationState = {}));\nconst tenantActivationStateOptions = mapEnumToOptions(TenantActivationState);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { index$3 as Dtos, EditionService, index as Payment, SubscriptionService, TenantActivationState, TenantService, tenantActivationStateOptions };\n","import * as i0 from '@angular/core';\nimport { EventEmitter, signal, computed, inject, DestroyRef, Component, Input, Output, Injectable, ViewChild, LOCALE_ID, InjectionToken, Injector, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule, formatDate } from '@angular/common';\nimport * as i3 from '@abp/ng.theme.shared';\nimport { ThemeSharedModule, ToasterService, ConfirmationService, Confirmation, DateAdapter, getPasswordValidators } from '@abp/ng.theme.shared';\nimport * as i1$1 from '@abp/ng.core';\nimport { TrackByService, CoreModule, ListService, ReplaceableTemplateDirective, LocalizationModule, generatePassword, InternalStore, SubscriptionService, ConfigStateService, LocalizationService, RouterOutletComponent, authGuard, permissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory } from '@abp/ng.core';\nimport * as i2 from '@volo/abp.ng.saas/proxy';\nimport { EditionService, TenantService, tenantActivationStateOptions, TenantActivationState } from '@volo/abp.ng.saas/proxy';\nimport { finalize, filter, tap, firstValueFrom, BehaviorSubject, of, map as map$1 } from 'rxjs';\nimport * as i4$1 from '@angular/forms';\nimport { FormBuilder, ReactiveFormsModule, UntypedFormBuilder, Validators } from '@angular/forms';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport * as i4 from '@ngx-validate/core';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\nimport * as i8 from '@abp/ng.components/extensible';\nimport { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, ExtensibleModule, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps } from '@abp/ng.components/extensible';\nimport { finalize as finalize$1, tap as tap$1, map } from 'rxjs/operators';\nimport * as i5 from '@abp/ng.components/page';\nimport { PageModule } from '@abp/ng.components/page';\nimport * as i7 from '@volo/abp.commercial.ng.ui';\nimport { AdvancedEntityFiltersModule, SHOW_ENTITY_HISTORY, CommercialUiModule } from '@volo/abp.commercial.ng.ui';\nimport * as i7$1 from '@abp/ng.feature-management';\nimport { FeatureManagementModule } from '@abp/ng.feature-management';\nimport * as i11 from '@ng-bootstrap/ng-bootstrap';\nimport { NgbDateAdapter, NgbDropdownModule, NgbNavModule, NgbPopoverModule, NgbDatepickerModule, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\nimport { ImpersonationService } from '@volo/abp.commercial.ng.ui/config';\nimport * as i3$1 from '@abp/ng.components/chart.js';\nimport { getRandomBackgroundColor, ChartComponent, ChartModule } from '@abp/ng.components/chart.js';\nimport * as i1$2 from '@angular/router';\nimport { RouterModule } from '@angular/router';\n\nfunction EditionDeleteValidator() {\n    return (control) => {\n        const assignType = control.get('assignType')?.value;\n        const edition = control.get('edition')?.value;\n        if (!assignType) {\n            return null;\n        }\n        if (assignType && edition) {\n            return null;\n        }\n        return { edition: { required: true } };\n    };\n}\n\nclass EditionDeleteComponent {\n    constructor() {\n        this.visibleChange = new EventEmitter();\n        this.#isSubmitted = signal(false);\n        this.loading = signal(false);\n        this.#editions = signal([]);\n        this.editions = computed(() => this.#editions().filter(e => !this.selected || e.id !== this.selected?.id));\n        this.trackByService = inject(TrackByService);\n        this.trackByFn = this.trackByService.by('id');\n        this.editionService = inject(EditionService);\n        this.fb = inject(FormBuilder);\n        this.destroyRef = inject(DestroyRef);\n        this.form = this.fb.group({\n            assignType: [false],\n            edition: [null],\n        }, {\n            validators: EditionDeleteValidator(),\n        });\n    }\n    #isSubmitted;\n    #editions;\n    get tenantCount() {\n        return this.selected?.tenantCount || 0;\n    }\n    get name() {\n        return this.selected?.displayName || '';\n    }\n    get assignType$() {\n        return this.form.controls['assignType'].valueChanges;\n    }\n    get assignType() {\n        return this.form.controls.assignType;\n    }\n    get edition() {\n        return this.form.controls.edition;\n    }\n    onVisibleChange($event) {\n        this.visibleChange.emit({ visible: $event, refresh: false });\n    }\n    ngOnInit() {\n        this.loading.set(true);\n        this.editionService\n            .getAllList()\n            .pipe(finalize(() => this.loading.set(false)))\n            .subscribe(res => this.#editions.set(res));\n        this.assignType$\n            .pipe(filter(assignType => !assignType), tap(() => this.#isSubmitted.set(false)), takeUntilDestroyed(this.destroyRef))\n            .subscribe();\n    }\n    showAssignErrorMessage() {\n        return (this.assignType.value &&\n            !this.edition.value &&\n            this.form.errors.edition.required &&\n            this.#isSubmitted());\n    }\n    async save() {\n        this.#isSubmitted.set(true);\n        if (this.form.invalid) {\n            return;\n        }\n        this.loading.set(true);\n        const { assignType, edition } = this.form.value;\n        if (assignType) {\n            const moveAllTenants$ = this.editionService.moveAllTenants(this.selected.id, edition);\n            await firstValueFrom(moveAllTenants$);\n        }\n        const delete$ = this.editionService.delete(this.selected.id);\n        await firstValueFrom(delete$);\n        this.loading.set(false);\n        this.visibleChange.emit({ visible: false, refresh: true });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: EditionDeleteComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: EditionDeleteComponent, isStandalone: true, selector: \"abp-edition-delete\", inputs: { visible: \"visible\", selected: \"selected\" }, outputs: { visibleChange: \"visibleChange\" }, ngImport: i0, template: \"<abp-modal\\r\\n  [visible]=\\\"visible\\\"\\r\\n  (visibleChange)=\\\"onVisibleChange($event)\\\"\\r\\n  [suppressUnsavedChangesWarning]=\\\"true\\\"\\r\\n>\\r\\n  <ng-template #abpHeader>\\r\\n    <h5 class=\\\"modal-title\\\">\\r\\n      {{ 'AbpUi::AreYouSure' | abpLocalization }}\\r\\n    </h5>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <p class=\\\"fw-bold\\\">\\r\\n      {{ 'Saas::EditionDeletionConfirmationMessage' | abpLocalization: name }}\\r\\n    </p>\\r\\n    <form [formGroup]=\\\"form\\\" id=\\\"edition-delete-form\\\" (ngSubmit)=\\\"save()\\\">\\r\\n      <ng-container *ngIf=\\\"tenantCount > 0\\\">\\r\\n        <p class=\\\"mt-2\\\">\\r\\n          {{ 'Saas::ChooseAnAction' | abpLocalization: tenantCount }}\\r\\n        </p>\\r\\n\\r\\n        <div class=\\\"form-check mt-2\\\">\\r\\n          <input\\r\\n            class=\\\"form-check-input\\\"\\r\\n            formControlName=\\\"assignType\\\"\\r\\n            type=\\\"radio\\\"\\r\\n            name=\\\"assignType\\\"\\r\\n            id=\\\"unassign\\\"\\r\\n            [value]=\\\"false\\\"\\r\\n          />\\r\\n          <label class=\\\"form-check-label\\\" for=\\\"unassign\\\">{{\\r\\n            'Saas::UnassignTheEditionFromTheTenants' | abpLocalization\\r\\n          }}</label>\\r\\n        </div>\\r\\n        <ng-container *ngIf=\\\"editions().length > 0\\\">\\r\\n          <div class=\\\"form-check mt-2\\\">\\r\\n            <input\\r\\n              class=\\\"form-check-input\\\"\\r\\n              formControlName=\\\"assignType\\\"\\r\\n              type=\\\"radio\\\"\\r\\n              name=\\\"assignType\\\"\\r\\n              id=\\\"assign\\\"\\r\\n              [value]=\\\"true\\\"\\r\\n            />\\r\\n            <label class=\\\"form-check-label\\\" for=\\\"assign\\\">{{\\r\\n              'Saas::AssignTenantsToOtherEdition' | abpLocalization\\r\\n            }}</label>\\r\\n          </div>\\r\\n          <select\\r\\n            class=\\\"form-select mt-2\\\"\\r\\n            *ngIf=\\\"assignType$ | async\\\"\\r\\n            [ngClass]=\\\"{ 'border-danger': showAssignErrorMessage() }\\\"\\r\\n            formControlName=\\\"edition\\\"\\r\\n          >\\r\\n            <option [ngValue]=\\\"null\\\" selected>\\r\\n              {{\\r\\n                (loading() ? 'AbpUi::LoadingWithThreeDot' : 'Saas::SelectAnEditionToAssign')\\r\\n                  | abpLocalization\\r\\n              }}\\r\\n            </option>\\r\\n            <option *ngFor=\\\"let item of editions(); trackBy: trackByFn\\\" [value]=\\\"item.id\\\">\\r\\n              {{ item.displayName }}\\r\\n            </option>\\r\\n          </select>\\r\\n          <span *ngIf=\\\"showAssignErrorMessage()\\\" class=\\\"text-danger\\\">\\r\\n            {{ 'AbpValidation::ThisFieldIsRequired.' | abpLocalization }}\\r\\n          </span>\\r\\n        </ng-container>\\r\\n      </ng-container>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button abpClose type=\\\"button\\\" class=\\\"btn btn-outline-danger\\\">\\r\\n      {{ 'AbpUi::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-danger\\\" [loading]=\\\"loading()\\\" form=\\\"edition-delete-form\\\">\\r\\n      <i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      {{ 'AbpUi::Delete' | abpLocalization }}\\r\\n    </button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\", dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"pipe\", type: i1.AsyncPipe, name: \"async\" }, { kind: \"ngmodule\", type: ThemeSharedModule }, { kind: \"directive\", type: i4.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"directive\", type: i4.ValidationDirective, selector: \"[formControl],[formControlName]\", exportAs: [\"validationDirective\"] }, { kind: \"component\", type: i3.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i3.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"ngmodule\", type: CoreModule }, { kind: \"directive\", type: i4$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4$1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i4$1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { kind: \"directive\", type: i4$1.RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: [\"name\", \"formControlName\", \"value\"] }, { kind: \"directive\", type: i4$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i4$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }, { kind: \"directive\", type: i1$1.FormSubmitDirective, selector: \"form[ngSubmit][formGroup]\", inputs: [\"debounce\", \"notValidateOnSubmit\", \"markAsDirtyWhenSubmit\"], outputs: [\"ngSubmit\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: EditionDeleteComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-edition-delete', standalone: true, imports: [CommonModule, ThemeSharedModule, CoreModule], template: \"<abp-modal\\r\\n  [visible]=\\\"visible\\\"\\r\\n  (visibleChange)=\\\"onVisibleChange($event)\\\"\\r\\n  [suppressUnsavedChangesWarning]=\\\"true\\\"\\r\\n>\\r\\n  <ng-template #abpHeader>\\r\\n    <h5 class=\\\"modal-title\\\">\\r\\n      {{ 'AbpUi::AreYouSure' | abpLocalization }}\\r\\n    </h5>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <p class=\\\"fw-bold\\\">\\r\\n      {{ 'Saas::EditionDeletionConfirmationMessage' | abpLocalization: name }}\\r\\n    </p>\\r\\n    <form [formGroup]=\\\"form\\\" id=\\\"edition-delete-form\\\" (ngSubmit)=\\\"save()\\\">\\r\\n      <ng-container *ngIf=\\\"tenantCount > 0\\\">\\r\\n        <p class=\\\"mt-2\\\">\\r\\n          {{ 'Saas::ChooseAnAction' | abpLocalization: tenantCount }}\\r\\n        </p>\\r\\n\\r\\n        <div class=\\\"form-check mt-2\\\">\\r\\n          <input\\r\\n            class=\\\"form-check-input\\\"\\r\\n            formControlName=\\\"assignType\\\"\\r\\n            type=\\\"radio\\\"\\r\\n            name=\\\"assignType\\\"\\r\\n            id=\\\"unassign\\\"\\r\\n            [value]=\\\"false\\\"\\r\\n          />\\r\\n          <label class=\\\"form-check-label\\\" for=\\\"unassign\\\">{{\\r\\n            'Saas::UnassignTheEditionFromTheTenants' | abpLocalization\\r\\n          }}</label>\\r\\n        </div>\\r\\n        <ng-container *ngIf=\\\"editions().length > 0\\\">\\r\\n          <div class=\\\"form-check mt-2\\\">\\r\\n            <input\\r\\n              class=\\\"form-check-input\\\"\\r\\n              formControlName=\\\"assignType\\\"\\r\\n              type=\\\"radio\\\"\\r\\n              name=\\\"assignType\\\"\\r\\n              id=\\\"assign\\\"\\r\\n              [value]=\\\"true\\\"\\r\\n            />\\r\\n            <label class=\\\"form-check-label\\\" for=\\\"assign\\\">{{\\r\\n              'Saas::AssignTenantsToOtherEdition' | abpLocalization\\r\\n            }}</label>\\r\\n          </div>\\r\\n          <select\\r\\n            class=\\\"form-select mt-2\\\"\\r\\n            *ngIf=\\\"assignType$ | async\\\"\\r\\n            [ngClass]=\\\"{ 'border-danger': showAssignErrorMessage() }\\\"\\r\\n            formControlName=\\\"edition\\\"\\r\\n          >\\r\\n            <option [ngValue]=\\\"null\\\" selected>\\r\\n              {{\\r\\n                (loading() ? 'AbpUi::LoadingWithThreeDot' : 'Saas::SelectAnEditionToAssign')\\r\\n                  | abpLocalization\\r\\n              }}\\r\\n            </option>\\r\\n            <option *ngFor=\\\"let item of editions(); trackBy: trackByFn\\\" [value]=\\\"item.id\\\">\\r\\n              {{ item.displayName }}\\r\\n            </option>\\r\\n          </select>\\r\\n          <span *ngIf=\\\"showAssignErrorMessage()\\\" class=\\\"text-danger\\\">\\r\\n            {{ 'AbpValidation::ThisFieldIsRequired.' | abpLocalization }}\\r\\n          </span>\\r\\n        </ng-container>\\r\\n      </ng-container>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button abpClose type=\\\"button\\\" class=\\\"btn btn-outline-danger\\\">\\r\\n      {{ 'AbpUi::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-danger\\\" [loading]=\\\"loading()\\\" form=\\\"edition-delete-form\\\">\\r\\n      <i class=\\\"fa fa-trash\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      {{ 'AbpUi::Delete' | abpLocalization }}\\r\\n    </button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\" }]\n        }], propDecorators: { visible: [{\n                type: Input,\n                args: [{ required: true }]\n            }], selected: [{\n                type: Input,\n                args: [{ required: true }]\n            }], visibleChange: [{\n                type: Output\n            }] } });\n\nclass MoveAllTenantsComponent {\n    constructor() {\n        this.visibleChange = new EventEmitter();\n        this.loading = signal(false);\n        this.#editions = signal([]);\n        this.editions = computed(() => this.#editions().filter(e => !this.selected || e.id !== this.selected?.id));\n        this.trackByService = inject(TrackByService);\n        this.trackByFn = this.trackByService.by('id');\n        this.editionService = inject(EditionService);\n        this.fb = inject(FormBuilder);\n        this.form = this.fb.group({\n            edition: [''],\n        });\n    }\n    #editions;\n    get name() {\n        return this.selected?.displayName || '';\n    }\n    onVisibleChange($event) {\n        this.visibleChange.emit({ visible: $event, refresh: false });\n    }\n    ngOnInit() {\n        this.loading.set(true);\n        this.editionService\n            .getAllList()\n            .pipe(finalize(() => this.loading.set(false)))\n            .subscribe(res => this.#editions.set(res));\n    }\n    async save() {\n        if (this.form.invalid) {\n            return;\n        }\n        this.loading.set(true);\n        const { edition } = this.form.value;\n        const moveAllTenants$ = this.editionService.moveAllTenants(this.selected.id, edition);\n        await firstValueFrom(moveAllTenants$);\n        this.loading.set(false);\n        this.visibleChange.emit({ visible: false, refresh: true });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MoveAllTenantsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: MoveAllTenantsComponent, isStandalone: true, selector: \"abp-move-all-tenants\", inputs: { visible: \"visible\", selected: \"selected\" }, outputs: { visibleChange: \"visibleChange\" }, ngImport: i0, template: \"<abp-modal [visible]=\\\"visible\\\" (visibleChange)=\\\"onVisibleChange($event)\\\" [suppressUnsavedChangesWarning]=\\\"true\\\">\\r\\n  <ng-template #abpHeader>\\r\\n      <h5 class=\\\"modal-title\\\">\\r\\n        {{'Saas::MoveAllTenants' | abpLocalization}}\\r\\n      </h5>\\r\\n  </ng-template>\\r\\n  <ng-template #abpBody>\\r\\n      <p [innerHTML]=\\\"'Saas::MoveAllTenantsWithEditionTo' | abpLocalization: name\\\"></p>\\r\\n      <form [formGroup]=\\\"form\\\" id=\\\"edition-move-tenants-form\\\" (ngSubmit)=\\\"save()\\\">\\r\\n        <select class=\\\"form-select mt-2\\\" formControlName=\\\"edition\\\">\\r\\n            <option value=\\\"\\\" selected>{{ (loading() ? 'AbpUi::LoadingWithThreeDot': \\\"Saas::UnassignEdition\\\") | abpLocalization}}</option>\\r\\n            <option *ngFor=\\\"let item of editions(); trackBy:trackByFn\\\" [value]=\\\"item.id\\\">{{item.displayName}}</option>\\r\\n        </select>\\r\\n      </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n      <button abpClose type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\">\\r\\n          {{ 'AbpUi::Cancel' | abpLocalization }}\\r\\n      </button>\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [loading]=\\\"loading()\\\"\\r\\n      [disabled]=\\\"form.invalid && form.touched\\\"\\r\\n      form=\\\"edition-move-tenants-form\\\" >\\r\\n          <i class=\\\"fa fa-check me-1\\\" aria-hidden=\\\"true\\\"></i>\\r\\n          {{ 'AbpUi::Save' | abpLocalization }}\\r\\n      </button>\\r\\n  </ng-template>\\r\\n</abp-modal>\", dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"ngmodule\", type: ThemeSharedModule }, { kind: \"directive\", type: i4.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"directive\", type: i4.ValidationDirective, selector: \"[formControl],[formControlName]\", exportAs: [\"validationDirective\"] }, { kind: \"component\", type: i3.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i3.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"ngmodule\", type: CoreModule }, { kind: \"directive\", type: i4$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4$1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { kind: \"directive\", type: i4$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i4$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }, { kind: \"directive\", type: i1$1.FormSubmitDirective, selector: \"form[ngSubmit][formGroup]\", inputs: [\"debounce\", \"notValidateOnSubmit\", \"markAsDirtyWhenSubmit\"], outputs: [\"ngSubmit\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: MoveAllTenantsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-move-all-tenants', standalone: true, imports: [CommonModule, ThemeSharedModule, CoreModule], template: \"<abp-modal [visible]=\\\"visible\\\" (visibleChange)=\\\"onVisibleChange($event)\\\" [suppressUnsavedChangesWarning]=\\\"true\\\">\\r\\n  <ng-template #abpHeader>\\r\\n      <h5 class=\\\"modal-title\\\">\\r\\n        {{'Saas::MoveAllTenants' | abpLocalization}}\\r\\n      </h5>\\r\\n  </ng-template>\\r\\n  <ng-template #abpBody>\\r\\n      <p [innerHTML]=\\\"'Saas::MoveAllTenantsWithEditionTo' | abpLocalization: name\\\"></p>\\r\\n      <form [formGroup]=\\\"form\\\" id=\\\"edition-move-tenants-form\\\" (ngSubmit)=\\\"save()\\\">\\r\\n        <select class=\\\"form-select mt-2\\\" formControlName=\\\"edition\\\">\\r\\n            <option value=\\\"\\\" selected>{{ (loading() ? 'AbpUi::LoadingWithThreeDot': \\\"Saas::UnassignEdition\\\") | abpLocalization}}</option>\\r\\n            <option *ngFor=\\\"let item of editions(); trackBy:trackByFn\\\" [value]=\\\"item.id\\\">{{item.displayName}}</option>\\r\\n        </select>\\r\\n      </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n      <button abpClose type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\">\\r\\n          {{ 'AbpUi::Cancel' | abpLocalization }}\\r\\n      </button>\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [loading]=\\\"loading()\\\"\\r\\n      [disabled]=\\\"form.invalid && form.touched\\\"\\r\\n      form=\\\"edition-move-tenants-form\\\" >\\r\\n          <i class=\\\"fa fa-check me-1\\\" aria-hidden=\\\"true\\\"></i>\\r\\n          {{ 'AbpUi::Save' | abpLocalization }}\\r\\n      </button>\\r\\n  </ng-template>\\r\\n</abp-modal>\" }]\n        }], propDecorators: { visible: [{\n                type: Input,\n                args: [{ required: true }]\n            }], selected: [{\n                type: Input,\n                args: [{ required: true }]\n            }], visibleChange: [{\n                type: Output\n            }] } });\n\nclass EditionsComponent {\n    constructor(list, service, injector, confirmationService, destroyRef) {\n        this.list = list;\n        this.service = service;\n        this.injector = injector;\n        this.confirmationService = confirmationService;\n        this.destroyRef = destroyRef;\n        this.data = { items: [], totalCount: 0 };\n        this.plans$ = new BehaviorSubject([]);\n        this.visibleMove = false;\n        this.isModalVisible = false;\n        this.visibleEditionDelete = false;\n        this.visibleFeatures = false;\n        this.modalBusy = false;\n        this.onVisibleFeaturesChange = (value) => {\n            this.visibleFeatures = value;\n        };\n    }\n    ngOnInit() {\n        this.hookToQuery();\n    }\n    hookToQuery() {\n        this.list.hookToQuery(query => this.service.getList(query)).subscribe(res => (this.data = res));\n    }\n    createEditionForm() {\n        this.getPlanLookup(() => {\n            const data = new FormPropData(this.injector, this.selected);\n            this.editionForm = generateFormFromProps(data);\n        });\n    }\n    onAddEdition() {\n        this.selected = {};\n        this.createEditionForm();\n        this.isModalVisible = true;\n    }\n    onEditEdition(id) {\n        this.service.get(id).subscribe(selectedEdition => {\n            this.selected = selectedEdition;\n            this.createEditionForm();\n            this.isModalVisible = true;\n        });\n    }\n    save() {\n        if (!this.editionForm.valid)\n            return;\n        this.modalBusy = true;\n        const { id } = this.selected;\n        (id\n            ? this.service.update(id, { ...this.selected, ...this.editionForm.value })\n            : this.service.create(this.editionForm.value))\n            .pipe(finalize$1(() => (this.modalBusy = false)))\n            .subscribe(() => {\n            this.list.get();\n            this.isModalVisible = false;\n        });\n    }\n    openFeaturesModal(providerKey) {\n        this.providerKey = providerKey;\n        setTimeout(() => {\n            this.visibleFeatures = true;\n        }, 0);\n    }\n    getPlanLookup(cb) {\n        this.service.getPlanLookup().subscribe(items => {\n            this.plans$.next(items);\n            cb();\n        });\n    }\n    delete(edition) {\n        this.selected = edition;\n        this.visibleEditionDelete = true;\n    }\n    onVisibleDeleteChange(v) {\n        if (v.visible) {\n            return;\n        }\n        if (v.refresh) {\n            this.list.get();\n        }\n        this.selected = null;\n        this.visibleEditionDelete = false;\n    }\n    moveAllTenants(edition) {\n        if (edition.tenantCount === 0) {\n            this.confirmationService\n                .warn('Saas::ThereIsNoTenantsCurrentlyInThisEdition', 'AbpUi::Warning', {\n                hideCancelBtn: true,\n                yesText: 'AbpUi::Ok',\n            })\n                .pipe(takeUntilDestroyed(this.destroyRef))\n                .subscribe();\n            return;\n        }\n        this.selected = edition;\n        this.visibleMove = true;\n    }\n    onVisibleMoveChange(v) {\n        if (v.visible) {\n            return;\n        }\n        if (v.refresh) {\n            this.list.get();\n        }\n        this.selected = null;\n        this.visibleMove = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: EditionsComponent, deps: [{ token: i1$1.ListService }, { token: i2.EditionService }, { token: i0.Injector }, { token: i3.ConfirmationService }, { token: i0.DestroyRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.0.9\", type: EditionsComponent, isStandalone: true, selector: \"abp-editions\", providers: [\n            ListService,\n            {\n                provide: EXTENSIONS_IDENTIFIER,\n                useValue: \"Saas.EditionsComponent\" /* eSaasComponents.Editions */,\n            },\n        ], ngImport: i0, template: \"<abp-page [title]=\\\"'Saas::Editions' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n    <abp-advanced-entity-filters localizationSourceName=\\\"Saas\\\" [list]=\\\"list\\\">\\r\\n    </abp-advanced-entity-filters>\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <abp-extensible-table\\r\\n        [data]=\\\"data.items\\\"\\r\\n        [recordsTotal]=\\\"data.totalCount\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-extensible-table>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\" (disappear)=\\\"createEditionForm()\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ (selected?.id ? 'Saas::Edit' : 'Saas::NewEdition') | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    @if(editionForm){\\r\\n      <form [formGroup]=\\\"editionForm\\\" id=\\\"editionForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n        <div class=\\\"mt-2\\\">\\r\\n          <abp-extensible-form [selectedRecord]=\\\"selected\\\"></abp-extensible-form>\\r\\n        </div>\\r\\n      </form>\\r\\n    }\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button abpClose type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\">\\r\\n      {{ 'Saas::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"editionForm\\\">{{\\r\\n      'AbpIdentity::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\\r\\n<abp-feature-management\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    inputs: {\\r\\n      providerName: { value: 'E' },\\r\\n      providerKey: { value: providerKey },\\r\\n      visible: { value: visibleFeatures, twoWay: true }\\r\\n    },\\r\\n    outputs: { visibleChange: onVisibleFeaturesChange },\\r\\n    componentKey: 'FeatureManagement.FeatureManagementComponent'\\r\\n  }\\\"\\r\\n  [(visible)]=\\\"visibleFeatures\\\"\\r\\n  providerName=\\\"E\\\"\\r\\n  [providerKey]=\\\"providerKey\\\"\\r\\n>\\r\\n</abp-feature-management>\\r\\n\\r\\n@if(visibleEditionDelete){\\r\\n  <abp-edition-delete\\r\\n  [visible]=\\\"visibleEditionDelete\\\" \\r\\n  [selected]=\\\"selected\\\"\\r\\n  (visibleChange)=\\\"onVisibleDeleteChange($event)\\\"\\r\\n  />\\r\\n}\\r\\n\\r\\n@if(visibleMove){\\r\\n  <abp-move-all-tenants\\r\\n  [visible]=\\\"visibleMove\\\" \\r\\n  [selected]=\\\"selected\\\"\\r\\n  (visibleChange)=\\\"onVisibleMoveChange($event)\\\"\\r\\n  />\\r\\n}\", dependencies: [{ kind: \"component\", type: EditionDeleteComponent, selector: \"abp-edition-delete\", inputs: [\"visible\", \"selected\"], outputs: [\"visibleChange\"] }, { kind: \"component\", type: MoveAllTenantsComponent, selector: \"abp-move-all-tenants\", inputs: [\"visible\", \"selected\"], outputs: [\"visibleChange\"] }, { kind: \"ngmodule\", type: NgxValidateCoreModule }, { kind: \"directive\", type: i4.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"ngmodule\", type: PageModule }, { kind: \"component\", type: i5.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"ngmodule\", type: ThemeSharedModule }, { kind: \"component\", type: i3.ButtonComponent, selector: \"abp-button\", inputs: [\"buttonId\", \"buttonClass\", \"buttonType\", \"formName\", \"iconClass\", \"loading\", \"disabled\", \"attributes\"], outputs: [\"click\", \"focus\", \"blur\", \"abpClick\", \"abpFocus\", \"abpBlur\"] }, { kind: \"component\", type: i3.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i3.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"ngmodule\", type: AdvancedEntityFiltersModule }, { kind: \"component\", type: i7.AdvancedEntityFiltersComponent, selector: \"abp-advanced-entity-filters\", inputs: [\"list\", \"localizationSourceName\", \"entityFilterPlaceholder\"] }, { kind: \"ngmodule\", type: FeatureManagementModule }, { kind: \"component\", type: i7$1.FeatureManagementComponent, selector: \"abp-feature-management\", inputs: [\"providerKey\", \"providerName\", \"visible\"], outputs: [\"visibleChange\"], exportAs: [\"abpFeatureManagement\"] }, { kind: \"ngmodule\", type: ExtensibleModule }, { kind: \"component\", type: i8.ExtensibleFormComponent, selector: \"abp-extensible-form\", inputs: [\"selectedRecord\"], exportAs: [\"abpExtensibleForm\"] }, { kind: \"component\", type: i8.ExtensibleTableComponent, selector: \"abp-extensible-table\", inputs: [\"actionsText\", \"data\", \"list\", \"recordsTotal\", \"actionsColumnWidth\", \"actionsTemplate\"], outputs: [\"tableActivate\"], exportAs: [\"abpExtensibleTable\"] }, { kind: \"directive\", type: ReplaceableTemplateDirective, selector: \"[abpReplaceableTemplate]\", inputs: [\"abpReplaceableTemplate\"] }, { kind: \"ngmodule\", type: LocalizationModule }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }, { kind: \"ngmodule\", type: ReactiveFormsModule }, { kind: \"directive\", type: i4$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: EditionsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-editions', standalone: true, imports: [\n                        EditionDeleteComponent,\n                        MoveAllTenantsComponent,\n                        NgxValidateCoreModule,\n                        PageModule,\n                        ThemeSharedModule,\n                        AdvancedEntityFiltersModule,\n                        FeatureManagementModule,\n                        ExtensibleModule,\n                        ReplaceableTemplateDirective,\n                        LocalizationModule,\n                        ReactiveFormsModule,\n                    ], providers: [\n                        ListService,\n                        {\n                            provide: EXTENSIONS_IDENTIFIER,\n                            useValue: \"Saas.EditionsComponent\" /* eSaasComponents.Editions */,\n                        },\n                    ], template: \"<abp-page [title]=\\\"'Saas::Editions' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n    <abp-advanced-entity-filters localizationSourceName=\\\"Saas\\\" [list]=\\\"list\\\">\\r\\n    </abp-advanced-entity-filters>\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <abp-extensible-table\\r\\n        [data]=\\\"data.items\\\"\\r\\n        [recordsTotal]=\\\"data.totalCount\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-extensible-table>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\" (disappear)=\\\"createEditionForm()\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ (selected?.id ? 'Saas::Edit' : 'Saas::NewEdition') | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    @if(editionForm){\\r\\n      <form [formGroup]=\\\"editionForm\\\" id=\\\"editionForm\\\" (ngSubmit)=\\\"save()\\\" validateOnSubmit>\\r\\n        <div class=\\\"mt-2\\\">\\r\\n          <abp-extensible-form [selectedRecord]=\\\"selected\\\"></abp-extensible-form>\\r\\n        </div>\\r\\n      </form>\\r\\n    }\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button abpClose type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\">\\r\\n      {{ 'Saas::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"editionForm\\\">{{\\r\\n      'AbpIdentity::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\\r\\n<abp-feature-management\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    inputs: {\\r\\n      providerName: { value: 'E' },\\r\\n      providerKey: { value: providerKey },\\r\\n      visible: { value: visibleFeatures, twoWay: true }\\r\\n    },\\r\\n    outputs: { visibleChange: onVisibleFeaturesChange },\\r\\n    componentKey: 'FeatureManagement.FeatureManagementComponent'\\r\\n  }\\\"\\r\\n  [(visible)]=\\\"visibleFeatures\\\"\\r\\n  providerName=\\\"E\\\"\\r\\n  [providerKey]=\\\"providerKey\\\"\\r\\n>\\r\\n</abp-feature-management>\\r\\n\\r\\n@if(visibleEditionDelete){\\r\\n  <abp-edition-delete\\r\\n  [visible]=\\\"visibleEditionDelete\\\" \\r\\n  [selected]=\\\"selected\\\"\\r\\n  (visibleChange)=\\\"onVisibleDeleteChange($event)\\\"\\r\\n  />\\r\\n}\\r\\n\\r\\n@if(visibleMove){\\r\\n  <abp-move-all-tenants\\r\\n  [visible]=\\\"visibleMove\\\" \\r\\n  [selected]=\\\"selected\\\"\\r\\n  (visibleChange)=\\\"onVisibleMoveChange($event)\\\"\\r\\n  />\\r\\n}\" }]\n        }], ctorParameters: () => [{ type: i1$1.ListService }, { type: i2.EditionService }, { type: i0.Injector }, { type: i3.ConfirmationService }, { type: i0.DestroyRef }] });\n\nclass ConnectionStringsComponent {\n    constructor() {\n        this.formSubmit = new EventEmitter();\n        this.service = inject(TenantService);\n        this.fb = inject(UntypedFormBuilder);\n        this.toasterService = inject(ToasterService);\n        this.form = this.fb.group({\n            useSharedDatabase: [true],\n            defaultConnectionString: [null],\n        });\n        this.moduleSpecificDatabase = false;\n    }\n    get useSharedDatabase() {\n        return this.form.get('useSharedDatabase');\n    }\n    get defaultConnectionString() {\n        return this.form.get('defaultConnectionString');\n    }\n    ngOnInit() {\n        this.getInitialData();\n    }\n    getInitialData() {\n        this.loading = true;\n        (this.selectedTenant ? this.getConnectionStrings() : this.getDatabases())\n            .pipe(finalize$1(() => (this.loading = false)))\n            .subscribe();\n    }\n    selectFirstDatabase() {\n        this.selectedDatabase = this.databases?.find(db => !db.connectionString);\n    }\n    getDatabases() {\n        return this.service.getDatabases().pipe(tap$1(res => {\n            this.databases = (res.databases || []).map(db => ({\n                id: '',\n                databaseName: db,\n                connectionString: null,\n                extraProperties: null,\n            }));\n            this.selectFirstDatabase();\n        }));\n    }\n    getConnectionStrings() {\n        return this.service.getConnectionStrings(this.selectedTenant.id).pipe(tap$1(res => {\n            this.form.setValue({\n                useSharedDatabase: !res.default && !res.databases.some(db => !!db.connectionString),\n                defaultConnectionString: res.default,\n            });\n            this.databases = res.databases;\n            this.moduleSpecificDatabase = false;\n            this.databases.find(val => {\n                if (val.connectionString) {\n                    this.moduleSpecificDatabase = true;\n                }\n            });\n            this.selectFirstDatabase();\n        }));\n    }\n    onSharedDatabaseChange() {\n        this.defaultConnectionString.setValue(null);\n        this.defaultConnectionString.updateValueAndValidity();\n    }\n    addDatabaseConnectionString() {\n        if (!this.databaseConnectionString)\n            return;\n        const index = this.databases.findIndex(db => db.databaseName === this.selectedDatabase.databaseName);\n        this.databases[index].connectionString = this.databaseConnectionString;\n        this.databaseConnectionString = null;\n        this.selectFirstDatabase();\n    }\n    removeDbConnectionString(i) {\n        this.databases[i].connectionString = null;\n    }\n    getInput() {\n        if (this.useSharedDatabase.value) {\n            return {\n                extraProperties: undefined,\n                id: '',\n                default: null,\n                databases: [],\n            };\n        }\n        return {\n            extraProperties: undefined,\n            id: '',\n            default: this.defaultConnectionString.value,\n            databases: this.databases.filter(db => db.connectionString),\n        };\n    }\n    checkConnectionString(dbConnection) {\n        this.service\n            .checkConnectionString(dbConnection || this.defaultConnectionString.value)\n            .subscribe(res => {\n            if (res) {\n                return this.toasterService.success('Saas::ValidConnectionString');\n            }\n            this.toasterService.error('Saas::InvalidConnectionString');\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ConnectionStringsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.0.9\", type: ConnectionStringsComponent, selector: \"abp-connection-strings\", inputs: { selectedTenant: \"selectedTenant\" }, outputs: { formSubmit: \"formSubmit\" }, ngImport: i0, template: \"<div class=\\\"mt-2\\\">\\r\\n  <ng-container *ngIf=\\\"!loading; else loadingTmp\\\">\\r\\n    <form [formGroup]=\\\"form\\\">\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <div class=\\\"form-check mb-2\\\">\\r\\n          <input\\r\\n            id=\\\"useSharedDatabase\\\"\\r\\n            type=\\\"checkbox\\\"\\r\\n            class=\\\"form-check-input\\\"\\r\\n            formControlName=\\\"useSharedDatabase\\\"\\r\\n            autofocus\\r\\n            (ngModelChange)=\\\"onSharedDatabaseChange()\\\"\\r\\n          />\\r\\n          <label for=\\\"useSharedDatabase\\\" class=\\\"form-check-label\\\">{{\\r\\n            'Saas::DisplayName:UseSharedDatabase' | abpLocalization\\r\\n          }}</label>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row align-items-end mb-3\\\" *ngIf=\\\"!form.get('useSharedDatabase').value\\\">\\r\\n        <div class=\\\"col-md-8\\\">\\r\\n          <label class=\\\"form-label\\\" for=\\\"defaultConnectionString\\\">{{\\r\\n            'Saas::DisplayName:Default' | abpLocalization\\r\\n          }}</label>\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            id=\\\"defaultConnectionString\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            formControlName=\\\"defaultConnectionString\\\"\\r\\n          />\\r\\n        </div>\\r\\n        <div class=\\\"pt-3 col-md-2\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"checkConnectionString()\\\">\\r\\n            {{ 'Saas::CheckConnectionString' | abpLocalization }}\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n    @if (!form.get('useSharedDatabase').value && databases?.length) {\\r\\n    <div class=\\\"mb-3 form-check\\\">\\r\\n      <input\\r\\n        id=\\\"moduleSpecificDatabase\\\"\\r\\n        type=\\\"checkbox\\\"\\r\\n        class=\\\"form-check-input\\\"\\r\\n        [(ngModel)]=\\\"moduleSpecificDatabase\\\"\\r\\n      />\\r\\n      <label for=\\\"moduleSpecificDatabase\\\" class=\\\"form-check-label\\\">\\r\\n        {{ 'Saas::DisplayName:UseSpecificDatabase' | abpLocalization }}\\r\\n      </label>\\r\\n    </div>\\r\\n    <ng-container *ngIf=\\\"databases?.length && moduleSpecificDatabase\\\">\\r\\n      <div class=\\\"row align-items-end\\\">\\r\\n        <div class=\\\"mb-3 col-lg-3\\\">\\r\\n          <div>\\r\\n            <label for=\\\"database-name\\\" class=\\\"form-label\\\">{{\\r\\n              'Saas::DisplayName:DatabaseName' | abpLocalization\\r\\n            }}</label>\\r\\n            <select\\r\\n              class=\\\"form-select form-control\\\"\\r\\n              id=\\\"database-name\\\"\\r\\n              name=\\\"database-name\\\"\\r\\n              [(ngModel)]=\\\"selectedDatabase\\\"\\r\\n            >\\r\\n              <ng-container *ngFor=\\\"let db of databases\\\">\\r\\n                <option *ngIf=\\\"!db.connectionString\\\" [ngValue]=\\\"db\\\">\\r\\n                  {{ db.databaseName }}\\r\\n                </option>\\r\\n              </ng-container>\\r\\n            </select>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"mb-3 col-lg-6\\\">\\r\\n          <div>\\r\\n            <label for=\\\"connection-string\\\" class=\\\"form-label\\\">{{\\r\\n              'Saas::DisplayName:ConnectionString' | abpLocalization\\r\\n            }}</label\\r\\n            ><input\\r\\n              type=\\\"text\\\"\\r\\n              id=\\\"connection-string\\\"\\r\\n              name=\\\"connection-string\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              [(ngModel)]=\\\"databaseConnectionString\\\"\\r\\n              (keyup.enter)=\\\"addDatabaseConnectionString()\\\"\\r\\n            />\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"mb-3 col-lg-3\\\">\\r\\n          <button\\r\\n            type=\\\"button\\\"\\r\\n            class=\\\"btn btn-primary me-1\\\"\\r\\n            (click)=\\\"addDatabaseConnectionString()\\\"\\r\\n          >\\r\\n            {{ 'Saas::AddDatabaseConnectionString' | abpLocalization }}\\r\\n          </button>\\r\\n          <button\\r\\n            class=\\\"btn btn-primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            (click)=\\\"checkConnectionString(databaseConnectionString)\\\"\\r\\n          >\\r\\n            {{ 'Saas::CheckConnectionString' | abpLocalization }}\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-row\\\">\\r\\n        <table class=\\\"table\\\">\\r\\n          <thead>\\r\\n            <tr>\\r\\n              <th>{{ 'Saas::DisplayName:DatabaseName' | abpLocalization }}</th>\\r\\n              <th>{{ 'Saas::DisplayName:ConnectionString' | abpLocalization }}</th>\\r\\n              <th>{{ 'Saas::Actions' | abpLocalization }}</th>\\r\\n            </tr>\\r\\n          </thead>\\r\\n          <tbody>\\r\\n            <ng-container *ngFor=\\\"let db of databases; let i = index\\\">\\r\\n              <tr *ngIf=\\\"db.connectionString\\\">\\r\\n                <td>{{ db.databaseName }}</td>\\r\\n                <td>{{ db.connectionString }}</td>\\r\\n                <td>\\r\\n                  <ng-template #popContent>\\r\\n                    <strong>{{ 'AbpUi::AreYouSure' | abpLocalization }}</strong>\\r\\n\\r\\n                    <hr />\\r\\n                    <div class=\\\"text-end\\\">\\r\\n                      <button class=\\\"btn btn-sm btn-light me-1\\\" (click)=\\\"popover.close()\\\">\\r\\n                        {{ 'AbpUi::Cancel' | abpLocalization }}\\r\\n                      </button>\\r\\n                      <button class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"removeDbConnectionString(i)\\\">\\r\\n                        {{ 'AbpUi::Yes' | abpLocalization }}\\r\\n                      </button>\\r\\n                    </div>\\r\\n                  </ng-template>\\r\\n\\r\\n                  <button\\r\\n                    class=\\\"btn btn-sm btn-danger\\\"\\r\\n                    #popover=\\\"ngbPopover\\\"\\r\\n                    [ngbPopover]=\\\"popContent\\\"\\r\\n                    placement=\\\"left\\\"\\r\\n                  >\\r\\n                    <i class=\\\"fas fa-trash\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                  </button>\\r\\n                </td>\\r\\n              </tr>\\r\\n            </ng-container>\\r\\n          </tbody>\\r\\n        </table>\\r\\n      </div>\\r\\n    </ng-container>\\r\\n    }\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-template #loadingTmp>\\r\\n    <div class=\\\"text-center\\\">\\r\\n      <i class=\\\"fas fa-spinner fa-spin fa-lg\\\" aria-hidden=\\\"true\\\"></i>\\r\\n    </div>\\r\\n  </ng-template>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: i4.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"directive\", type: i4.ValidationDirective, selector: \"[formControl],[formControlName]\", exportAs: [\"validationDirective\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i4$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4$1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i4$1.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { kind: \"directive\", type: i4$1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { kind: \"directive\", type: i4$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4$1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: i4$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i4$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i1$1.AutofocusDirective, selector: \"[autofocus]\", inputs: [\"autofocus\"] }, { kind: \"directive\", type: i11.NgbPopover, selector: \"[ngbPopover]\", inputs: [\"animation\", \"autoClose\", \"ngbPopover\", \"popoverTitle\", \"placement\", \"popperOptions\", \"triggers\", \"positionTarget\", \"container\", \"disablePopover\", \"popoverClass\", \"popoverContext\", \"openDelay\", \"closeDelay\"], outputs: [\"shown\", \"hidden\"], exportAs: [\"ngbPopover\"] }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ConnectionStringsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-connection-strings', template: \"<div class=\\\"mt-2\\\">\\r\\n  <ng-container *ngIf=\\\"!loading; else loadingTmp\\\">\\r\\n    <form [formGroup]=\\\"form\\\">\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <div class=\\\"form-check mb-2\\\">\\r\\n          <input\\r\\n            id=\\\"useSharedDatabase\\\"\\r\\n            type=\\\"checkbox\\\"\\r\\n            class=\\\"form-check-input\\\"\\r\\n            formControlName=\\\"useSharedDatabase\\\"\\r\\n            autofocus\\r\\n            (ngModelChange)=\\\"onSharedDatabaseChange()\\\"\\r\\n          />\\r\\n          <label for=\\\"useSharedDatabase\\\" class=\\\"form-check-label\\\">{{\\r\\n            'Saas::DisplayName:UseSharedDatabase' | abpLocalization\\r\\n          }}</label>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row align-items-end mb-3\\\" *ngIf=\\\"!form.get('useSharedDatabase').value\\\">\\r\\n        <div class=\\\"col-md-8\\\">\\r\\n          <label class=\\\"form-label\\\" for=\\\"defaultConnectionString\\\">{{\\r\\n            'Saas::DisplayName:Default' | abpLocalization\\r\\n          }}</label>\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            id=\\\"defaultConnectionString\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            formControlName=\\\"defaultConnectionString\\\"\\r\\n          />\\r\\n        </div>\\r\\n        <div class=\\\"pt-3 col-md-2\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"checkConnectionString()\\\">\\r\\n            {{ 'Saas::CheckConnectionString' | abpLocalization }}\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n    @if (!form.get('useSharedDatabase').value && databases?.length) {\\r\\n    <div class=\\\"mb-3 form-check\\\">\\r\\n      <input\\r\\n        id=\\\"moduleSpecificDatabase\\\"\\r\\n        type=\\\"checkbox\\\"\\r\\n        class=\\\"form-check-input\\\"\\r\\n        [(ngModel)]=\\\"moduleSpecificDatabase\\\"\\r\\n      />\\r\\n      <label for=\\\"moduleSpecificDatabase\\\" class=\\\"form-check-label\\\">\\r\\n        {{ 'Saas::DisplayName:UseSpecificDatabase' | abpLocalization }}\\r\\n      </label>\\r\\n    </div>\\r\\n    <ng-container *ngIf=\\\"databases?.length && moduleSpecificDatabase\\\">\\r\\n      <div class=\\\"row align-items-end\\\">\\r\\n        <div class=\\\"mb-3 col-lg-3\\\">\\r\\n          <div>\\r\\n            <label for=\\\"database-name\\\" class=\\\"form-label\\\">{{\\r\\n              'Saas::DisplayName:DatabaseName' | abpLocalization\\r\\n            }}</label>\\r\\n            <select\\r\\n              class=\\\"form-select form-control\\\"\\r\\n              id=\\\"database-name\\\"\\r\\n              name=\\\"database-name\\\"\\r\\n              [(ngModel)]=\\\"selectedDatabase\\\"\\r\\n            >\\r\\n              <ng-container *ngFor=\\\"let db of databases\\\">\\r\\n                <option *ngIf=\\\"!db.connectionString\\\" [ngValue]=\\\"db\\\">\\r\\n                  {{ db.databaseName }}\\r\\n                </option>\\r\\n              </ng-container>\\r\\n            </select>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"mb-3 col-lg-6\\\">\\r\\n          <div>\\r\\n            <label for=\\\"connection-string\\\" class=\\\"form-label\\\">{{\\r\\n              'Saas::DisplayName:ConnectionString' | abpLocalization\\r\\n            }}</label\\r\\n            ><input\\r\\n              type=\\\"text\\\"\\r\\n              id=\\\"connection-string\\\"\\r\\n              name=\\\"connection-string\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              [(ngModel)]=\\\"databaseConnectionString\\\"\\r\\n              (keyup.enter)=\\\"addDatabaseConnectionString()\\\"\\r\\n            />\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"mb-3 col-lg-3\\\">\\r\\n          <button\\r\\n            type=\\\"button\\\"\\r\\n            class=\\\"btn btn-primary me-1\\\"\\r\\n            (click)=\\\"addDatabaseConnectionString()\\\"\\r\\n          >\\r\\n            {{ 'Saas::AddDatabaseConnectionString' | abpLocalization }}\\r\\n          </button>\\r\\n          <button\\r\\n            class=\\\"btn btn-primary\\\"\\r\\n            type=\\\"button\\\"\\r\\n            (click)=\\\"checkConnectionString(databaseConnectionString)\\\"\\r\\n          >\\r\\n            {{ 'Saas::CheckConnectionString' | abpLocalization }}\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-row\\\">\\r\\n        <table class=\\\"table\\\">\\r\\n          <thead>\\r\\n            <tr>\\r\\n              <th>{{ 'Saas::DisplayName:DatabaseName' | abpLocalization }}</th>\\r\\n              <th>{{ 'Saas::DisplayName:ConnectionString' | abpLocalization }}</th>\\r\\n              <th>{{ 'Saas::Actions' | abpLocalization }}</th>\\r\\n            </tr>\\r\\n          </thead>\\r\\n          <tbody>\\r\\n            <ng-container *ngFor=\\\"let db of databases; let i = index\\\">\\r\\n              <tr *ngIf=\\\"db.connectionString\\\">\\r\\n                <td>{{ db.databaseName }}</td>\\r\\n                <td>{{ db.connectionString }}</td>\\r\\n                <td>\\r\\n                  <ng-template #popContent>\\r\\n                    <strong>{{ 'AbpUi::AreYouSure' | abpLocalization }}</strong>\\r\\n\\r\\n                    <hr />\\r\\n                    <div class=\\\"text-end\\\">\\r\\n                      <button class=\\\"btn btn-sm btn-light me-1\\\" (click)=\\\"popover.close()\\\">\\r\\n                        {{ 'AbpUi::Cancel' | abpLocalization }}\\r\\n                      </button>\\r\\n                      <button class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"removeDbConnectionString(i)\\\">\\r\\n                        {{ 'AbpUi::Yes' | abpLocalization }}\\r\\n                      </button>\\r\\n                    </div>\\r\\n                  </ng-template>\\r\\n\\r\\n                  <button\\r\\n                    class=\\\"btn btn-sm btn-danger\\\"\\r\\n                    #popover=\\\"ngbPopover\\\"\\r\\n                    [ngbPopover]=\\\"popContent\\\"\\r\\n                    placement=\\\"left\\\"\\r\\n                  >\\r\\n                    <i class=\\\"fas fa-trash\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                  </button>\\r\\n                </td>\\r\\n              </tr>\\r\\n            </ng-container>\\r\\n          </tbody>\\r\\n        </table>\\r\\n      </div>\\r\\n    </ng-container>\\r\\n    }\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-template #loadingTmp>\\r\\n    <div class=\\\"text-center\\\">\\r\\n      <i class=\\\"fas fa-spinner fa-spin fa-lg\\\" aria-hidden=\\\"true\\\"></i>\\r\\n    </div>\\r\\n  </ng-template>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { selectedTenant: [{\n                type: Input\n            }], formSubmit: [{\n                type: Output\n            }] } });\n\nclass SetTenantPasswordModalComponent {\n    constructor(fb, tenantService, toaster) {\n        this.fb = fb;\n        this.tenantService = tenantService;\n        this.toaster = toaster;\n        this.modalVisible = false;\n        this.tenantId = '';\n        this.modalVisibleChange = new EventEmitter();\n        this.fieldTextType = false;\n    }\n    buildForm() {\n        this.form = this.fb.group({\n            adminName: ['admin', [Validators.required]],\n            password: ['', [Validators.required]],\n        });\n    }\n    save(ngForm) {\n        if (this.form.invalid) {\n            return;\n        }\n        const { adminName: username, password } = this.form.value;\n        this.modalBusy = true;\n        this.tenantService\n            .setPassword(this.tenantId, { username, password })\n            .subscribe(() => {\n            this.toaster.success('AbpIdentity::PasswordChangedMessage');\n            ngForm.resetForm();\n            this.modalVisibleChange.emit();\n        })\n            .add(() => (this.modalBusy = false));\n    }\n    onModalVisibleChange(isVisible) {\n        if (isVisible) {\n            return;\n        }\n        this.modalVisibleChange.emit();\n    }\n    ngOnChanges({ modalVisible, tenantName }) {\n        if (modalVisible && modalVisible.currentValue) {\n            this.buildForm();\n        }\n    }\n    generatePassword() {\n        const generatedPassword = generatePassword();\n        this.form.controls.password.setValue(generatedPassword);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SetTenantPasswordModalComponent, deps: [{ token: i4$1.FormBuilder }, { token: i2.TenantService }, { token: i3.ToasterService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: SetTenantPasswordModalComponent, selector: \"abp-set-tenant-password-modal\", inputs: { modalVisible: \"modalVisible\", tenantName: \"tenantName\", tenantId: \"tenantId\" }, outputs: { modalVisibleChange: \"modalVisibleChange\" }, usesOnChanges: true, ngImport: i0, template: \"<abp-modal\\r\\n  [(visible)]=\\\"modalVisible\\\"\\r\\n  [busy]=\\\"modalBusy\\\"\\r\\n  [options]=\\\"{ size: 'md' }\\\"\\r\\n  (visibleChange)=\\\"onModalVisibleChange($event)\\\"\\r\\n>\\r\\n  <ng-template #abpHeader>\\r\\n    <h5>{{ 'AbpIdentity::SetPassword' | abpLocalization }} - {{ tenantName }}</h5>\\r\\n  </ng-template>\\r\\n  <ng-template #abpBody>\\r\\n    <form\\r\\n      *ngIf=\\\"form\\\"\\r\\n      (ngSubmit)=\\\"save(ngForm)\\\"\\r\\n      #ngForm=\\\"ngForm\\\"\\r\\n      id=\\\"setPasswordForm\\\"\\r\\n      [formGroup]=\\\"form\\\"\\r\\n      validateOnSubmit\\r\\n      [markAsDirtyWhenSubmit]=\\\"false\\\"\\r\\n    >\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label for=\\\"adminName\\\" class=\\\"form-label\\\">{{ 'Saas::UserName' | abpLocalization }}</label>\\r\\n        <input\\r\\n          ngbTooltip=\\\"{{ 'Saas::UserNameTooltip' | abpLocalization }}\\\"\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          id=\\\"adminName\\\"\\r\\n          name=\\\"adminName\\\"\\r\\n          formControlName=\\\"adminName\\\"\\r\\n        />\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label for=\\\"password\\\" class=\\\"form-label\\\">{{ 'Saas::Password' | abpLocalization }}</label>\\r\\n        <div class=\\\"input-group\\\" validationStyle validationTarget>\\r\\n          <input\\r\\n            [type]=\\\"fieldTextType ? 'text' : 'password'\\\"\\r\\n            id=\\\"password\\\"\\r\\n            name=\\\"password\\\"\\r\\n            formControlName=\\\"password\\\"\\r\\n            class=\\\"form-control flex-fill\\\"\\r\\n            autofocus\\r\\n          />\\r\\n          <button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"fieldTextType = !fieldTextType\\\">\\r\\n            <i class=\\\"fa fa-eye{{ !fieldTextType ? '-slash' : '' }}\\\"></i>\\r\\n          </button>\\r\\n          <button\\r\\n            style=\\\"border-top-right-radius: 0.5rem; border-bottom-right-radius: 0.5rem\\\"\\r\\n            ngbTooltip=\\\"{{ 'AbpIdentity::GenerateRandomPasswordTooltip' | abpLocalization }}\\\"\\r\\n            class=\\\"btn btn-primary\\\"\\r\\n            id=\\\"generate-random-password-button\\\"\\r\\n            type=\\\"button\\\"\\r\\n            (click)=\\\"generatePassword()\\\"\\r\\n          >\\r\\n            <i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i>\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'Saas::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"setPasswordForm\\\">{{\\r\\n      'Saas::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\", dependencies: [{ kind: \"directive\", type: i4.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"directive\", type: i4.ValidationStyleDirective, selector: \"[validationStyle]\", exportAs: [\"validationStyle\"] }, { kind: \"directive\", type: i4.ValidationTargetDirective, selector: \"[validationTarget]\", exportAs: [\"validationTarget\"] }, { kind: \"directive\", type: i4.ValidationDirective, selector: \"[formControl],[formControlName]\", exportAs: [\"validationDirective\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i4$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i4$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i4$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i1$1.AutofocusDirective, selector: \"[autofocus]\", inputs: [\"autofocus\"] }, { kind: \"directive\", type: i1$1.FormSubmitDirective, selector: \"form[ngSubmit][formGroup]\", inputs: [\"debounce\", \"notValidateOnSubmit\", \"markAsDirtyWhenSubmit\"], outputs: [\"ngSubmit\"] }, { kind: \"component\", type: i3.ButtonComponent, selector: \"abp-button\", inputs: [\"buttonId\", \"buttonClass\", \"buttonType\", \"formName\", \"iconClass\", \"loading\", \"disabled\", \"attributes\"], outputs: [\"click\", \"focus\", \"blur\", \"abpClick\", \"abpFocus\", \"abpBlur\"] }, { kind: \"component\", type: i3.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i3.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"directive\", type: i11.NgbTooltip, selector: \"[ngbTooltip]\", inputs: [\"animation\", \"autoClose\", \"placement\", \"popperOptions\", \"triggers\", \"positionTarget\", \"container\", \"disableTooltip\", \"tooltipClass\", \"tooltipContext\", \"openDelay\", \"closeDelay\", \"ngbTooltip\"], outputs: [\"shown\", \"hidden\"], exportAs: [\"ngbTooltip\"] }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SetTenantPasswordModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-set-tenant-password-modal', template: \"<abp-modal\\r\\n  [(visible)]=\\\"modalVisible\\\"\\r\\n  [busy]=\\\"modalBusy\\\"\\r\\n  [options]=\\\"{ size: 'md' }\\\"\\r\\n  (visibleChange)=\\\"onModalVisibleChange($event)\\\"\\r\\n>\\r\\n  <ng-template #abpHeader>\\r\\n    <h5>{{ 'AbpIdentity::SetPassword' | abpLocalization }} - {{ tenantName }}</h5>\\r\\n  </ng-template>\\r\\n  <ng-template #abpBody>\\r\\n    <form\\r\\n      *ngIf=\\\"form\\\"\\r\\n      (ngSubmit)=\\\"save(ngForm)\\\"\\r\\n      #ngForm=\\\"ngForm\\\"\\r\\n      id=\\\"setPasswordForm\\\"\\r\\n      [formGroup]=\\\"form\\\"\\r\\n      validateOnSubmit\\r\\n      [markAsDirtyWhenSubmit]=\\\"false\\\"\\r\\n    >\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label for=\\\"adminName\\\" class=\\\"form-label\\\">{{ 'Saas::UserName' | abpLocalization }}</label>\\r\\n        <input\\r\\n          ngbTooltip=\\\"{{ 'Saas::UserNameTooltip' | abpLocalization }}\\\"\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          id=\\\"adminName\\\"\\r\\n          name=\\\"adminName\\\"\\r\\n          formControlName=\\\"adminName\\\"\\r\\n        />\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label for=\\\"password\\\" class=\\\"form-label\\\">{{ 'Saas::Password' | abpLocalization }}</label>\\r\\n        <div class=\\\"input-group\\\" validationStyle validationTarget>\\r\\n          <input\\r\\n            [type]=\\\"fieldTextType ? 'text' : 'password'\\\"\\r\\n            id=\\\"password\\\"\\r\\n            name=\\\"password\\\"\\r\\n            formControlName=\\\"password\\\"\\r\\n            class=\\\"form-control flex-fill\\\"\\r\\n            autofocus\\r\\n          />\\r\\n          <button class=\\\"btn btn-secondary\\\" type=\\\"button\\\" (click)=\\\"fieldTextType = !fieldTextType\\\">\\r\\n            <i class=\\\"fa fa-eye{{ !fieldTextType ? '-slash' : '' }}\\\"></i>\\r\\n          </button>\\r\\n          <button\\r\\n            style=\\\"border-top-right-radius: 0.5rem; border-bottom-right-radius: 0.5rem\\\"\\r\\n            ngbTooltip=\\\"{{ 'AbpIdentity::GenerateRandomPasswordTooltip' | abpLocalization }}\\\"\\r\\n            class=\\\"btn btn-primary\\\"\\r\\n            id=\\\"generate-random-password-button\\\"\\r\\n            type=\\\"button\\\"\\r\\n            (click)=\\\"generatePassword()\\\"\\r\\n          >\\r\\n            <i class=\\\"fa fa-refresh\\\" aria-hidden=\\\"true\\\"></i>\\r\\n          </button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" abpClose>\\r\\n      {{ 'Saas::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <abp-button iconClass=\\\"fa fa-check\\\" buttonType=\\\"submit\\\" formName=\\\"setPasswordForm\\\">{{\\r\\n      'Saas::Save' | abpLocalization\\r\\n    }}</abp-button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i4$1.FormBuilder }, { type: i2.TenantService }, { type: i3.ToasterService }], propDecorators: { modalVisible: [{\n                type: Input\n            }], tenantName: [{\n                type: Input\n            }], tenantId: [{\n                type: Input\n            }], modalVisibleChange: [{\n                type: Output\n            }] } });\n\nclass ImpersonateTenantModalService {\n    constructor() {\n        this.store = new InternalStore({\n            tenantId: null,\n            isVisible: undefined,\n        });\n        this.isVisible$ = this.store.sliceState(x => x.isVisible);\n    }\n    get tenantId() {\n        return this.store.state.tenantId;\n    }\n    setTenantId(val) {\n        this.store.patch({ tenantId: val });\n    }\n    setValue(val) {\n        this.store.patch({ isVisible: val });\n    }\n    hide() {\n        this.setValue(false);\n        this.setTenantId(null);\n    }\n    show(tenantId) {\n        this.setValue(true);\n        this.setTenantId(tenantId);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ImpersonateTenantModalService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ImpersonateTenantModalService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ImpersonateTenantModalService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }] });\n\nclass ImpersonateTenantModalComponent {\n    get isVisible$() {\n        return this.service.isVisible$;\n    }\n    constructor() {\n        this.service = inject(ImpersonateTenantModalService);\n        this.fb = inject(FormBuilder);\n        this.impersonationService = inject(ImpersonationService);\n        this.subscription = inject(SubscriptionService);\n        this.confirmation = inject(ConfirmationService);\n        this.defaultTenantUserName = 'admin';\n        this.buildForm();\n    }\n    success() {\n        this.reset();\n    }\n    reset() {\n        this.service.hide();\n        this.form.reset({ tenantUserName: this.defaultTenantUserName });\n    }\n    buildForm() {\n        this.form = this.fb.group({\n            tenantUserName: [this.defaultTenantUserName, [Validators.required]],\n        });\n    }\n    error(response) {\n        const title = response.error.error;\n        const message = response.error.error_description;\n        this.subscription.addOne(this.confirmation.error(message, title, {\n            hideCancelBtn: true,\n            yesText: 'AbpUi::Ok',\n        }));\n        console.error(response.error);\n    }\n    visibleChange(val) {\n        if (val === undefined || val) {\n            return;\n        }\n        this.service.setValue(val);\n        this.reset();\n    }\n    save() {\n        if (this.form.invalid) {\n            return;\n        }\n        const userName = this.form.value.tenantUserName;\n        const tenantId = this.service.tenantId;\n        const sub = this.impersonationService.impersonateTenant(tenantId, userName);\n        this.subscription.addOne(sub, () => this.success(), error => {\n            this.error(error);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ImpersonateTenantModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: ImpersonateTenantModalComponent, selector: \"abp-impersonate-tenant-modal\", providers: [SubscriptionService], ngImport: i0, template: \"<abp-modal [visible]=\\\"isVisible$ | async\\\" (visibleChange)=\\\"visibleChange($event)\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ 'Saas::LoginWithThisTenant' | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form *ngIf=\\\"form\\\" id=\\\"impersonateTenantForm\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"save()\\\">\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label for=\\\"tenantUserName\\\" class=\\\"form-label\\\">\\r\\n          {{ 'Saas::UserName' | abpLocalization }}\\r\\n        </label>\\r\\n        <input\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          name=\\\"tenantUserName\\\"\\r\\n          id=\\\"tenantUserName\\\"\\r\\n          formControlName=\\\"tenantUserName\\\"\\r\\n        />\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n\\r\\n\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" (click)=\\\"visibleChange(false)\\\">\\r\\n      {{ 'Saas::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <button form=\\\"impersonateTenantForm\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\r\\n      {{ 'Saas::Login' | abpLocalization }}\\r\\n    </button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\", dependencies: [{ kind: \"directive\", type: i4.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"directive\", type: i4.ValidationDirective, selector: \"[formControl],[formControlName]\", exportAs: [\"validationDirective\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i4$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4$1.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i4$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i4$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i1$1.FormSubmitDirective, selector: \"form[ngSubmit][formGroup]\", inputs: [\"debounce\", \"notValidateOnSubmit\", \"markAsDirtyWhenSubmit\"], outputs: [\"ngSubmit\"] }, { kind: \"component\", type: i3.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"pipe\", type: i1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: ImpersonateTenantModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-impersonate-tenant-modal', providers: [SubscriptionService], template: \"<abp-modal [visible]=\\\"isVisible$ | async\\\" (visibleChange)=\\\"visibleChange($event)\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ 'Saas::LoginWithThisTenant' | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <form *ngIf=\\\"form\\\" id=\\\"impersonateTenantForm\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"save()\\\">\\r\\n      <div class=\\\"mb-3\\\">\\r\\n        <label for=\\\"tenantUserName\\\" class=\\\"form-label\\\">\\r\\n          {{ 'Saas::UserName' | abpLocalization }}\\r\\n        </label>\\r\\n        <input\\r\\n          type=\\\"text\\\"\\r\\n          class=\\\"form-control\\\"\\r\\n          name=\\\"tenantUserName\\\"\\r\\n          id=\\\"tenantUserName\\\"\\r\\n          formControlName=\\\"tenantUserName\\\"\\r\\n        />\\r\\n      </div>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n\\r\\n\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" (click)=\\\"visibleChange(false)\\\">\\r\\n      {{ 'Saas::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <button form=\\\"impersonateTenantForm\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\r\\n      {{ 'Saas::Login' | abpLocalization }}\\r\\n    </button>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\" }]\n        }], ctorParameters: () => [] });\n\nclass TenantsComponent {\n    get hasSelectedTenant() {\n        return Boolean(this.selected.id);\n    }\n    get isDisabledSaveButton() {\n        if (!this.selectedModalContent) {\n            return false;\n        }\n        const { type } = this.selectedModalContent;\n        const invalid = this.connectionStringsRef?.form.invalid;\n        if (type === 'saveConnStr' && invalid) {\n            return true;\n        }\n        return type === 'saveTenant' && this.tenantForm && this.tenantForm.invalid;\n    }\n    constructor(list, confirmationService, service, fb, injector, toaster, editionService) {\n        this.list = list;\n        this.confirmationService = confirmationService;\n        this.service = service;\n        this.fb = fb;\n        this.injector = injector;\n        this.toaster = toaster;\n        this.editionService = editionService;\n        this.data = { items: [], totalCount: 0 };\n        this.selectedModalContent = {};\n        this.visibleFeatures = false;\n        this.isVisibleSetTenantPasswordModal = false;\n        this.selectedTenantId = '';\n        this.selectedTenantNameForSetTenantPasswordModal = '';\n        this.modalBusy = false;\n        this.emptyOption = { label: '-', value: null };\n        this.connectionStringsReplacementKey = \"Saas.ConnectionStringsComponent\" /* eSaasComponents.ConnectionStrings */;\n        this.setTenantPasswordReplacementKey = \"Saas.SetTenantPasswordComponent\" /* eSaasComponents.SetTenantPassword */;\n        this.activationStateOptions = tenantActivationStateOptions;\n        this.setTenantReplaceableTemplateOptions = null;\n        this.onVisibleFeaturesChange = (value) => {\n            this.visibleFeatures = value;\n        };\n        this.closeSetTenantPasswordModal = () => {\n            this.isVisibleSetTenantPasswordModal = false;\n            this.selectedTenantNameForSetTenantPasswordModal = '';\n            this.selectedTenantId = '';\n            this.setTenantReplaceableTemplateOptions = null;\n        };\n    }\n    ngOnInit() {\n        this.buildForm();\n        this.hookToQuery();\n    }\n    clearFilters() {\n        this.formFilters.reset({ times: {} });\n    }\n    hookToQuery() {\n        this.list\n            .hookToQuery(query => {\n            const value = {\n                ...this.formFilters.value,\n                ...this.formFilters.value.times,\n            };\n            return this.service.getList({ ...query, ...value });\n        })\n            .subscribe(res => (this.data = res));\n    }\n    createTenantForm() {\n        return this.editionService.getList({ maxResultCount: 1000 }).pipe(tap$1(res => {\n            this.editions = res.items;\n            const data = new FormPropData(this.injector, this.selected);\n            this.tenantForm = generateFormFromProps(data);\n            if (!data.record?.editionId) {\n                this.tenantForm.controls.editionId.patchValue(null);\n            }\n        }));\n    }\n    openModal(title, template, type) {\n        this.selectedModalContent = {\n            title,\n            template,\n            type,\n        };\n        this.isModalVisible = true;\n    }\n    onEditConnectionString(tenant) {\n        this.selected = tenant;\n        this.openModal('Saas::ConnectionStrings', this.connectionStringModalTemplate, 'saveConnStr');\n    }\n    onAddTenant() {\n        this.selected = {};\n        this.createTenantForm().subscribe(() => this.openModal('Saas::NewTenant', this.tenantModalTemplate, 'saveTenant'));\n    }\n    onEditTenant(id) {\n        this.service.get(id).subscribe(tenant => {\n            this.selected = tenant;\n            this.createTenantForm().subscribe(() => this.openModal('Saas::Edit', this.tenantModalTemplate, 'saveTenant'));\n        });\n    }\n    save() {\n        const { type } = this.selectedModalContent || {};\n        if (type === 'saveTenant') {\n            this.saveTenant();\n            return;\n        }\n        if (type === 'saveConnStr') {\n            this.saveConnectionString();\n        }\n    }\n    saveConnectionString() {\n        if (this.modalBusy)\n            return;\n        if (this.connectionStringsRef.form.invalid) {\n            return;\n        }\n        this.service\n            .updateConnectionStrings(this.selected.id, this.connectionStringsRef.getInput())\n            .pipe(finalize$1(() => (this.modalBusy = false)))\n            .subscribe(() => {\n            this.isModalVisible = false;\n            this.list.get();\n        });\n    }\n    saveTenant() {\n        if (!this.tenantForm.valid || this.modalBusy) {\n            return;\n        }\n        this.modalBusy = true;\n        const value = {\n            ...this.tenantForm.value,\n            ...(!this.selected.id && { connectionStrings: this.connectionStringsRef.getInput() }),\n        };\n        const { id } = this.selected;\n        (id ? this.service.update(id, { ...this.selected, ...value }) : this.service.create(value))\n            .pipe(finalize$1(() => (this.modalBusy = false)))\n            .subscribe(() => {\n            this.list.get();\n            this.isModalVisible = false;\n        });\n    }\n    delete(id, name) {\n        this.confirmationService\n            .warn('Saas::TenantDeletionConfirmationMessage', 'Saas::AreYouSure', {\n            messageLocalizationParams: [name],\n        })\n            .subscribe((status) => {\n            if (status === Confirmation.Status.confirm) {\n                this.service.delete(id).subscribe(() => this.list.get());\n            }\n        });\n    }\n    onSharedDatabaseChange(value) {\n        if (!value) {\n            setTimeout(() => {\n                const defaultConnectionString = document.getElementById('defaultConnectionString');\n                if (defaultConnectionString) {\n                    defaultConnectionString.focus();\n                }\n            }, 0);\n        }\n    }\n    openFeaturesModal(providerKey) {\n        this.providerKey = providerKey;\n        setTimeout(() => {\n            this.visibleFeatures = true;\n        }, 0);\n    }\n    openSetTenantPasswordModal(id, name) {\n        this.isVisibleSetTenantPasswordModal = true;\n        this.selectedTenantNameForSetTenantPasswordModal = name;\n        this.selectedTenantId = id;\n        this.setTenantReplaceableTemplateOptions = {\n            outputs: { modalVisibleChange: this.closeSetTenantPasswordModal },\n            inputs: {\n                modalVisible: { value: this.isVisibleSetTenantPasswordModal },\n                tenantId: { value: this.selectedTenantId },\n                tenantName: { value: this.selectedTenantNameForSetTenantPasswordModal },\n            },\n            componentKey: this.setTenantPasswordReplacementKey,\n        };\n    }\n    applyDatabaseMigrations(recordId) {\n        this.service.applyDatabaseMigrations(recordId).subscribe(() => this.toaster.info('Saas::DatabaseMigrationQueuedAndWillBeApplied', '', {\n            life: 6000,\n        }));\n    }\n    buildForm() {\n        this.formFilters = this.fb.group({\n            getEditionNames: [null, []],\n            editionId: [null, []],\n            times: [{}],\n            activationState: [null, []],\n        });\n    }\n    getData() {\n        if (this.formFilters.invalid && this.formFilters.touched) {\n            return;\n        }\n        this.list.get();\n    }\n    getEditionLookup() {\n        return () => this.service\n            .getEditionLookup()\n            .pipe(map(items => ({ items })));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TenantsComponent, deps: [{ token: i1$1.ListService }, { token: i3.ConfirmationService }, { token: i2.TenantService }, { token: i4$1.UntypedFormBuilder }, { token: i0.Injector }, { token: i3.ToasterService }, { token: i2.EditionService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: TenantsComponent, selector: \"abp-tenants\", providers: [\n            ListService,\n            {\n                provide: EXTENSIONS_IDENTIFIER,\n                useValue: \"Saas.TenantsComponent\" /* eSaasComponents.Tenants */,\n            },\n            { provide: NgbDateAdapter, useClass: DateAdapter },\n        ], viewQueries: [{ propertyName: \"connectionStringsRef\", first: true, predicate: ConnectionStringsComponent, descendants: true }, { propertyName: \"tenantModalTemplate\", first: true, predicate: [\"tenantModalTemplate\"], descendants: true }, { propertyName: \"connectionStringModalTemplate\", first: true, predicate: [\"connectionStringModalTemplate\"], descendants: true }], ngImport: i0, template: \"<abp-page [title]=\\\"'Saas::Tenants' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n    <abp-advanced-entity-filters [list]=\\\"list\\\" localizationSourceName=\\\"Saas\\\">\\r\\n      <abp-advanced-entity-filters-form>\\r\\n        <form #filterForm [formGroup]=\\\"formFilters\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-12 col-sm-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label class=\\\"form-label\\\" for=\\\"editionIdFilter\\\">\\r\\n                  {{ 'Saas::Edition' | abpLocalization }}\\r\\n                </label>\\r\\n                <abp-lookup-select\\r\\n                  [emptyOption]=\\\"emptyOption\\\"\\r\\n                  cid=\\\"editionIdFilter\\\"\\r\\n                  [getFn]=\\\"getEditionLookup()\\\"\\r\\n                  formControlName=\\\"editionId\\\"\\r\\n                ></abp-lookup-select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-sm-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label\\r\\n                  class=\\\"form-label\\\"\\r\\n                  [ngbTooltip]=\\\"'Saas::EditionEndDateToolTip' | abpLocalization\\\"\\r\\n                >\\r\\n                  {{ 'Saas::DisplayName:ExpirationDate' | abpLocalization }}\\r\\n                  <i class=\\\"fa fa-info-circle\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                </label>\\r\\n                <abp-date-range-picker\\r\\n                  formControlName=\\\"times\\\"\\r\\n                  startDateProp=\\\"expirationDateMin\\\"\\r\\n                  endDateProp=\\\"expirationDateMax\\\"\\r\\n                >\\r\\n                </abp-date-range-picker>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-sm-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label for=\\\"activationState\\\" class=\\\"form-label\\\">{{\\r\\n                  'Saas::DisplayName:ActivationState' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  id=\\\"activationState\\\"\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  formControlName=\\\"activationState\\\"\\r\\n                >\\r\\n                  <option [ngValue]=\\\"null\\\">-</option>\\r\\n                  <option *ngFor=\\\"let data of activationStateOptions\\\" [ngValue]=\\\"data.key\\\">\\r\\n                    {{ 'Saas::Enum:TenantActivationState.' + data.key | abpLocalization }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-sm-auto align-self-end mb-3\\\">\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-6 col-sm-auto d-grid\\\">\\r\\n                  <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" (click)=\\\"clearFilters()\\\">\\r\\n                    <span>{{ 'AbpUi::Clear' | abpLocalization }}</span>\\r\\n                  </button>\\r\\n                </div>\\r\\n                <div class=\\\"col-6 col-sm-auto d-grid\\\">\\r\\n                  <button\\r\\n                    type=\\\"button\\\"\\r\\n                    class=\\\"btn btn-primary\\\"\\r\\n                    [disabled]=\\\"formFilters.invalid\\\"\\r\\n                    (click)=\\\"getData()\\\"\\r\\n                  >\\r\\n                    <span>{{ 'AbpUi::Refresh' | abpLocalization }}</span>\\r\\n                  </button>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </abp-advanced-entity-filters-form>\\r\\n    </abp-advanced-entity-filters>\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <abp-extensible-table\\r\\n        [data]=\\\"data.items\\\"\\r\\n        [recordsTotal]=\\\"data.totalCount\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-extensible-table>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\" [options]=\\\"{ size: 'lg' }\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <ng-container *ngTemplateOutlet=\\\"selectedModalContent?.template\\\"></ng-container>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button abpClose type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\">\\r\\n      {{ 'Saas::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <ng-container [ngSwitch]=\\\"selectedModalContent?.type\\\">\\r\\n      <abp-button\\r\\n        iconClass=\\\"fa fa-check\\\"\\r\\n        buttonType=\\\"submit\\\"\\r\\n        *ngSwitchCase=\\\"'saveTenant'\\\"\\r\\n        formName=\\\"editOrCreateForm\\\"\\r\\n        >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\\r\\n      >\\r\\n      <abp-button\\r\\n        iconClass=\\\"fa fa-check\\\"\\r\\n        *ngSwitchCase=\\\"'saveConnStr'\\\"\\r\\n        [disabled]=\\\"isDisabledSaveButton\\\"\\r\\n        (click)=\\\"save()\\\"\\r\\n        >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\\r\\n      >\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\\r\\n<ng-container *ngIf=\\\"setTenantReplaceableTemplateOptions\\\">\\r\\n  <abp-set-tenant-password-modal\\r\\n    *abpReplaceableTemplate=\\\"setTenantReplaceableTemplateOptions\\\"\\r\\n    [modalVisible]=\\\"isVisibleSetTenantPasswordModal\\\"\\r\\n    [tenantId]=\\\"selectedTenantId\\\"\\r\\n    [tenantName]=\\\"selectedTenantNameForSetTenantPasswordModal\\\"\\r\\n    (modalVisibleChange)=\\\"closeSetTenantPasswordModal()\\\"\\r\\n  >\\r\\n  </abp-set-tenant-password-modal>\\r\\n</ng-container>\\r\\n\\r\\n<ng-template #tenantModalTemplate>\\r\\n  <ng-container *ngTemplateOutlet=\\\"selected?.id ? tenantFormTmp : createTenantTmp\\\"></ng-container>\\r\\n\\r\\n  <ng-template #createTenantTmp>\\r\\n    <ul ngbNav #nav=\\\"ngbNav\\\" [destroyOnHide]=\\\"false\\\" class=\\\"nav-tabs\\\">\\r\\n      <li ngbNavItem>\\r\\n        <a ngbNavLink>{{ 'Saas::TenantBaseInfo' | abpLocalization }}</a>\\r\\n        <ng-template ngbNavContent>\\r\\n          <ng-container *ngTemplateOutlet=\\\"tenantFormTmp\\\"></ng-container>\\r\\n        </ng-template>\\r\\n      </li>\\r\\n      <li ngbNavItem>\\r\\n        <a ngbNavLink>{{ 'Saas::ConnectionStrings' | abpLocalization }}</a>\\r\\n        <ng-template ngbNavContent>\\r\\n          <ng-container *ngTemplateOutlet=\\\"connectionStrings\\\"></ng-container>\\r\\n        </ng-template>\\r\\n      </li>\\r\\n    </ul>\\r\\n\\r\\n    <div [ngbNavOutlet]=\\\"nav\\\"></div>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #tenantFormTmp>\\r\\n    <form\\r\\n      class=\\\"py-2\\\"\\r\\n      id=\\\"editOrCreateForm\\\"\\r\\n      *ngIf=\\\"tenantForm\\\"\\r\\n      [formGroup]=\\\"tenantForm\\\"\\r\\n      (ngSubmit)=\\\"save()\\\"\\r\\n      validateOnSubmit\\r\\n    >\\r\\n      <abp-extensible-form [selectedRecord]=\\\"selected\\\"></abp-extensible-form>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #connectionStrings>\\r\\n    <abp-connection-strings\\r\\n      *abpReplaceableTemplate=\\\"{\\r\\n        outputs: { formSubmit: save },\\r\\n        componentKey: connectionStringsReplacementKey\\r\\n      }\\\"\\r\\n      (formSubmit)=\\\"save()\\\"\\r\\n    ></abp-connection-strings>\\r\\n  </ng-template>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #connectionStringModalTemplate>\\r\\n  <abp-connection-strings\\r\\n    *abpReplaceableTemplate=\\\"{\\r\\n      inputs: {\\r\\n        selectedTenant: { value: selected }\\r\\n      },\\r\\n      outputs: { formSubmit: save },\\r\\n      componentKey: connectionStringsReplacementKey\\r\\n    }\\\"\\r\\n    [selectedTenant]=\\\"selected\\\"\\r\\n    (formSubmit)=\\\"save()\\\"\\r\\n  ></abp-connection-strings>\\r\\n</ng-template>\\r\\n\\r\\n<abp-feature-management\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    inputs: {\\r\\n      providerName: { value: 'T' },\\r\\n      providerKey: { value: providerKey },\\r\\n      visible: { value: visibleFeatures, twoWay: true }\\r\\n    },\\r\\n    outputs: { visibleChange: onVisibleFeaturesChange },\\r\\n    componentKey: 'FeatureManagement.FeatureManagementComponent'\\r\\n  }\\\"\\r\\n  [(visible)]=\\\"visibleFeatures\\\"\\r\\n  providerName=\\\"T\\\"\\r\\n  [providerKey]=\\\"providerKey\\\"\\r\\n>\\r\\n</abp-feature-management>\\r\\n\\r\\n<abp-impersonate-tenant-modal />\\r\\n\", dependencies: [{ kind: \"directive\", type: i4.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"directive\", type: i4.ValidationDirective, selector: \"[formControl],[formControlName]\", exportAs: [\"validationDirective\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i4$1.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i4$1.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i4$1.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { kind: \"directive\", type: i4$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i4$1.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i4$1.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i4$1.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i1$1.FormSubmitDirective, selector: \"form[ngSubmit][formGroup]\", inputs: [\"debounce\", \"notValidateOnSubmit\", \"markAsDirtyWhenSubmit\"], outputs: [\"ngSubmit\"] }, { kind: \"directive\", type: i1$1.ReplaceableTemplateDirective, selector: \"[abpReplaceableTemplate]\", inputs: [\"abpReplaceableTemplate\"] }, { kind: \"component\", type: i7.LookupSelectComponent, selector: \"abp-lookup-select\", inputs: [\"maxResultCount\", \"emptyOption\"] }, { kind: \"component\", type: i7.DateRangePickerComponent, selector: \"abp-date-range-picker\", inputs: [\"startDateProp\", \"endDateProp\", \"labelText\"] }, { kind: \"component\", type: i8.ExtensibleFormComponent, selector: \"abp-extensible-form\", inputs: [\"selectedRecord\"], exportAs: [\"abpExtensibleForm\"] }, { kind: \"component\", type: i8.ExtensibleTableComponent, selector: \"abp-extensible-table\", inputs: [\"actionsText\", \"data\", \"list\", \"recordsTotal\", \"actionsColumnWidth\", \"actionsTemplate\"], outputs: [\"tableActivate\"], exportAs: [\"abpExtensibleTable\"] }, { kind: \"component\", type: i7.AdvancedEntityFiltersComponent, selector: \"abp-advanced-entity-filters\", inputs: [\"list\", \"localizationSourceName\", \"entityFilterPlaceholder\"] }, { kind: \"component\", type: i7.AdvancedEntityFiltersFormComponent, selector: \"abp-advanced-entity-filters-form\" }, { kind: \"component\", type: i3.ButtonComponent, selector: \"abp-button\", inputs: [\"buttonId\", \"buttonClass\", \"buttonType\", \"formName\", \"iconClass\", \"loading\", \"disabled\", \"attributes\"], outputs: [\"click\", \"focus\", \"blur\", \"abpClick\", \"abpFocus\", \"abpBlur\"] }, { kind: \"component\", type: i3.ModalComponent, selector: \"abp-modal\", inputs: [\"visible\", \"busy\", \"options\", \"suppressUnsavedChangesWarning\"], outputs: [\"visibleChange\", \"init\", \"appear\", \"disappear\"] }, { kind: \"directive\", type: i3.ModalCloseDirective, selector: \"[abpClose]\" }, { kind: \"component\", type: i7$1.FeatureManagementComponent, selector: \"abp-feature-management\", inputs: [\"providerKey\", \"providerName\", \"visible\"], outputs: [\"visibleChange\"], exportAs: [\"abpFeatureManagement\"] }, { kind: \"component\", type: i5.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"directive\", type: i11.NgbNavContent, selector: \"ng-template[ngbNavContent]\" }, { kind: \"directive\", type: i11.NgbNav, selector: \"[ngbNav]\", inputs: [\"activeId\", \"animation\", \"destroyOnHide\", \"orientation\", \"roles\", \"keyboard\"], outputs: [\"activeIdChange\", \"shown\", \"hidden\", \"navChange\"], exportAs: [\"ngbNav\"] }, { kind: \"directive\", type: i11.NgbNavItem, selector: \"[ngbNavItem]\", inputs: [\"destroyOnHide\", \"disabled\", \"domId\", \"ngbNavItem\"], outputs: [\"shown\", \"hidden\"], exportAs: [\"ngbNavItem\"] }, { kind: \"directive\", type: i11.NgbNavItemRole, selector: \"[ngbNavItem]:not(ng-container)\" }, { kind: \"directive\", type: i11.NgbNavLink, selector: \"a[ngbNavLink]\" }, { kind: \"directive\", type: i11.NgbNavLinkBase, selector: \"[ngbNavLink]\" }, { kind: \"component\", type: i11.NgbNavOutlet, selector: \"[ngbNavOutlet]\", inputs: [\"paneRole\", \"ngbNavOutlet\"] }, { kind: \"directive\", type: i11.NgbTooltip, selector: \"[ngbTooltip]\", inputs: [\"animation\", \"autoClose\", \"placement\", \"popperOptions\", \"triggers\", \"positionTarget\", \"container\", \"disableTooltip\", \"tooltipClass\", \"tooltipContext\", \"openDelay\", \"closeDelay\", \"ngbTooltip\"], outputs: [\"shown\", \"hidden\"], exportAs: [\"ngbTooltip\"] }, { kind: \"component\", type: ConnectionStringsComponent, selector: \"abp-connection-strings\", inputs: [\"selectedTenant\"], outputs: [\"formSubmit\"] }, { kind: \"component\", type: SetTenantPasswordModalComponent, selector: \"abp-set-tenant-password-modal\", inputs: [\"modalVisible\", \"tenantName\", \"tenantId\"], outputs: [\"modalVisibleChange\"] }, { kind: \"component\", type: ImpersonateTenantModalComponent, selector: \"abp-impersonate-tenant-modal\" }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TenantsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-tenants', providers: [\n                        ListService,\n                        {\n                            provide: EXTENSIONS_IDENTIFIER,\n                            useValue: \"Saas.TenantsComponent\" /* eSaasComponents.Tenants */,\n                        },\n                        { provide: NgbDateAdapter, useClass: DateAdapter },\n                    ], template: \"<abp-page [title]=\\\"'Saas::Tenants' | abpLocalization\\\" [toolbar]=\\\"data.items\\\">\\r\\n  <div id=\\\"wrapper\\\">\\r\\n    <abp-advanced-entity-filters [list]=\\\"list\\\" localizationSourceName=\\\"Saas\\\">\\r\\n      <abp-advanced-entity-filters-form>\\r\\n        <form #filterForm [formGroup]=\\\"formFilters\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-12 col-sm-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label class=\\\"form-label\\\" for=\\\"editionIdFilter\\\">\\r\\n                  {{ 'Saas::Edition' | abpLocalization }}\\r\\n                </label>\\r\\n                <abp-lookup-select\\r\\n                  [emptyOption]=\\\"emptyOption\\\"\\r\\n                  cid=\\\"editionIdFilter\\\"\\r\\n                  [getFn]=\\\"getEditionLookup()\\\"\\r\\n                  formControlName=\\\"editionId\\\"\\r\\n                ></abp-lookup-select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-sm-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label\\r\\n                  class=\\\"form-label\\\"\\r\\n                  [ngbTooltip]=\\\"'Saas::EditionEndDateToolTip' | abpLocalization\\\"\\r\\n                >\\r\\n                  {{ 'Saas::DisplayName:ExpirationDate' | abpLocalization }}\\r\\n                  <i class=\\\"fa fa-info-circle\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                </label>\\r\\n                <abp-date-range-picker\\r\\n                  formControlName=\\\"times\\\"\\r\\n                  startDateProp=\\\"expirationDateMin\\\"\\r\\n                  endDateProp=\\\"expirationDateMax\\\"\\r\\n                >\\r\\n                </abp-date-range-picker>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-sm-3\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label for=\\\"activationState\\\" class=\\\"form-label\\\">{{\\r\\n                  'Saas::DisplayName:ActivationState' | abpLocalization\\r\\n                }}</label>\\r\\n                <select\\r\\n                  id=\\\"activationState\\\"\\r\\n                  class=\\\"form-select form-control\\\"\\r\\n                  formControlName=\\\"activationState\\\"\\r\\n                >\\r\\n                  <option [ngValue]=\\\"null\\\">-</option>\\r\\n                  <option *ngFor=\\\"let data of activationStateOptions\\\" [ngValue]=\\\"data.key\\\">\\r\\n                    {{ 'Saas::Enum:TenantActivationState.' + data.key | abpLocalization }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-12 col-sm-auto align-self-end mb-3\\\">\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-6 col-sm-auto d-grid\\\">\\r\\n                  <button type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\" (click)=\\\"clearFilters()\\\">\\r\\n                    <span>{{ 'AbpUi::Clear' | abpLocalization }}</span>\\r\\n                  </button>\\r\\n                </div>\\r\\n                <div class=\\\"col-6 col-sm-auto d-grid\\\">\\r\\n                  <button\\r\\n                    type=\\\"button\\\"\\r\\n                    class=\\\"btn btn-primary\\\"\\r\\n                    [disabled]=\\\"formFilters.invalid\\\"\\r\\n                    (click)=\\\"getData()\\\"\\r\\n                  >\\r\\n                    <span>{{ 'AbpUi::Refresh' | abpLocalization }}</span>\\r\\n                  </button>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </abp-advanced-entity-filters-form>\\r\\n    </abp-advanced-entity-filters>\\r\\n\\r\\n    <div class=\\\"card\\\">\\r\\n      <abp-extensible-table\\r\\n        [data]=\\\"data.items\\\"\\r\\n        [recordsTotal]=\\\"data.totalCount\\\"\\r\\n        [list]=\\\"list\\\"\\r\\n      ></abp-extensible-table>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\\r\\n<abp-modal [(visible)]=\\\"isModalVisible\\\" [busy]=\\\"modalBusy\\\" [options]=\\\"{ size: 'lg' }\\\">\\r\\n  <ng-template #abpHeader>\\r\\n    <h3>{{ selectedModalContent.title | abpLocalization }}</h3>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpBody>\\r\\n    <ng-container *ngTemplateOutlet=\\\"selectedModalContent?.template\\\"></ng-container>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #abpFooter>\\r\\n    <button abpClose type=\\\"button\\\" class=\\\"btn btn-outline-primary\\\">\\r\\n      {{ 'Saas::Cancel' | abpLocalization }}\\r\\n    </button>\\r\\n    <ng-container [ngSwitch]=\\\"selectedModalContent?.type\\\">\\r\\n      <abp-button\\r\\n        iconClass=\\\"fa fa-check\\\"\\r\\n        buttonType=\\\"submit\\\"\\r\\n        *ngSwitchCase=\\\"'saveTenant'\\\"\\r\\n        formName=\\\"editOrCreateForm\\\"\\r\\n        >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\\r\\n      >\\r\\n      <abp-button\\r\\n        iconClass=\\\"fa fa-check\\\"\\r\\n        *ngSwitchCase=\\\"'saveConnStr'\\\"\\r\\n        [disabled]=\\\"isDisabledSaveButton\\\"\\r\\n        (click)=\\\"save()\\\"\\r\\n        >{{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\\r\\n      >\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n</abp-modal>\\r\\n\\r\\n<ng-container *ngIf=\\\"setTenantReplaceableTemplateOptions\\\">\\r\\n  <abp-set-tenant-password-modal\\r\\n    *abpReplaceableTemplate=\\\"setTenantReplaceableTemplateOptions\\\"\\r\\n    [modalVisible]=\\\"isVisibleSetTenantPasswordModal\\\"\\r\\n    [tenantId]=\\\"selectedTenantId\\\"\\r\\n    [tenantName]=\\\"selectedTenantNameForSetTenantPasswordModal\\\"\\r\\n    (modalVisibleChange)=\\\"closeSetTenantPasswordModal()\\\"\\r\\n  >\\r\\n  </abp-set-tenant-password-modal>\\r\\n</ng-container>\\r\\n\\r\\n<ng-template #tenantModalTemplate>\\r\\n  <ng-container *ngTemplateOutlet=\\\"selected?.id ? tenantFormTmp : createTenantTmp\\\"></ng-container>\\r\\n\\r\\n  <ng-template #createTenantTmp>\\r\\n    <ul ngbNav #nav=\\\"ngbNav\\\" [destroyOnHide]=\\\"false\\\" class=\\\"nav-tabs\\\">\\r\\n      <li ngbNavItem>\\r\\n        <a ngbNavLink>{{ 'Saas::TenantBaseInfo' | abpLocalization }}</a>\\r\\n        <ng-template ngbNavContent>\\r\\n          <ng-container *ngTemplateOutlet=\\\"tenantFormTmp\\\"></ng-container>\\r\\n        </ng-template>\\r\\n      </li>\\r\\n      <li ngbNavItem>\\r\\n        <a ngbNavLink>{{ 'Saas::ConnectionStrings' | abpLocalization }}</a>\\r\\n        <ng-template ngbNavContent>\\r\\n          <ng-container *ngTemplateOutlet=\\\"connectionStrings\\\"></ng-container>\\r\\n        </ng-template>\\r\\n      </li>\\r\\n    </ul>\\r\\n\\r\\n    <div [ngbNavOutlet]=\\\"nav\\\"></div>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #tenantFormTmp>\\r\\n    <form\\r\\n      class=\\\"py-2\\\"\\r\\n      id=\\\"editOrCreateForm\\\"\\r\\n      *ngIf=\\\"tenantForm\\\"\\r\\n      [formGroup]=\\\"tenantForm\\\"\\r\\n      (ngSubmit)=\\\"save()\\\"\\r\\n      validateOnSubmit\\r\\n    >\\r\\n      <abp-extensible-form [selectedRecord]=\\\"selected\\\"></abp-extensible-form>\\r\\n    </form>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #connectionStrings>\\r\\n    <abp-connection-strings\\r\\n      *abpReplaceableTemplate=\\\"{\\r\\n        outputs: { formSubmit: save },\\r\\n        componentKey: connectionStringsReplacementKey\\r\\n      }\\\"\\r\\n      (formSubmit)=\\\"save()\\\"\\r\\n    ></abp-connection-strings>\\r\\n  </ng-template>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #connectionStringModalTemplate>\\r\\n  <abp-connection-strings\\r\\n    *abpReplaceableTemplate=\\\"{\\r\\n      inputs: {\\r\\n        selectedTenant: { value: selected }\\r\\n      },\\r\\n      outputs: { formSubmit: save },\\r\\n      componentKey: connectionStringsReplacementKey\\r\\n    }\\\"\\r\\n    [selectedTenant]=\\\"selected\\\"\\r\\n    (formSubmit)=\\\"save()\\\"\\r\\n  ></abp-connection-strings>\\r\\n</ng-template>\\r\\n\\r\\n<abp-feature-management\\r\\n  *abpReplaceableTemplate=\\\"{\\r\\n    inputs: {\\r\\n      providerName: { value: 'T' },\\r\\n      providerKey: { value: providerKey },\\r\\n      visible: { value: visibleFeatures, twoWay: true }\\r\\n    },\\r\\n    outputs: { visibleChange: onVisibleFeaturesChange },\\r\\n    componentKey: 'FeatureManagement.FeatureManagementComponent'\\r\\n  }\\\"\\r\\n  [(visible)]=\\\"visibleFeatures\\\"\\r\\n  providerName=\\\"T\\\"\\r\\n  [providerKey]=\\\"providerKey\\\"\\r\\n>\\r\\n</abp-feature-management>\\r\\n\\r\\n<abp-impersonate-tenant-modal />\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1$1.ListService }, { type: i3.ConfirmationService }, { type: i2.TenantService }, { type: i4$1.UntypedFormBuilder }, { type: i0.Injector }, { type: i3.ToasterService }, { type: i2.EditionService }], propDecorators: { connectionStringsRef: [{\n                type: ViewChild,\n                args: [ConnectionStringsComponent]\n            }], tenantModalTemplate: [{\n                type: ViewChild,\n                args: ['tenantModalTemplate']\n            }], connectionStringModalTemplate: [{\n                type: ViewChild,\n                args: ['connectionStringModalTemplate']\n            }] } });\n\nclass EditionsUsageWidgetComponent {\n    constructor(permissionService, service) {\n        this.permissionService = permissionService;\n        this.service = service;\n        this.data = {};\n        this.initialized = new BehaviorSubject(this);\n        this.width = 273;\n        this.height = 136;\n        this.chartData = {};\n        this.draw = () => {\n            if (!this.permissionService.getGrantedPolicy('Saas.Editions')) {\n                return;\n            }\n            this.service.getUsageStatistics().subscribe(res => {\n                this.data = res.data;\n                this.setChartData();\n            });\n        };\n    }\n    setChartData() {\n        if (!this.data || JSON.stringify(this.data) === '{}') {\n            this.chartData = {};\n            return;\n        }\n        const dataKeys = Object.keys(this.data);\n        setTimeout(() => {\n            this.chartData = {\n                labels: dataKeys,\n                datasets: [\n                    {\n                        data: dataKeys.map(key => this.data[key]),\n                        backgroundColor: getRandomBackgroundColor(Object.keys(this.data).length),\n                    },\n                ],\n            };\n            this.chart.refresh();\n        }, 0);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: EditionsUsageWidgetComponent, deps: [{ token: i1$1.PermissionService }, { token: i2.EditionService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: EditionsUsageWidgetComponent, selector: \"abp-editions-usage-widget\", inputs: { width: \"width\", height: \"height\" }, outputs: { initialized: \"initialized\" }, providers: [SubscriptionService], viewQueries: [{ propertyName: \"chart\", first: true, predicate: ChartComponent, descendants: true }], ngImport: i0, template: \"<div *abpPermission=\\\"'Saas.Editions'\\\" class=\\\"abp-widget-wrapper\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n      <h5 class=\\\"card-title\\\">{{ 'Saas::EditionUsageStatistics' | abpLocalization }}</h5>\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <abp-chart\\r\\n          #chart\\r\\n          class=\\\"w-100\\\"\\r\\n          type=\\\"pie\\\"\\r\\n          [data]=\\\"chartData\\\"\\r\\n          [width]=\\\"width\\\"\\r\\n          [height]=\\\"height\\\"\\r\\n        ></abp-chart>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1$1.PermissionDirective, selector: \"[abpPermission]\", inputs: [\"abpPermission\", \"abpPermissionRunChangeDetection\"] }, { kind: \"component\", type: i3$1.ChartComponent, selector: \"abp-chart\", inputs: [\"type\", \"data\", \"options\", \"plugins\", \"width\", \"height\", \"responsive\"], outputs: [\"dataSelect\", \"initialized\"], exportAs: [\"abpChart\"] }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: EditionsUsageWidgetComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-editions-usage-widget', providers: [SubscriptionService], template: \"<div *abpPermission=\\\"'Saas.Editions'\\\" class=\\\"abp-widget-wrapper\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n      <h5 class=\\\"card-title\\\">{{ 'Saas::EditionUsageStatistics' | abpLocalization }}</h5>\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <abp-chart\\r\\n          #chart\\r\\n          class=\\\"w-100\\\"\\r\\n          type=\\\"pie\\\"\\r\\n          [data]=\\\"chartData\\\"\\r\\n          [width]=\\\"width\\\"\\r\\n          [height]=\\\"height\\\"\\r\\n        ></abp-chart>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1$1.PermissionService }, { type: i2.EditionService }], propDecorators: { initialized: [{\n                type: Output\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], chart: [{\n                type: ViewChild,\n                args: [ChartComponent]\n            }] } });\n\nclass LatestTenantsWidgetComponent {\n    constructor(service, permissionService) {\n        this.service = service;\n        this.permissionService = permissionService;\n        this.minHeight = 136;\n        this.trackByFn = (_, item) => item.id;\n        this.draw = () => {\n            if (!this.permissionService.getGrantedPolicy('Saas.Tenants')) {\n                return;\n            }\n            this.service\n                .getList({\n                getEditionNames: true,\n                maxResultCount: 6,\n                skipCount: 0,\n                sorting: 'CreationTime desc',\n            })\n                .subscribe(res => (this.data = res.items));\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LatestTenantsWidgetComponent, deps: [{ token: i2.TenantService }, { token: i1$1.PermissionService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: LatestTenantsWidgetComponent, selector: \"abp-latest-tenants-widget\", inputs: { minHeight: \"minHeight\" }, ngImport: i0, template: \"<div\\r\\n  *abpPermission=\\\"'Saas.Tenants'\\\"\\r\\n  class=\\\"abp-widget-wrapper\\\"\\r\\n  data-widget-name=\\\"SaasLatestTenantsWidget\\\"\\r\\n  data-refresh-url=\\\"SaasWidgets/LatestTenants\\\"\\r\\n>\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n      <h5 class=\\\"card-title\\\">{{'Saas::LatestTenants'|abpLocalization}}</h5>\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div [style.min-height.px]=\\\"minHeight\\\">\\r\\n        <table class=\\\"table table-hover table-sm\\\">\\r\\n          <thead>\\r\\n            <tr>\\r\\n              <th>#</th>\\r\\n              <th>{{ 'Saas::Name' | abpLocalization }}</th>\\r\\n              <th>{{ 'Saas::EditionName' | abpLocalization }}</th>\\r\\n            </tr>\\r\\n          </thead>\\r\\n          <tbody>\\r\\n            <tr *ngFor=\\\"let item of data; trackBy: trackByFn; let i = index\\\">\\r\\n              <th>{{ i + 1 }}</th>\\r\\n              <td>{{ item.name }}</td>\\r\\n              <td>{{ item.editionName }}</td>\\r\\n            </tr>\\r\\n          </tbody>\\r\\n        </table>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1$1.PermissionDirective, selector: \"[abpPermission]\", inputs: [\"abpPermission\", \"abpPermissionRunChangeDetection\"] }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: LatestTenantsWidgetComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-latest-tenants-widget', template: \"<div\\r\\n  *abpPermission=\\\"'Saas.Tenants'\\\"\\r\\n  class=\\\"abp-widget-wrapper\\\"\\r\\n  data-widget-name=\\\"SaasLatestTenantsWidget\\\"\\r\\n  data-refresh-url=\\\"SaasWidgets/LatestTenants\\\"\\r\\n>\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n      <h5 class=\\\"card-title\\\">{{'Saas::LatestTenants'|abpLocalization}}</h5>\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div [style.min-height.px]=\\\"minHeight\\\">\\r\\n        <table class=\\\"table table-hover table-sm\\\">\\r\\n          <thead>\\r\\n            <tr>\\r\\n              <th>#</th>\\r\\n              <th>{{ 'Saas::Name' | abpLocalization }}</th>\\r\\n              <th>{{ 'Saas::EditionName' | abpLocalization }}</th>\\r\\n            </tr>\\r\\n          </thead>\\r\\n          <tbody>\\r\\n            <tr *ngFor=\\\"let item of data; trackBy: trackByFn; let i = index\\\">\\r\\n              <th>{{ i + 1 }}</th>\\r\\n              <td>{{ item.name }}</td>\\r\\n              <td>{{ item.editionName }}</td>\\r\\n            </tr>\\r\\n          </tbody>\\r\\n        </table>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i2.TenantService }, { type: i1$1.PermissionService }], propDecorators: { minHeight: [{\n                type: Input\n            }] } });\n\nconst DEFAULT_EDITIONS_ENTITY_ACTIONS = EntityAction.createMany([\n    {\n        text: 'Saas::Edit',\n        action: data => {\n            const component = data.getInjected(EditionsComponent);\n            component.onEditEdition(data.record.id);\n        },\n        permission: 'Saas.Editions.Update',\n    },\n    {\n        text: 'Saas::Features',\n        action: data => {\n            const component = data.getInjected(EditionsComponent);\n            component.openFeaturesModal(data.record.id);\n        },\n        permission: 'Saas.Editions.ManageFeatures',\n    },\n    {\n        text: 'Saas::ChangeHistory',\n        action: data => {\n            const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);\n            showHistory(data.record.id, 'Volo.Saas.Editions.Edition');\n        },\n        permission: 'AuditLogging.ViewChangeHistory:Volo.Saas.Edition',\n        visible: data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)),\n    },\n    {\n        text: 'Saas::Delete',\n        action: data => {\n            const component = data.getInjected(EditionsComponent);\n            component.delete(data.record);\n        },\n        permission: 'Saas.Editions.Delete',\n    },\n    {\n        text: 'Saas::MoveAllTenants',\n        action: data => {\n            const component = data.getInjected(EditionsComponent);\n            component.moveAllTenants(data.record);\n        },\n        permission: 'Saas.Tenants.Update',\n    },\n]);\n\nconst DEFAULT_EDITIONS_ENTITY_PROPS = EntityProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'displayName',\n        displayName: 'Saas::EditionName',\n        sortable: true,\n    },\n    {\n        type: \"number\" /* ePropType.Number */,\n        name: 'tenantCount',\n        displayName: 'Saas::TenantCount',\n    },\n]);\n\nconst DEFAULT_EDITIONS_FORM_PROPS = FormProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'displayName',\n        displayName: 'Saas::EditionName',\n        validators: () => [Validators.required, Validators.maxLength(256)],\n    },\n    {\n        type: \"enum\" /* ePropType.Enum */,\n        name: 'planId',\n        displayName: 'Saas::PlanId',\n        visible: data => {\n            const editionComponent = data.getInjected(EditionsComponent);\n            return !!editionComponent.plans$.value.length;\n        },\n        options: data => {\n            const editionComponent = data.getInjected(EditionsComponent);\n            return editionComponent.plans$.pipe(map(options => [{ key: '-', value: null }].concat(options.map(plan => ({\n                key: plan.name,\n                value: plan.id,\n            })))));\n        },\n    },\n]);\n\nconst DEFAULT_EDITIONS_TOOLBAR_ACTIONS = ToolbarAction.createMany([\n    {\n        text: 'Saas::NewEdition',\n        action: data => {\n            const component = data.getInjected(EditionsComponent);\n            component.onAddEdition();\n        },\n        permission: 'Saas.Editions.Create',\n        icon: 'fa fa-plus',\n    },\n]);\n\nconst DEFAULT_TENANTS_ENTITY_ACTIONS = EntityAction.createMany([\n    {\n        text: 'Saas::Edit',\n        action: data => {\n            const component = data.getInjected(TenantsComponent);\n            component.onEditTenant(data.record.id);\n        },\n        permission: 'Saas.Tenants.Update',\n    },\n    {\n        text: 'Saas::ConnectionStrings',\n        action: data => {\n            const component = data.getInjected(TenantsComponent);\n            component.onEditConnectionString(data.record);\n        },\n        permission: 'Saas.Tenants.ManageConnectionStrings',\n    },\n    {\n        text: 'Saas::ApplyDatabaseMigrations',\n        action: data => {\n            const component = data.getInjected(TenantsComponent);\n            component.applyDatabaseMigrations(data.record.id);\n        },\n        permission: 'Saas.Tenants.ManageConnectionStrings',\n        visible: data => data.record.hasDefaultConnectionString,\n    },\n    {\n        text: 'Saas::Features',\n        action: data => {\n            const component = data.getInjected(TenantsComponent);\n            component.openFeaturesModal(data.record.id);\n        },\n        permission: 'Saas.Tenants.ManageFeatures',\n    },\n    {\n        text: 'Saas::ChangeHistory',\n        action: data => {\n            const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);\n            showHistory(data.record.id, 'Volo.Saas.Tenants.Tenant');\n        },\n        permission: 'AuditLogging.ViewChangeHistory:Volo.Saas.Tenant',\n        visible: data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)),\n    },\n    {\n        text: 'Saas::LoginWithThisTenant',\n        action: data => {\n            const impersonateTenantModalService = data.getInjected(ImpersonateTenantModalService);\n            impersonateTenantModalService.show(data.record.id);\n        },\n        permission: 'Saas.Tenants.Impersonation',\n        visible: data => {\n            const configState = data.getInjected(ConfigStateService);\n            const impersonatorUserId = configState.getDeep('currentUser.impersonatorUserId');\n            const { activationState, activationEndDate } = data.record || {};\n            const isActive = activationState == TenantActivationState.Active;\n            const isActiveWithTime = activationState == TenantActivationState.ActiveWithLimitedTime;\n            const isGreaterThanNow = new Date(activationEndDate) > new Date();\n            const isImpersonatorExits = impersonatorUserId === null;\n            return (isActive || (isActiveWithTime && isGreaterThanNow)) && isImpersonatorExits;\n        },\n    },\n    {\n        text: 'Saas::ChangePassword',\n        action: data => {\n            const component = data.getInjected(TenantsComponent);\n            component.openSetTenantPasswordModal(data.record.id, data.record.name);\n        },\n        permission: 'Saas.Tenants.SetPassword',\n    },\n    {\n        text: 'Saas::Delete',\n        action: data => {\n            const component = data.getInjected(TenantsComponent);\n            component.delete(data.record.id, data.record.name);\n        },\n        permission: 'Saas.Tenants.Delete',\n    },\n]);\n\nconst DEFAULT_TENANTS_ENTITY_PROPS = EntityProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'name',\n        displayName: 'Saas::TenantName',\n        sortable: true,\n        columnWidth: 300,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'editionName',\n        displayName: 'Saas::EditionName',\n        columnWidth: 300,\n    },\n    {\n        type: \"datetime\" /* ePropType.DateTime */,\n        name: 'editionEndDateUtc',\n        displayName: 'Saas::EditionEndDateUtc',\n        columnWidth: 300,\n        tooltip: 'Saas::EditionEndDateToolTip',\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'activationState',\n        displayName: 'Saas::ActivationState',\n        columnWidth: 300,\n        valueResolver: data => {\n            const localization = data.getInjected(LocalizationService);\n            const configState = data.getInjected(ConfigStateService);\n            const localeId = data.getInjected(LOCALE_ID);\n            const { shortDatePattern, shortTimePattern } = configState.getDeep('localization.currentCulture.dateTimeFormat');\n            let result = '';\n            switch (data.record.activationState) {\n                case TenantActivationState.Active:\n                    result = localization.instant('Saas::Enum:TenantActivationState.Active');\n                    return of(result);\n                case TenantActivationState.ActiveWithLimitedTime:\n                    result = `${localization.instant('Saas::Enum:TenantActivationState.ActiveWithLimitedTime')} (${formatDate(data.record.activationEndDate, `${shortDatePattern} ${shortTimePattern.replace('tt', 'a')}`, localeId)})`;\n                    return of(result);\n                case TenantActivationState.Passive:\n                    result = localization.instant('Saas::Enum:TenantActivationState.Passive');\n                    return of(result);\n            }\n        },\n    },\n]);\n\nconst DEFAULT_TENANTS_CREATE_FORM_PROPS = FormProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'name',\n        id: 'name',\n        displayName: 'Saas::TenantName',\n        validators: () => [Validators.required, Validators.maxLength(256)],\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'editionId',\n        displayName: 'Saas::Edition',\n        id: 'edition',\n        disabled: data => {\n            const editionEndDate = data.record.editionEndDateUtc;\n            const subscriptionExpired = editionEndDate && new Date(editionEndDate).getTime() < new Date().getTime();\n            return subscriptionExpired;\n        },\n        options: data => {\n            const editions = data.getInjected(TenantsComponent).editions;\n            const localization = data.getInjected(LocalizationService);\n            const emptyOption = {\n                value: null,\n                key: localization.instant('AbpUi::NotAssigned'),\n            };\n            return of([\n                emptyOption,\n                ...editions.map(edition => ({\n                    key: edition.displayName,\n                    value: edition.id,\n                })),\n            ]);\n        },\n    },\n    {\n        type: \"email\" /* ePropType.Email */,\n        name: 'adminEmailAddress',\n        displayName: 'Saas::DisplayName:AdminEmailAddress',\n        id: 'admin-email-address',\n        validators: () => [Validators.required, Validators.maxLength(256), Validators.email],\n        formText: 'Saas::DisplayName:AdminEmailAddressFormText',\n    },\n    {\n        type: \"passwordinputgroup\" /* ePropType.PasswordInputGroup */,\n        name: 'adminPassword',\n        displayName: 'Saas::DisplayName:AdminPassword',\n        id: 'admin-password',\n        autocomplete: 'new-password',\n        validators: data => [Validators.required, ...getPasswordValidators({ get: data.getInjected })],\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'activationState',\n        displayName: 'Saas::DisplayName:ActivationState',\n        id: 'activation-state',\n        validators: () => [Validators.required],\n        defaultValue: TenantActivationState.Active,\n        options: data => {\n            const localization = data.getInjected(LocalizationService);\n            return of([\n                {\n                    key: localization.instant('Saas::Enum:TenantActivationState.Active'),\n                    value: TenantActivationState.Active,\n                },\n                {\n                    key: localization.instant('Saas::Enum:TenantActivationState.ActiveWithLimitedTime'),\n                    value: TenantActivationState.ActiveWithLimitedTime,\n                },\n                {\n                    key: localization.instant('Saas::Enum:TenantActivationState.Passive'),\n                    value: TenantActivationState.Passive,\n                },\n            ]);\n        },\n    },\n    {\n        type: \"datetime\" /* ePropType.DateTime */,\n        name: 'activationEndDate',\n        displayName: 'Saas::DisplayName:ActivationEndDate',\n        id: 'activation-end-date',\n        visible: data => {\n            const { tenantForm } = data.getInjected(TenantsComponent);\n            return (tenantForm.get('activationState').value === TenantActivationState.ActiveWithLimitedTime);\n        },\n    },\n]);\nconst DEFAULT_TENANTS_EDIT_FORM_PROPS = [\n    ...DEFAULT_TENANTS_CREATE_FORM_PROPS.slice(0, 2),\n    ...DEFAULT_TENANTS_CREATE_FORM_PROPS.slice(-2),\n];\n\nconst DEFAULT_TENANTS_TOOLBAR_ACTIONS = ToolbarAction.createMany([\n    {\n        text: 'Saas::NewTenant',\n        action: data => {\n            const component = data.getInjected(TenantsComponent);\n            component.onAddTenant();\n        },\n        permission: 'Saas.Tenants.Create',\n        icon: 'fa fa-plus',\n    },\n]);\n\nconst DEFAULT_SAAS_ENTITY_ACTIONS = {\n    [\"Saas.EditionsComponent\" /* eSaasComponents.Editions */]: DEFAULT_EDITIONS_ENTITY_ACTIONS,\n    [\"Saas.TenantsComponent\" /* eSaasComponents.Tenants */]: DEFAULT_TENANTS_ENTITY_ACTIONS,\n};\nconst DEFAULT_SAAS_TOOLBAR_ACTIONS = {\n    [\"Saas.EditionsComponent\" /* eSaasComponents.Editions */]: DEFAULT_EDITIONS_TOOLBAR_ACTIONS,\n    [\"Saas.TenantsComponent\" /* eSaasComponents.Tenants */]: DEFAULT_TENANTS_TOOLBAR_ACTIONS,\n};\nconst DEFAULT_SAAS_ENTITY_PROPS = {\n    [\"Saas.EditionsComponent\" /* eSaasComponents.Editions */]: DEFAULT_EDITIONS_ENTITY_PROPS,\n    [\"Saas.TenantsComponent\" /* eSaasComponents.Tenants */]: DEFAULT_TENANTS_ENTITY_PROPS,\n};\nconst DEFAULT_SAAS_CREATE_FORM_PROPS = {\n    [\"Saas.EditionsComponent\" /* eSaasComponents.Editions */]: DEFAULT_EDITIONS_FORM_PROPS,\n    [\"Saas.TenantsComponent\" /* eSaasComponents.Tenants */]: DEFAULT_TENANTS_CREATE_FORM_PROPS,\n};\nconst DEFAULT_SAAS_EDIT_FORM_PROPS = {\n    [\"Saas.EditionsComponent\" /* eSaasComponents.Editions */]: DEFAULT_EDITIONS_FORM_PROPS,\n    [\"Saas.TenantsComponent\" /* eSaasComponents.Tenants */]: DEFAULT_TENANTS_EDIT_FORM_PROPS,\n};\nconst SAAS_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('SAAS_ENTITY_ACTION_CONTRIBUTORS');\nconst SAAS_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('SAAS_TOOLBAR_ACTION_CONTRIBUTORS');\nconst SAAS_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('SAAS_ENTITY_PROP_CONTRIBUTORS');\nconst SAAS_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('SAAS_CREATE_FORM_PROP_CONTRIBUTORS');\nconst SAAS_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('SAAS_EDIT_FORM_PROP_CONTRIBUTORS');\n\n/**\n * @deprecated Use `saasExtensionsResolver` *function* instead.\n */\nclass SaasExtensionsGuard {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    canActivate() {\n        const extensions = this.injector.get(ExtensionsService);\n        const actionContributors = this.injector.get(SAAS_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n        const toolbarContributors = this.injector.get(SAAS_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n        const propContributors = this.injector.get(SAAS_ENTITY_PROP_CONTRIBUTORS, null) || {};\n        const createFormContributors = this.injector.get(SAAS_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};\n        const editFormContributors = this.injector.get(SAAS_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};\n        const configState = this.injector.get(ConfigStateService);\n        return getObjectExtensionEntitiesFromStore(configState, 'Saas').pipe(map(entities => ({\n            [\"Saas.EditionsComponent\" /* eSaasComponents.Editions */]: entities.Edition,\n            [\"Saas.TenantsComponent\" /* eSaasComponents.Tenants */]: entities.Tenant,\n        })), mapEntitiesToContributors(configState, 'Saas'), tap$1(objectExtensionContributors => {\n            mergeWithDefaultActions(extensions.entityActions, DEFAULT_SAAS_ENTITY_ACTIONS, actionContributors);\n            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_SAAS_TOOLBAR_ACTIONS, toolbarContributors);\n            mergeWithDefaultProps(extensions.entityProps, DEFAULT_SAAS_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_SAAS_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);\n            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_SAAS_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);\n        }), map(() => true));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasExtensionsGuard, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasExtensionsGuard }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasExtensionsGuard, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.Injector }] });\n\nconst saasExtensionsResolver = () => {\n    const injector = inject(Injector);\n    const extensions = injector.get(ExtensionsService);\n    const actionContributors = injector.get(SAAS_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n    const toolbarContributors = injector.get(SAAS_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n    const propContributors = injector.get(SAAS_ENTITY_PROP_CONTRIBUTORS, null) || {};\n    const createFormContributors = injector.get(SAAS_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};\n    const editFormContributors = injector.get(SAAS_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};\n    const configState = injector.get(ConfigStateService);\n    return getObjectExtensionEntitiesFromStore(configState, 'Saas').pipe(map$1(entities => ({\n        [\"Saas.EditionsComponent\" /* eSaasComponents.Editions */]: entities.Edition,\n        [\"Saas.TenantsComponent\" /* eSaasComponents.Tenants */]: entities.Tenant,\n    })), mapEntitiesToContributors(configState, 'Saas'), tap(objectExtensionContributors => {\n        mergeWithDefaultActions(extensions.entityActions, DEFAULT_SAAS_ENTITY_ACTIONS, actionContributors);\n        mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_SAAS_TOOLBAR_ACTIONS, toolbarContributors);\n        mergeWithDefaultProps(extensions.entityProps, DEFAULT_SAAS_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n        mergeWithDefaultProps(extensions.createFormProps, DEFAULT_SAAS_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);\n        mergeWithDefaultProps(extensions.editFormProps, DEFAULT_SAAS_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);\n    }));\n};\n\nconst routes = [\n    { path: '', redirectTo: 'tenants', pathMatch: 'full' },\n    {\n        path: '',\n        component: RouterOutletComponent,\n        canActivate: [authGuard, permissionGuard],\n        resolve: [saasExtensionsResolver],\n        children: [\n            {\n                path: 'tenants',\n                component: ReplaceableRouteContainerComponent,\n                data: {\n                    requiredPolicy: 'Saas.Tenants',\n                    replaceableComponent: {\n                        key: \"Saas.TenantsComponent\" /* eSaasComponents.Tenants */,\n                        defaultComponent: TenantsComponent,\n                    },\n                },\n            },\n            {\n                path: 'editions',\n                component: ReplaceableRouteContainerComponent,\n                data: {\n                    requiredPolicy: 'Saas.Editions',\n                    replaceableComponent: {\n                        key: \"Saas.EditionsComponent\" /* eSaasComponents.Editions */,\n                        defaultComponent: EditionsComponent,\n                    },\n                },\n            },\n        ],\n    },\n];\nclass SaasRoutingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasRoutingModule, imports: [i1$2.RouterModule], exports: [RouterModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasRoutingModule, imports: [RouterModule.forChild(routes), RouterModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasRoutingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RouterModule.forChild(routes)],\n                    exports: [RouterModule],\n                }]\n        }] });\n\nconst declarationsAndExports = [\n    EditionsUsageWidgetComponent,\n    LatestTenantsWidgetComponent,\n    ConnectionStringsComponent,\n    SetTenantPasswordModalComponent,\n    TenantsComponent,\n    ImpersonateTenantModalComponent,\n];\nclass SaasModule {\n    static forChild(options = {}) {\n        return {\n            ngModule: SaasModule,\n            providers: [\n                {\n                    provide: SAAS_ENTITY_ACTION_CONTRIBUTORS,\n                    useValue: options.entityActionContributors,\n                },\n                {\n                    provide: SAAS_TOOLBAR_ACTION_CONTRIBUTORS,\n                    useValue: options.toolbarActionContributors,\n                },\n                {\n                    provide: SAAS_ENTITY_PROP_CONTRIBUTORS,\n                    useValue: options.entityPropContributors,\n                },\n                {\n                    provide: SAAS_CREATE_FORM_PROP_CONTRIBUTORS,\n                    useValue: options.createFormPropContributors,\n                },\n                {\n                    provide: SAAS_EDIT_FORM_PROP_CONTRIBUTORS,\n                    useValue: options.editFormPropContributors,\n                },\n            ],\n        };\n    }\n    static forLazy(options = {}) {\n        return new LazyModuleFactory(SaasModule.forChild(options));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasModule, declarations: [EditionsUsageWidgetComponent,\n            LatestTenantsWidgetComponent,\n            ConnectionStringsComponent,\n            SetTenantPasswordModalComponent,\n            TenantsComponent,\n            ImpersonateTenantModalComponent], imports: [SaasRoutingModule,\n            NgxValidateCoreModule,\n            CoreModule,\n            CommercialUiModule,\n            ThemeSharedModule,\n            NgbDropdownModule,\n            FeatureManagementModule,\n            PageModule,\n            ChartModule,\n            NgbNavModule,\n            NgbPopoverModule,\n            AdvancedEntityFiltersModule,\n            NgbDatepickerModule,\n            NgbTooltipModule,\n            EditionsComponent,\n            ExtensibleModule], exports: [EditionsUsageWidgetComponent,\n            LatestTenantsWidgetComponent,\n            ConnectionStringsComponent,\n            SetTenantPasswordModalComponent,\n            TenantsComponent,\n            ImpersonateTenantModalComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasModule, imports: [SaasRoutingModule,\n            NgxValidateCoreModule,\n            CoreModule,\n            CommercialUiModule,\n            ThemeSharedModule,\n            NgbDropdownModule,\n            FeatureManagementModule,\n            PageModule,\n            ChartModule,\n            NgbNavModule,\n            NgbPopoverModule,\n            AdvancedEntityFiltersModule,\n            NgbDatepickerModule,\n            NgbTooltipModule,\n            EditionsComponent,\n            ExtensibleModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: SaasModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [...declarationsAndExports],\n                    exports: [...declarationsAndExports],\n                    imports: [\n                        SaasRoutingModule,\n                        NgxValidateCoreModule,\n                        CoreModule,\n                        CommercialUiModule,\n                        ThemeSharedModule,\n                        NgbDropdownModule,\n                        FeatureManagementModule,\n                        PageModule,\n                        ChartModule,\n                        NgbNavModule,\n                        NgbPopoverModule,\n                        AdvancedEntityFiltersModule,\n                        NgbDatepickerModule,\n                        NgbTooltipModule,\n                        EditionsComponent,\n                        ExtensibleModule,\n                    ],\n                }]\n        }] });\n\nconst defaultDateFormatRegex = /^\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])*$/;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ConnectionStringsComponent, DEFAULT_EDITIONS_ENTITY_ACTIONS, DEFAULT_EDITIONS_ENTITY_PROPS, DEFAULT_EDITIONS_FORM_PROPS, DEFAULT_EDITIONS_TOOLBAR_ACTIONS, DEFAULT_SAAS_CREATE_FORM_PROPS, DEFAULT_SAAS_EDIT_FORM_PROPS, DEFAULT_SAAS_ENTITY_ACTIONS, DEFAULT_SAAS_ENTITY_PROPS, DEFAULT_SAAS_TOOLBAR_ACTIONS, DEFAULT_TENANTS_CREATE_FORM_PROPS, DEFAULT_TENANTS_EDIT_FORM_PROPS, DEFAULT_TENANTS_ENTITY_ACTIONS, DEFAULT_TENANTS_ENTITY_PROPS, DEFAULT_TENANTS_TOOLBAR_ACTIONS, EditionDeleteComponent, EditionDeleteValidator, EditionsComponent, EditionsUsageWidgetComponent, ImpersonateTenantModalComponent, ImpersonateTenantModalService, LatestTenantsWidgetComponent, MoveAllTenantsComponent, SAAS_CREATE_FORM_PROP_CONTRIBUTORS, SAAS_EDIT_FORM_PROP_CONTRIBUTORS, SAAS_ENTITY_ACTION_CONTRIBUTORS, SAAS_ENTITY_PROP_CONTRIBUTORS, SAAS_TOOLBAR_ACTION_CONTRIBUTORS, SaasExtensionsGuard, SaasModule, SetTenantPasswordModalComponent, TenantsComponent, defaultDateFormatRegex, saasExtensionsResolver };\n"],"x_google_ignoreList":[0,1]}