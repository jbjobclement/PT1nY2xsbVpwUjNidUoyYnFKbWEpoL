{"version":3,"file":"72744.7886ee0ec2576a0c.js","mappings":"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","names":["TemplateContentService","constructor","restService","this","apiName","get","input","request","method","url","params","templateName","cultureName","restoreToDefault","body","update","static","ɵfac","t","i0","i1","ɵprov","token","factory","providedIn","TemplateDefinitionService","name","getList","filterText","sorting","skipCount","maxResultCount","TemplateContentsComponent_option_17_Template","rf","ctx","language_r2","$implicit","displayName","TemplateContentsComponent_option_32_Template","language_r3","AbstractTemplateContentComponent","injector","templateContent","fb","UntypedFormBuilder","templateContentService","route","ActivatedRoute","toaster","ToasterService","ngOnInit","form","group","content","Validators","required","getData","subscribe","snapshot","selectedCultureName","pipe","tap","setValue","save","callback","invalid","busy","value","finalize","success","switchMap","ɵcmp","type","selectors","decls","vars","template","encapsulation","InlineTemplateContentComponent","router","super","customizePerCulture","navigateByUrl","features","consts","dependencies","i2","i5","i6","i1$1","TemplateContentsComponent","configStateService","languages","referenceTemplateContent","getDeep","getReferenceTemplateContent","res","onChangeSelectedCultureName","$event","i4","TextTemplatesComponent","list","service","data","items","totalCount","hookToQuery","filter","query","editContents","record","navigate","isInlineLocalized","i3","ListService","provide","EXTENSIONS_IDENTIFIER","useValue","i4$1","i5$1","DEFAULT_TEXT_TEMPLATES_ENTITY_PROPS","EntityProp","createMany","columnWidth","valueResolver","of","isLayout","DEFAULT_TEXT_TEMPLATES_ENTITY_ACTIONS","EntityAction","text","action","getInjected","permission","DEFAULT_TEXT_TEMPLATES_TOOLBAR_ACTIONS","ToolbarAction","DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTIONS","DEFAULT_TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTIONS","DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROPS","TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS","InjectionToken","TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS","TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS","TextTemplateManagementExtensionsGuard","canActivate","extensions","ExtensionsService","actionContributors","toolbarContributors","propContributors","configState","ConfigStateService","getObjectExtensionEntitiesFromStore","map","entities","TextDefinition","mapEntitiesToContributors","objectExtensionContributors","mergeWithDefaultActions","entityActions","toolbarActions","mergeWithDefaultProps","entityProps","prop","mapTo","TextTemplateManagementGuard","textTemplateManagementFeatures","enable","TEXT_TEMPLATE_MANAGEMENT_FEATURES","textTemplateManagementGuard","inject","textTemplateManagementExtensionsResolver","Injector","routes","path","redirectTo","pathMatch","component","RouterOutletComponent","authGuard","permissionGuard","resolve","children","ReplaceableRouteContainerComponent","requiredPolicy","replaceableComponent","key","defaultComponent","TextTemplateManagementRoutingModule","ɵmod","ɵinj","imports","RouterModule","forChild","TextTemplateManagementModule","options","ngModule","providers","entityActionContributors","toolbarActionContributors","entityPropContributors","forLazy","LazyModuleFactory","NgxValidateCoreModule","CoreModule","CommercialUiModule","ThemeSharedModule","NgbDropdownModule","PageModule","AdvancedEntityFiltersModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@volo/abp.ng.text-template-management/fesm2022/volo-abp.ng.text-template-management-proxy.mjs","./node_modules/@volo/abp.ng.text-template-management/fesm2022/volo-abp.ng.text-template-management.mjs"],"sourcesContent":["import * as i1 from '@abp/ng.core';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nclass TemplateContentService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'TextTemplateManagement';\n        this.get = (input) => this.restService.request({\n            method: 'GET',\n            url: '/api/text-template-management/template-contents',\n            params: { templateName: input.templateName, cultureName: input.cultureName },\n        }, { apiName: this.apiName });\n        this.restoreToDefault = (input) => this.restService.request({\n            method: 'PUT',\n            url: '/api/text-template-management/template-contents/restore-to-default',\n            body: input,\n        }, { apiName: this.apiName });\n        this.update = (input) => this.restService.request({\n            method: 'PUT',\n            url: '/api/text-template-management/template-contents',\n            body: input,\n        }, { apiName: this.apiName });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TemplateContentService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TemplateContentService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TemplateContentService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\nclass TemplateDefinitionService {\n    constructor(restService) {\n        this.restService = restService;\n        this.apiName = 'TextTemplateManagement';\n        this.get = (name) => this.restService.request({\n            method: 'GET',\n            url: `/api/text-template-management/template-definitions/${name}`,\n        }, { apiName: this.apiName });\n        this.getList = (input) => this.restService.request({\n            method: 'GET',\n            url: '/api/text-template-management/template-definitions',\n            params: { filterText: input.filterText, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },\n        }, { apiName: this.apiName });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TemplateDefinitionService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TemplateDefinitionService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TemplateDefinitionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: i1.RestService }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TemplateContentService, TemplateDefinitionService };\n","import { ToasterService, ThemeSharedModule } from '@abp/ng.theme.shared';\nimport * as i0 from '@angular/core';\nimport { Component, InjectionToken, Injectable, Inject, inject, Injector, NgModule } from '@angular/core';\nimport * as i5 from '@angular/forms';\nimport { UntypedFormBuilder, Validators } from '@angular/forms';\nimport * as i1 from '@angular/router';\nimport { ActivatedRoute, RouterModule } from '@angular/router';\nimport * as i3 from '@volo/abp.ng.text-template-management/proxy';\nimport { TemplateContentService } from '@volo/abp.ng.text-template-management/proxy';\nimport { tap, finalize, switchMap, map, mapTo } from 'rxjs/operators';\nimport * as i2 from '@ngx-validate/core';\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\nimport * as i6 from '@abp/ng.components/page';\nimport { PageModule } from '@abp/ng.components/page';\nimport * as i1$1 from '@abp/ng.core';\nimport { ListService, ConfigStateService, RouterOutletComponent, authGuard, permissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';\nimport * as i4 from '@angular/common';\nimport * as i4$1 from '@abp/ng.components/extensible';\nimport { EXTENSIONS_IDENTIFIER, EntityProp, EntityAction, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps } from '@abp/ng.components/extensible';\nimport * as i5$1 from '@volo/abp.commercial.ng.ui';\nimport { CommercialUiModule, AdvancedEntityFiltersModule } from '@volo/abp.commercial.ng.ui';\nimport * as i1$2 from 'rxjs';\nimport { of } from 'rxjs';\nimport { TEXT_TEMPLATE_MANAGEMENT_FEATURES } from '@volo/abp.ng.text-template-management/common';\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\n\n// Not an abstract class on purpose. Do not change!\nclass AbstractTemplateContentComponent {\n    constructor(injector) {\n        this.injector = injector;\n        this.templateContent = {};\n        this.fb = injector.get(UntypedFormBuilder);\n        this.templateContentService = injector.get(TemplateContentService);\n        this.route = injector.get(ActivatedRoute);\n        this.toaster = injector.get(ToasterService);\n    }\n    ngOnInit() {\n        this.form = this.fb.group({ content: ['', [Validators.required]] });\n        this.getData().subscribe();\n    }\n    getData() {\n        const templateName = this.route.snapshot.params.name;\n        return this.templateContentService\n            .get({ templateName, cultureName: this.selectedCultureName })\n            .pipe(tap(templateContent => {\n            this.templateContent = templateContent;\n            this.form.get('content').setValue(this.templateContent.content);\n        }));\n    }\n    save(callback) {\n        if (this.form.invalid)\n            return;\n        this.busy = true;\n        const { content } = this.form.value;\n        this.templateContentService\n            .update({\n            templateName: this.templateContent.name,\n            cultureName: this.selectedCultureName,\n            content,\n        })\n            .pipe(finalize(() => (this.busy = false)))\n            .subscribe(() => {\n            this.toaster.success('TextTemplateManagement::Success');\n            if (callback)\n                callback();\n        });\n    }\n    restoreToDefault() {\n        this.busy = true;\n        this.templateContentService\n            .restoreToDefault({\n            templateName: this.templateContent.name,\n            cultureName: this.selectedCultureName,\n        })\n            .pipe(switchMap(() => this.getData()), finalize(() => (this.busy = false)))\n            .subscribe(() => {\n            this.toaster.success('TextTemplateManagement::Success');\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: AbstractTemplateContentComponent, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: AbstractTemplateContentComponent, selector: \"ng-component\", ngImport: i0, template: '', isInline: true }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: AbstractTemplateContentComponent, decorators: [{\n            type: Component,\n            args: [{\n                    template: '',\n                }]\n        }], ctorParameters: () => [{ type: i0.Injector }] });\n\nclass InlineTemplateContentComponent extends AbstractTemplateContentComponent {\n    constructor(injector, router) {\n        super(injector);\n        this.injector = injector;\n        this.router = router;\n    }\n    customizePerCulture() {\n        this.router.navigateByUrl(`/text-template-management/text-templates/contents/${this.templateContent.name}`);\n    }\n    save() {\n        super.save(() => {\n            this.router.navigateByUrl('/text-template-management/text-templates');\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: InlineTemplateContentComponent, deps: [{ token: i0.Injector }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: InlineTemplateContentComponent, selector: \"abp-inline-template-content\", usesInheritance: true, ngImport: i0, template: \"<abp-page [title]=\\\"'TextTemplateManagement::Contents' | abpLocalization\\\">\\r\\n  <div\\r\\n    role=\\\"alert\\\"\\r\\n    class=\\\"alert alert-danger\\\"\\r\\n    [innerHTML]=\\\"'TextTemplateManagement::InlineContentDescription' | abpLocalization\\\"\\r\\n  ></div>\\r\\n\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n      <label class=\\\"form-label\\\"\\r\\n      >{{ 'TextTemplateManagement::Name' | abpLocalization }}:\\r\\n        <strong>{{ templateContent.name }}</strong></label\\r\\n      >\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form id=\\\"template-inline-content-form\\\" [formGroup]=\\\"form\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col\\\">\\r\\n            <div class=\\\"mb-3\\\">\\r\\n              <label for=\\\"TemplateContent\\\" class=\\\"form-label\\\">{{\\r\\n                'TextTemplateManagement::TemplateContent' | abpLocalization\\r\\n                }}</label\\r\\n              ><span> * </span\\r\\n            ><textarea\\r\\n              id=\\\"TemplateContent\\\"\\r\\n              name=\\\"TemplateContent\\\"\\r\\n              rows=\\\"10\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              formControlName=\\\"content\\\"\\r\\n              [disabled]=\\\"busy\\\"\\r\\n            >\\r\\n              </textarea>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"d-flex flex-column gap-2 flex-column flex-md-row justify-content-between\\\">\\r\\n            <a\\r\\n              routerLink=\\\"/text-template-management/text-templates\\\"\\r\\n              role=\\\"button\\\"\\r\\n              class=\\\"btn btn-primary\\\"\\r\\n            >\\r\\n              <i class=\\\"fa fa-arrow-left me-1\\\" aria-hidden=\\\"true\\\"></i>\\r\\n              <span>{{ 'TextTemplateManagement::ReturnToTemplates' | abpLocalization }}</span>\\r\\n            </a>\\r\\n\\r\\n            <div class=\\\"d-flex gap-2 flex-column flex-md-row\\\">\\r\\n\\r\\n              <button\\r\\n                id=\\\"save-content\\\"\\r\\n                class=\\\"btn btn-primary \\\"\\r\\n                type=\\\"button\\\"\\r\\n                [disabled]=\\\"busy\\\"\\r\\n                (click)=\\\"save()\\\"\\r\\n              >\\r\\n                <span>{{ 'TextTemplateManagement::SaveContent' | abpLocalization }}</span>\\r\\n              </button>\\r\\n              <button\\r\\n                id=\\\"restore-to-default\\\"\\r\\n                class=\\\"btn btn-danger \\\"\\r\\n                type=\\\"button\\\"\\r\\n                [disabled]=\\\"busy\\\"\\r\\n                (click)=\\\"restoreToDefault()\\\"\\r\\n              >\\r\\n                <span>{{ 'TextTemplateManagement::RestoreToDefault' | abpLocalization }}</span>\\r\\n              </button>\\r\\n              <button\\r\\n                id=\\\"edit-unique-localization\\\"\\r\\n                class=\\\"btn btn-link  \\\"\\r\\n                type=\\\"button\\\"\\r\\n                [disabled]=\\\"busy\\\"\\r\\n                (click)=\\\"customizePerCulture()\\\"\\r\\n              >\\r\\n                <span>{{ 'TextTemplateManagement::CustomizePerCulture' | abpLocalization }}</span>\\r\\n              </button>\\r\\n\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i2.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"directive\", type: i2.ValidationDirective, selector: \"[formControl],[formControlName]\", exportAs: [\"validationDirective\"] }, { kind: \"directive\", type: i5.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i5.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i5.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i5.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i5.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i5.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"component\", type: i6.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: InlineTemplateContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-inline-template-content', template: \"<abp-page [title]=\\\"'TextTemplateManagement::Contents' | abpLocalization\\\">\\r\\n  <div\\r\\n    role=\\\"alert\\\"\\r\\n    class=\\\"alert alert-danger\\\"\\r\\n    [innerHTML]=\\\"'TextTemplateManagement::InlineContentDescription' | abpLocalization\\\"\\r\\n  ></div>\\r\\n\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n      <label class=\\\"form-label\\\"\\r\\n      >{{ 'TextTemplateManagement::Name' | abpLocalization }}:\\r\\n        <strong>{{ templateContent.name }}</strong></label\\r\\n      >\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <form id=\\\"template-inline-content-form\\\" [formGroup]=\\\"form\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col\\\">\\r\\n            <div class=\\\"mb-3\\\">\\r\\n              <label for=\\\"TemplateContent\\\" class=\\\"form-label\\\">{{\\r\\n                'TextTemplateManagement::TemplateContent' | abpLocalization\\r\\n                }}</label\\r\\n              ><span> * </span\\r\\n            ><textarea\\r\\n              id=\\\"TemplateContent\\\"\\r\\n              name=\\\"TemplateContent\\\"\\r\\n              rows=\\\"10\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              formControlName=\\\"content\\\"\\r\\n              [disabled]=\\\"busy\\\"\\r\\n            >\\r\\n              </textarea>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"d-flex flex-column gap-2 flex-column flex-md-row justify-content-between\\\">\\r\\n            <a\\r\\n              routerLink=\\\"/text-template-management/text-templates\\\"\\r\\n              role=\\\"button\\\"\\r\\n              class=\\\"btn btn-primary\\\"\\r\\n            >\\r\\n              <i class=\\\"fa fa-arrow-left me-1\\\" aria-hidden=\\\"true\\\"></i>\\r\\n              <span>{{ 'TextTemplateManagement::ReturnToTemplates' | abpLocalization }}</span>\\r\\n            </a>\\r\\n\\r\\n            <div class=\\\"d-flex gap-2 flex-column flex-md-row\\\">\\r\\n\\r\\n              <button\\r\\n                id=\\\"save-content\\\"\\r\\n                class=\\\"btn btn-primary \\\"\\r\\n                type=\\\"button\\\"\\r\\n                [disabled]=\\\"busy\\\"\\r\\n                (click)=\\\"save()\\\"\\r\\n              >\\r\\n                <span>{{ 'TextTemplateManagement::SaveContent' | abpLocalization }}</span>\\r\\n              </button>\\r\\n              <button\\r\\n                id=\\\"restore-to-default\\\"\\r\\n                class=\\\"btn btn-danger \\\"\\r\\n                type=\\\"button\\\"\\r\\n                [disabled]=\\\"busy\\\"\\r\\n                (click)=\\\"restoreToDefault()\\\"\\r\\n              >\\r\\n                <span>{{ 'TextTemplateManagement::RestoreToDefault' | abpLocalization }}</span>\\r\\n              </button>\\r\\n              <button\\r\\n                id=\\\"edit-unique-localization\\\"\\r\\n                class=\\\"btn btn-link  \\\"\\r\\n                type=\\\"button\\\"\\r\\n                [disabled]=\\\"busy\\\"\\r\\n                (click)=\\\"customizePerCulture()\\\"\\r\\n              >\\r\\n                <span>{{ 'TextTemplateManagement::CustomizePerCulture' | abpLocalization }}</span>\\r\\n              </button>\\r\\n\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i0.Injector }, { type: i1.Router }] });\n\nclass TemplateContentsComponent extends AbstractTemplateContentComponent {\n    constructor(injector, configStateService) {\n        super(injector);\n        this.injector = injector;\n        this.configStateService = configStateService;\n        this.languages = [];\n        this.referenceTemplateContent = { content: '' };\n    }\n    ngOnInit() {\n        this.languages = this.configStateService.getDeep('localization.languages');\n        this.selectedCultureName = this.languages[0].cultureName;\n        this.referenceTemplateContent.cultureName = this.configStateService.getDeep('localization.currentCulture.cultureName');\n        super.ngOnInit();\n        this.getReferenceTemplateContent();\n    }\n    getReferenceTemplateContent() {\n        this.templateContentService\n            .get({\n            templateName: this.route.snapshot.params.name,\n            cultureName: this.referenceTemplateContent.cultureName,\n        })\n            .subscribe(res => {\n            this.referenceTemplateContent = res;\n        });\n    }\n    onChangeSelectedCultureName() {\n        this.getData().subscribe();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TemplateContentsComponent, deps: [{ token: i0.Injector }, { token: i1$1.ConfigStateService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: TemplateContentsComponent, selector: \"abp-template-contents\", usesInheritance: true, ngImport: i0, template: \"<abp-page [title]=\\\"'TextTemplateManagement::Contents' | abpLocalization\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n      <label class=\\\"form-label\\\"\\r\\n        >{{ 'TextTemplateManagement::Name' | abpLocalization }}:\\r\\n        <strong>{{ templateContent.name }}</strong></label\\r\\n      >\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-6\\\">\\r\\n          <div class=\\\"mb-3\\\">\\r\\n            <label class=\\\"form-label\\\" for=\\\"target-culture-name\\\">{{\\r\\n              'TextTemplateManagement::BaseCultureName' | abpLocalization\\r\\n            }}</label>\\r\\n            <select\\r\\n              class=\\\"culture-selector form-select form-control\\\"\\r\\n              id=\\\"target-culture-name\\\"\\r\\n              name=\\\"target-culture-name\\\"\\r\\n              [(ngModel)]=\\\"referenceTemplateContent.cultureName\\\"\\r\\n              (ngModelChange)=\\\"getReferenceTemplateContent()\\\"\\r\\n            >\\r\\n              <option *ngFor=\\\"let language of languages\\\" [ngValue]=\\\"language.cultureName\\\">\\r\\n                {{ language.displayName }}\\r\\n              </option>\\r\\n            </select>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label class=\\\"form-label\\\" for=\\\"reference-content\\\">{{\\r\\n                  'TextTemplateManagement::BaseContent' | abpLocalization\\r\\n                }}</label\\r\\n                ><textarea\\r\\n                  id=\\\"reference-content\\\"\\r\\n                  name=\\\"reference-content\\\"\\r\\n                  rows=\\\"10\\\"\\r\\n                  class=\\\"form-control\\\"\\r\\n                  readonly\\r\\n                  [value]=\\\"referenceTemplateContent.content\\\"\\r\\n                >\\r\\n                </textarea>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-6\\\">\\r\\n          <div class=\\\"mb-3\\\">\\r\\n            <label class=\\\"form-label\\\" for=\\\"target-culture-name\\\">{{\\r\\n              'TextTemplateManagement::TargetCultureName' | abpLocalization\\r\\n            }}</label>\\r\\n            <select\\r\\n              class=\\\"culture-selector form-select form-control\\\"\\r\\n              id=\\\"target-culture-name\\\"\\r\\n              name=\\\"target-culture-name\\\"\\r\\n              [(ngModel)]=\\\"selectedCultureName\\\"\\r\\n              (ngModelChange)=\\\"onChangeSelectedCultureName()\\\"\\r\\n            >\\r\\n              <option *ngFor=\\\"let language of languages\\\" [ngValue]=\\\"language.cultureName\\\">\\r\\n                {{ language.displayName }}\\r\\n              </option>\\r\\n            </select>\\r\\n          </div>\\r\\n          <form id=\\\"template-inline-content-form\\\" [formGroup]=\\\"form\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col\\\">\\r\\n                <div class=\\\"mb-3\\\">\\r\\n                  <label class=\\\"form-label\\\" for=\\\"TemplateContent\\\">{{\\r\\n                    'TextTemplateManagement::TemplateContent' | abpLocalization\\r\\n                  }}</label\\r\\n                  ><span> * </span\\r\\n                  ><textarea\\r\\n                    id=\\\"TemplateContent\\\"\\r\\n                    name=\\\"TemplateContent\\\"\\r\\n                    rows=\\\"10\\\"\\r\\n                    class=\\\"form-control\\\"\\r\\n                    formControlName=\\\"content\\\"\\r\\n                    [disabled]=\\\"busy\\\"\\r\\n                  >\\r\\n                  </textarea>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col col-md-4\\\">\\r\\n          <a\\r\\n            routerLink=\\\"/text-template-management/text-templates\\\"\\r\\n            role=\\\"button\\\"\\r\\n            class=\\\"btn btn-primary\\\"\\r\\n          >\\r\\n            <i class=\\\"fa fa-arrow-left me-1\\\" aria-hidden=\\\"true\\\"></i>\\r\\n            <span>{{ 'TextTemplateManagement::ReturnToTemplates' | abpLocalization }}</span>\\r\\n          </a>\\r\\n        </div>\\r\\n        <div class=\\\"col col-md-8\\\">\\r\\n          <div class=\\\"float-end\\\">\\r\\n            <button\\r\\n              id=\\\"save-content\\\"\\r\\n              class=\\\"btn btn-primary\\\"\\r\\n              type=\\\"button\\\"\\r\\n              [disabled]=\\\"busy\\\"\\r\\n              (click)=\\\"save()\\\"\\r\\n            >\\r\\n              <span>{{ 'TextTemplateManagement::SaveContent' | abpLocalization }}</span>\\r\\n            </button>\\r\\n            <button\\r\\n              id=\\\"restore-to-default\\\"\\r\\n              class=\\\"btn btn-danger ms-1\\\"\\r\\n              type=\\\"button\\\"\\r\\n              [disabled]=\\\"busy\\\"\\r\\n              (click)=\\\"restoreToDefault()\\\"\\r\\n            >\\r\\n              <span>{{ 'TextTemplateManagement::RestoreToDefault' | abpLocalization }}</span>\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i2.ValidationGroupDirective, selector: \"[formGroup],[formGroupName]\", exportAs: [\"validationGroup\"] }, { kind: \"directive\", type: i2.ValidationDirective, selector: \"[formControl],[formControlName]\", exportAs: [\"validationDirective\"] }, { kind: \"directive\", type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i5.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i5.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i5.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { kind: \"directive\", type: i5.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i5.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { kind: \"directive\", type: i5.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i5.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i5.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: i5.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i5.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"component\", type: i6.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TemplateContentsComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-template-contents', template: \"<abp-page [title]=\\\"'TextTemplateManagement::Contents' | abpLocalization\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">\\r\\n      <label class=\\\"form-label\\\"\\r\\n        >{{ 'TextTemplateManagement::Name' | abpLocalization }}:\\r\\n        <strong>{{ templateContent.name }}</strong></label\\r\\n      >\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-6\\\">\\r\\n          <div class=\\\"mb-3\\\">\\r\\n            <label class=\\\"form-label\\\" for=\\\"target-culture-name\\\">{{\\r\\n              'TextTemplateManagement::BaseCultureName' | abpLocalization\\r\\n            }}</label>\\r\\n            <select\\r\\n              class=\\\"culture-selector form-select form-control\\\"\\r\\n              id=\\\"target-culture-name\\\"\\r\\n              name=\\\"target-culture-name\\\"\\r\\n              [(ngModel)]=\\\"referenceTemplateContent.cultureName\\\"\\r\\n              (ngModelChange)=\\\"getReferenceTemplateContent()\\\"\\r\\n            >\\r\\n              <option *ngFor=\\\"let language of languages\\\" [ngValue]=\\\"language.cultureName\\\">\\r\\n                {{ language.displayName }}\\r\\n              </option>\\r\\n            </select>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <div class=\\\"mb-3\\\">\\r\\n                <label class=\\\"form-label\\\" for=\\\"reference-content\\\">{{\\r\\n                  'TextTemplateManagement::BaseContent' | abpLocalization\\r\\n                }}</label\\r\\n                ><textarea\\r\\n                  id=\\\"reference-content\\\"\\r\\n                  name=\\\"reference-content\\\"\\r\\n                  rows=\\\"10\\\"\\r\\n                  class=\\\"form-control\\\"\\r\\n                  readonly\\r\\n                  [value]=\\\"referenceTemplateContent.content\\\"\\r\\n                >\\r\\n                </textarea>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-6\\\">\\r\\n          <div class=\\\"mb-3\\\">\\r\\n            <label class=\\\"form-label\\\" for=\\\"target-culture-name\\\">{{\\r\\n              'TextTemplateManagement::TargetCultureName' | abpLocalization\\r\\n            }}</label>\\r\\n            <select\\r\\n              class=\\\"culture-selector form-select form-control\\\"\\r\\n              id=\\\"target-culture-name\\\"\\r\\n              name=\\\"target-culture-name\\\"\\r\\n              [(ngModel)]=\\\"selectedCultureName\\\"\\r\\n              (ngModelChange)=\\\"onChangeSelectedCultureName()\\\"\\r\\n            >\\r\\n              <option *ngFor=\\\"let language of languages\\\" [ngValue]=\\\"language.cultureName\\\">\\r\\n                {{ language.displayName }}\\r\\n              </option>\\r\\n            </select>\\r\\n          </div>\\r\\n          <form id=\\\"template-inline-content-form\\\" [formGroup]=\\\"form\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col\\\">\\r\\n                <div class=\\\"mb-3\\\">\\r\\n                  <label class=\\\"form-label\\\" for=\\\"TemplateContent\\\">{{\\r\\n                    'TextTemplateManagement::TemplateContent' | abpLocalization\\r\\n                  }}</label\\r\\n                  ><span> * </span\\r\\n                  ><textarea\\r\\n                    id=\\\"TemplateContent\\\"\\r\\n                    name=\\\"TemplateContent\\\"\\r\\n                    rows=\\\"10\\\"\\r\\n                    class=\\\"form-control\\\"\\r\\n                    formControlName=\\\"content\\\"\\r\\n                    [disabled]=\\\"busy\\\"\\r\\n                  >\\r\\n                  </textarea>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col col-md-4\\\">\\r\\n          <a\\r\\n            routerLink=\\\"/text-template-management/text-templates\\\"\\r\\n            role=\\\"button\\\"\\r\\n            class=\\\"btn btn-primary\\\"\\r\\n          >\\r\\n            <i class=\\\"fa fa-arrow-left me-1\\\" aria-hidden=\\\"true\\\"></i>\\r\\n            <span>{{ 'TextTemplateManagement::ReturnToTemplates' | abpLocalization }}</span>\\r\\n          </a>\\r\\n        </div>\\r\\n        <div class=\\\"col col-md-8\\\">\\r\\n          <div class=\\\"float-end\\\">\\r\\n            <button\\r\\n              id=\\\"save-content\\\"\\r\\n              class=\\\"btn btn-primary\\\"\\r\\n              type=\\\"button\\\"\\r\\n              [disabled]=\\\"busy\\\"\\r\\n              (click)=\\\"save()\\\"\\r\\n            >\\r\\n              <span>{{ 'TextTemplateManagement::SaveContent' | abpLocalization }}</span>\\r\\n            </button>\\r\\n            <button\\r\\n              id=\\\"restore-to-default\\\"\\r\\n              class=\\\"btn btn-danger ms-1\\\"\\r\\n              type=\\\"button\\\"\\r\\n              [disabled]=\\\"busy\\\"\\r\\n              (click)=\\\"restoreToDefault()\\\"\\r\\n            >\\r\\n              <span>{{ 'TextTemplateManagement::RestoreToDefault' | abpLocalization }}</span>\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</abp-page>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i0.Injector }, { type: i1$1.ConfigStateService }] });\n\nclass TextTemplatesComponent {\n    constructor(list, router, service) {\n        this.list = list;\n        this.router = router;\n        this.service = service;\n        this.data = { items: [], totalCount: 0 };\n    }\n    ngOnInit() {\n        this.hookToQuery();\n    }\n    hookToQuery() {\n        this.list\n            .hookToQuery(({ filter: filterText, ...query }) => this.service.getList({ ...query, filterText }))\n            .subscribe(res => (this.data = res));\n    }\n    editContents(record) {\n        this.router.navigate([\n            `/text-template-management/text-templates/contents${record.isInlineLocalized ? '/inline' : ''}/${record.name}`,\n        ]);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplatesComponent, deps: [{ token: i1$1.ListService }, { token: i1.Router }, { token: i3.TemplateDefinitionService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.9\", type: TextTemplatesComponent, selector: \"abp-text-templates\", providers: [\n            ListService,\n            {\n                provide: EXTENSIONS_IDENTIFIER,\n                useValue: \"TextTemplateManagement.TextTemplates\" /* eTextTemplateManagementComponents.TextTemplates */,\n            },\n        ], ngImport: i0, template: \"  <abp-page\\r\\n    [title]=\\\"'TextTemplateManagement::Menu:TextTemplates' | abpLocalization\\\"\\r\\n    [toolbar]=\\\"data.items\\\"\\r\\n  >\\r\\n    <div id=\\\"wrapper\\\">\\r\\n      <abp-advanced-entity-filters\\r\\n        [list]=\\\"list\\\"\\r\\n        localizationSourceName=\\\"TextTemplateManagement\\\"\\r\\n      ></abp-advanced-entity-filters>\\r\\n\\r\\n      <div class=\\\"card\\\">\\r\\n        <abp-extensible-table\\r\\n          [actionsColumnWidth]=\\\"170\\\"\\r\\n          [data]=\\\"data.items\\\"\\r\\n          [recordsTotal]=\\\"data.totalCount\\\"\\r\\n          [list]=\\\"list\\\"\\r\\n        ></abp-extensible-table>\\r\\n      </div>\\r\\n    </div>\\r\\n  </abp-page>\\r\\n\", dependencies: [{ kind: \"component\", type: i4$1.ExtensibleTableComponent, selector: \"abp-extensible-table\", inputs: [\"actionsText\", \"data\", \"list\", \"recordsTotal\", \"actionsColumnWidth\", \"actionsTemplate\"], outputs: [\"tableActivate\"], exportAs: [\"abpExtensibleTable\"] }, { kind: \"component\", type: i5$1.AdvancedEntityFiltersComponent, selector: \"abp-advanced-entity-filters\", inputs: [\"list\", \"localizationSourceName\", \"entityFilterPlaceholder\"] }, { kind: \"component\", type: i6.PageComponent, selector: \"abp-page\", inputs: [\"title\", \"toolbar\", \"breadcrumb\"] }, { kind: \"pipe\", type: i1$1.LocalizationPipe, name: \"abpLocalization\" }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplatesComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'abp-text-templates', providers: [\n                        ListService,\n                        {\n                            provide: EXTENSIONS_IDENTIFIER,\n                            useValue: \"TextTemplateManagement.TextTemplates\" /* eTextTemplateManagementComponents.TextTemplates */,\n                        },\n                    ], template: \"  <abp-page\\r\\n    [title]=\\\"'TextTemplateManagement::Menu:TextTemplates' | abpLocalization\\\"\\r\\n    [toolbar]=\\\"data.items\\\"\\r\\n  >\\r\\n    <div id=\\\"wrapper\\\">\\r\\n      <abp-advanced-entity-filters\\r\\n        [list]=\\\"list\\\"\\r\\n        localizationSourceName=\\\"TextTemplateManagement\\\"\\r\\n      ></abp-advanced-entity-filters>\\r\\n\\r\\n      <div class=\\\"card\\\">\\r\\n        <abp-extensible-table\\r\\n          [actionsColumnWidth]=\\\"170\\\"\\r\\n          [data]=\\\"data.items\\\"\\r\\n          [recordsTotal]=\\\"data.totalCount\\\"\\r\\n          [list]=\\\"list\\\"\\r\\n        ></abp-extensible-table>\\r\\n      </div>\\r\\n    </div>\\r\\n  </abp-page>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i1$1.ListService }, { type: i1.Router }, { type: i3.TemplateDefinitionService }] });\n\nconst DEFAULT_TEXT_TEMPLATES_ENTITY_PROPS = EntityProp.createMany([\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'displayName',\n        displayName: 'TextTemplateManagement::Name',\n        columnWidth: 300,\n    },\n    {\n        type: \"boolean\" /* ePropType.Boolean */,\n        name: 'isInlineLocalized',\n        displayName: 'TextTemplateManagement::IsInlineLocalized',\n        columnWidth: 150,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'isLayout',\n        displayName: 'TextTemplateManagement::IsLayout',\n        columnWidth: 150,\n        valueResolver: data => {\n            const icon = data.record.isLayout\n                ? '<div class=\"text-success\"><i class=\"fa fa-check\"></i></div>'\n                : '';\n            return of(icon);\n        },\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'layout',\n        displayName: 'TextTemplateManagement::Layout',\n        columnWidth: 300,\n    },\n    {\n        type: \"string\" /* ePropType.String */,\n        name: 'defaultCultureName',\n        displayName: 'TextTemplateManagement::DefaultCultureName',\n        columnWidth: 200,\n    },\n]);\n\nconst DEFAULT_TEXT_TEMPLATES_ENTITY_ACTIONS = EntityAction.createMany([\n    {\n        text: 'TextTemplateManagement::EditContents',\n        action: data => {\n            const component = data.getInjected(TextTemplatesComponent);\n            component.editContents(data.record);\n        },\n        permission: 'TextTemplateManagement.TextTemplates.EditContents',\n    },\n]);\n\nconst DEFAULT_TEXT_TEMPLATES_TOOLBAR_ACTIONS = ToolbarAction.createMany([]);\n\nconst DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTIONS = {\n    [\"TextTemplateManagement.TextTemplates\" /* eTextTemplateManagementComponents.TextTemplates */]: DEFAULT_TEXT_TEMPLATES_ENTITY_ACTIONS,\n};\nconst DEFAULT_TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTIONS = {\n    [\"TextTemplateManagement.TextTemplates\" /* eTextTemplateManagementComponents.TextTemplates */]: DEFAULT_TEXT_TEMPLATES_TOOLBAR_ACTIONS,\n};\nconst DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROPS = {\n    [\"TextTemplateManagement.TextTemplates\" /* eTextTemplateManagementComponents.TextTemplates */]: DEFAULT_TEXT_TEMPLATES_ENTITY_PROPS,\n};\nconst TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS');\nconst TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS');\nconst TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS');\n\n/**\n * @deprecated Use `textTemplateManagementExtensionsResolver` *function* instead.\n */\nclass TextTemplateManagementExtensionsGuard {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    canActivate() {\n        const extensions = this.injector.get(ExtensionsService);\n        const actionContributors = this.injector.get(TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n        const toolbarContributors = this.injector.get(TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n        const propContributors = this.injector.get(TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};\n        const configState = this.injector.get(ConfigStateService);\n        return getObjectExtensionEntitiesFromStore(configState, 'TextTemplateManagement').pipe(map(entities => ({\n            [\"TextTemplateManagement.TextTemplates\" /* eTextTemplateManagementComponents.TextTemplates */]: entities.TextDefinition,\n        })), mapEntitiesToContributors(configState, 'TextTemplateManagement'), tap(objectExtensionContributors => {\n            mergeWithDefaultActions(extensions.entityActions, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTIONS, actionContributors);\n            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);\n            mergeWithDefaultProps(extensions.entityProps, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n        }), mapTo(true));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementExtensionsGuard, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementExtensionsGuard }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementExtensionsGuard, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.Injector }] });\n\n/**\n * @deprecated Use `textTemplateManagementGuard` *function* instead.\n */\nclass TextTemplateManagementGuard {\n    constructor(textTemplateManagementFeatures) {\n        this.textTemplateManagementFeatures = textTemplateManagementFeatures;\n    }\n    canActivate() {\n        return this.textTemplateManagementFeatures.pipe(map(features => features.enable));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementGuard, deps: [{ token: TEXT_TEMPLATE_MANAGEMENT_FEATURES }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementGuard }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementGuard, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i1$2.Observable, decorators: [{\n                    type: Inject,\n                    args: [TEXT_TEMPLATE_MANAGEMENT_FEATURES]\n                }] }] });\nconst textTemplateManagementGuard = () => {\n    const textTemplateManagementFeatures = inject(TEXT_TEMPLATE_MANAGEMENT_FEATURES);\n    return textTemplateManagementFeatures.pipe(map(features => features.enable));\n};\n\nconst textTemplateManagementExtensionsResolver = () => {\n    const injector = inject(Injector);\n    const extensions = injector.get(ExtensionsService);\n    const actionContributors = injector.get(TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, null) || {};\n    const toolbarContributors = injector.get(TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};\n    const propContributors = injector.get(TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, null) || {};\n    const configState = injector.get(ConfigStateService);\n    return getObjectExtensionEntitiesFromStore(configState, 'TextTemplateManagement').pipe(map(entities => ({\n        [\"TextTemplateManagement.TextTemplates\" /* eTextTemplateManagementComponents.TextTemplates */]: entities.TextDefinition,\n    })), mapEntitiesToContributors(configState, 'TextTemplateManagement'), tap(objectExtensionContributors => {\n        mergeWithDefaultActions(extensions.entityActions, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTIONS, actionContributors);\n        mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTIONS, toolbarContributors);\n        mergeWithDefaultProps(extensions.entityProps, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);\n    }));\n};\n\nconst routes = [\n    { path: '', redirectTo: 'text-templates', pathMatch: 'full' },\n    {\n        path: 'text-templates',\n        component: RouterOutletComponent,\n        canActivate: [authGuard, permissionGuard, textTemplateManagementGuard],\n        resolve: [textTemplateManagementExtensionsResolver],\n        children: [\n            {\n                path: '',\n                component: ReplaceableRouteContainerComponent,\n                data: {\n                    requiredPolicy: 'TextTemplateManagement.TextTemplates',\n                    replaceableComponent: {\n                        key: \"TextTemplateManagement.TextTemplates\" /* eTextTemplateManagementComponents.TextTemplates */,\n                        defaultComponent: TextTemplatesComponent,\n                    },\n                },\n            },\n            {\n                path: 'contents',\n                component: RouterOutletComponent,\n                canActivate: [permissionGuard],\n                data: { requiredPolicy: 'TextTemplateManagement.TextTemplates.EditContents' },\n                children: [\n                    {\n                        path: 'inline/:name',\n                        component: ReplaceableRouteContainerComponent,\n                        data: {\n                            replaceableComponent: {\n                                key: \"TextTemplateManagement.InlineTemplateContent\" /* eTextTemplateManagementComponents.InlineTemplateContent */,\n                                defaultComponent: InlineTemplateContentComponent,\n                            },\n                        },\n                    },\n                    {\n                        path: ':name',\n                        component: ReplaceableRouteContainerComponent,\n                        data: {\n                            replaceableComponent: {\n                                key: \"TextTemplateManagement.TemplateContents\" /* eTextTemplateManagementComponents.TemplateContents */,\n                                defaultComponent: TemplateContentsComponent,\n                            },\n                        },\n                    },\n                ],\n            },\n        ],\n    },\n];\nclass TextTemplateManagementRoutingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementRoutingModule, imports: [i1.RouterModule], exports: [RouterModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementRoutingModule, imports: [RouterModule.forChild(routes), RouterModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementRoutingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RouterModule.forChild(routes)],\n                    exports: [RouterModule],\n                }]\n        }] });\n\nclass TextTemplateManagementModule {\n    static forChild(options = {}) {\n        return {\n            ngModule: TextTemplateManagementModule,\n            providers: [\n                {\n                    provide: TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,\n                    useValue: options.entityActionContributors,\n                },\n                {\n                    provide: TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,\n                    useValue: options.toolbarActionContributors,\n                },\n                {\n                    provide: TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,\n                    useValue: options.entityPropContributors,\n                },\n            ],\n        };\n    }\n    static forLazy(options = {}) {\n        return new LazyModuleFactory(TextTemplateManagementModule.forChild(options));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementModule, declarations: [TextTemplatesComponent,\n            TemplateContentsComponent,\n            InlineTemplateContentComponent,\n            AbstractTemplateContentComponent], imports: [TextTemplateManagementRoutingModule,\n            NgxValidateCoreModule,\n            CoreModule,\n            CommercialUiModule,\n            ThemeSharedModule,\n            NgbDropdownModule,\n            PageModule,\n            AdvancedEntityFiltersModule], exports: [TextTemplatesComponent,\n            TemplateContentsComponent,\n            InlineTemplateContentComponent,\n            AbstractTemplateContentComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementModule, imports: [TextTemplateManagementRoutingModule,\n            NgxValidateCoreModule,\n            CoreModule,\n            CommercialUiModule,\n            ThemeSharedModule,\n            NgbDropdownModule,\n            PageModule,\n            AdvancedEntityFiltersModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.9\", ngImport: i0, type: TextTemplateManagementModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        TextTemplatesComponent,\n                        TemplateContentsComponent,\n                        InlineTemplateContentComponent,\n                        AbstractTemplateContentComponent,\n                    ],\n                    exports: [\n                        TextTemplatesComponent,\n                        TemplateContentsComponent,\n                        InlineTemplateContentComponent,\n                        AbstractTemplateContentComponent,\n                    ],\n                    imports: [\n                        TextTemplateManagementRoutingModule,\n                        NgxValidateCoreModule,\n                        CoreModule,\n                        CommercialUiModule,\n                        ThemeSharedModule,\n                        NgbDropdownModule,\n                        PageModule,\n                        AdvancedEntityFiltersModule,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractTemplateContentComponent, DEFAULT_TEXT_TEMPLATES_ENTITY_ACTIONS, DEFAULT_TEXT_TEMPLATES_ENTITY_PROPS, DEFAULT_TEXT_TEMPLATES_TOOLBAR_ACTIONS, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTIONS, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROPS, DEFAULT_TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTIONS, InlineTemplateContentComponent, TEXT_TEMPLATE_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, TEXT_TEMPLATE_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, TEXT_TEMPLATE_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, TemplateContentsComponent, TextTemplateManagementExtensionsGuard, TextTemplateManagementGuard, TextTemplateManagementModule, TextTemplatesComponent, textTemplateManagementExtensionsResolver, textTemplateManagementGuard };\n"],"x_google_ignoreList":[0,1]}